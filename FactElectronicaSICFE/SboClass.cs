using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SAPbouiCOM;
using SAPbobsCOM;
using System.Data;
using System.Xml.Serialization;
using System.Xml;
using System.IO;
using System.Web;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Printing;
using System.Management;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Threading;
using System.Globalization;
using ThoughtWorks.QRCode.Codec;
using System.Collections;
using AddOn_Fact_Electronica_Sicfe;
using System.Text.RegularExpressions;
using AddOn_Fact_Electronica_Sicfe.Clases;

namespace FacturacionElectronica
{
    public class SboClass
    {
        #region Global Definitions
        private string tipoConexionBaseDatos = "SQL"; // Indico si es SQL o HANNA
        private SAPbouiCOM.Application SBO_Application;
        private SAPbobsCOM.Company oCompany;
        private String sPath;
        char c = Convert.ToChar(92);
        private bool formFactura = false;
        private bool sucursalesActivadas = false;
        private bool GuardoFactura = false;
        private bool almacenoFactura = false;
        private bool generoPDF = false;
        private bool yaCargoClientes = false;
        private bool imprimePDFDefecto = false;
        private bool guardaImagenQR = false;
        private bool concatenoCodNomArt = true;
        private bool realizarRemitos = false;
        private bool realizarResguardos = false;
        private bool realizarBoletaEntrada = false;
        private bool imprimre2ViasCredito = false; // Si esta en si imprime 2 vias cuando es un documento que no es Contado
        private bool esDocUruguayo = true; // Si está en true entonces el xml queda DocRecep sino es DocRecepExt
        private bool esContado = true; // Si está en true Imprime el PDF una sola vez, sino imprime 2
        private bool esNuevaVersionDGI = false; // Indica si utiliza la version nueva de DGI para los descuentos
        private bool muestraDescuentoGlobal = false; // Indica si muestra el descuento global en los items, o muestra los items con el descuento ya hecho
        private bool sumaDescuentos = true; // Indica si muestra el descuento global y el descuento del item sumado en cada uno de ellos. 
        private bool impresoraUserLog = true; // Si está en true usa siempre la impresora del usuario logueado
        private String codigoFactura = "";
        private String codigoDocEntry = "";
        private String tipo = "";
        private String NroDocumento = "";
        private String ultimoForm = ""; // Guarda el ultimo form al que entro, para cambiar la variable creoFactura
        private String usuarioLogueado = ""; // Usuario logueado
        private int idUsuarioLogueado = 0; // Id del Usuario logueado
        private int idSucursalUsuario = 0; // Id de la Sucursal correspondiente al Usuario logueado
        private bool esSuperUsuario = false; // Indica si el usuario logueado es superusuario
        private bool tieneAutorizaciones = false;
        // DATOS DE CONEXION A SICFErn

        private String rucEmisorSicfe = "217042750013";
        private String sicfeTenant = "tenant";
        private String sicfeUser = "erp";
        private String sicfePassword = "erp";
        private String sicfeRutaWS = "";
        private String sicfeAdenda = "";
        private string versionSicfe = "1.34.7";
        private string sicfeTemplate = ""; private string sicfeCliente = "";
        private String descEmpresa = "INVEN";
        private String softwareImpresion = "Acrobat";
        private DateTime fechaInicioFE = DateTime.Now;
        private string nombreImpresoraUsuario = ""; // Nombre de la impresora configurada del usuario que crea la factura
        private string templateImpresoraUsuario = ""; // Template del usuario que crea la factura
        string rutaDefecto = "C:\\Archivos_SICFE\\PDF\\";
        string rutaDefectoQR = "C:\\Archivos_SICFE\\QR\\";
        string formatoFecha = "yyyy-MM-dd"; // Formato de fecha por defecto
        private bool pdfAbierto = false;
        private bool creoFactura = false;
        private bool guardaLog = false;
        private bool guardaDatosRespCFE = false; // Si es si guarda Cod Seguridad, CAE, etc de Respuesta de SICFE
        private bool enviaAuto = false; // Si es si todos los documento se van enviando a medida que se van realizando
        private bool cancelarEnvio = true; // Si está en false cancela el For de envios a SICFE
        private bool cierroUltimoForm = true; // Indica si cierro el ultimoForm abierto
        private bool noImprimeNingunModo = false; // Se utilizar por ejemplo para Almena, que no imprime ni por PDF ni por Crystal. Configuracion en Sucursales (NOI)
        private bool esDocCancelado = false; // Indica si es un documento de cancelacion
        private string monedaStrISO = "UYU"; private string monedaStrSimbolo = "$";
        private string campoReferencia = "Ref2"; // Campo que se utiliza como referencia para saber si el documento fue enviado o no
        private string impresoraNombre = ""; // Impresora predeterminada
        private string strCta = "";
        bool esClienteASU = false;

        SAPbouiCOM.Form oFormDatosPedido;
        SAPbouiCOM.Form oFormEnviarDocumento;
        SAPbouiCOM.Form oFormConfigAddOn;
        clsObjetoConfiguracionDocumento objConfigDocumento = new clsObjetoConfiguracionDocumento();
        #endregion

        #region Estructura SBO

        private void KillProcess()
        {
            Process[] winProcesses = Process.GetProcesses();
            //bool ask = true;
            //bool okToKill = false;
            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

            for (int i = 0; i < winProcesses.Length; i++)
            {
                Process current = winProcesses[i];

                try
                {
                    if (current.MainModule.ModuleName == System.Reflection.Assembly.GetExecutingAssembly().GetName().Name && GetProcessOwner(current.Id) == userName)
                    {
                        //if (current.MainModule.ModuleName == System.Reflection.Assembly.GetExecutingAssembly().GetName().Name)
                        //{

                        //if (ask)
                        //{
                        //SBO_Application.MessageBox("Se actualizó correctamente la Configuración del addOn", );
                        //if (System.Windows.Forms.MessageBox.Show("Add-on is currently running. Close it now?", "Confirm", System.Windows.Forms.MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
                        //{
                        //    okToKill = true;
                        //}
                        //ask = false;

                        //if (okToKill)
                        //{
                        current.Kill();
                        //    }
                        //}
                    }
                }
                catch
                {
                    //empty
                }
            }
        }

        public string GetProcessOwner(int processId)
        {
            string query = "Select * From Win32_Process Where ProcessID = " + processId;
            ManagementObjectSearcher searcher = new ManagementObjectSearcher(query);
            ManagementObjectCollection processList = searcher.Get();

            foreach (ManagementObject obj in processList)
            {
                string[] argList = new string[] { string.Empty, string.Empty };
                int returnVal = Convert.ToInt32(obj.InvokeMethod("GetOwner", argList));
                if (returnVal == 0)
                {
                    // return Dominio\usuario 
                    return argList[1] + "\\" + argList[0];
                }
            }

            return "NO TIENE USUARIO";
        }

        private void init()
        {
            try
            {
                try
                {
                    SetApplication();
                    getUsuarioLogueado();
                }
                catch (Exception ex)
                {
                    //System.Windows.Forms.MessageBox.Show("SBO no se encontro cargado!.");
                }
                try
                {
                    SBO_Application.MenuEvent += new SAPbouiCOM._IApplicationEvents_MenuEventEventHandler(this.SBO_Application_MenuEvent);
                    SBO_Application.ItemEvent += new SAPbouiCOM._IApplicationEvents_ItemEventEventHandler(SBO_Application_ItemEvent);
                    SBO_Application.AppEvent += new SAPbouiCOM._IApplicationEvents_AppEventEventHandler(SBO_Application_AppEvent);
                }
                catch
                {
                    //System.Windows.Forms.MessageBox.Show("Error al cargar eventos.");
                }
                try
                {
                    if (SetConnectionContext() != 0)
                    {
                        //SBO_Application.MessageBox("Error al Conectar con DI API");
                    }
                }
                catch (Exception e)
                {
                    //System.Windows.Forms.MessageBox.Show("Error al conectar con DI API: " + e.Message);
                }
                try
                {
                    oCompany = SBO_Application.Company.GetDICompany();
                }
                catch
                {
                    //SBO_Application.MessageBox("Error al intentar conectar con Base de Datos.");
                }
                try
                {
                    obtenerDatosConexion(false, true);
                    ObtenerMonedaLocal(); // Obtengo las monedas locales
                    getIdUsuarioIdSucursal(); // Busco el id de Sucursal y el id de Usuario
                    AddMenuItems();
                    /*AddMenuItemsEnvDoc();
                    if (esSuperUsuario == true)
                        AddMenuItemsConfigAddOn();*/
                }
                catch
                {
                    //SBO_Application.MessageBox("Error al agregar menu items.");
                }
            }
            catch (Exception ex)
            {
                //System.Windows.Forms.MessageBox.Show("SBO no se encontro cargado! Se cerrará el addOn.");
                //System.Windows.Forms.Application.Exit();
            }
        }

        public SboClass()
        {
            KillProcess();
            init();
        }

        private void SetApplication()
        {
            SAPbouiCOM.SboGuiApi SboGuiApi;
            String sConnectionString;
            SboGuiApi = new SAPbouiCOM.SboGuiApi();
            sConnectionString = Environment.GetCommandLineArgs().GetValue(1).ToString(); // 1 Estaba antes el uno pero no lo traia como param
            SboGuiApi.Connect(sConnectionString);
            SBO_Application = SboGuiApi.GetApplication();
        }

        private int SetConnectionContext()
        {

            String sCookie;
            String sConnectionContext;
            oCompany = new SAPbobsCOM.Company();
            sCookie = oCompany.GetContextCookie();
            sConnectionContext = SBO_Application.Company.GetConnectionContext(sCookie);
            if (oCompany.Connected == true)
            {
                oCompany.Disconnect();
            }
            return oCompany.SetSboLoginContext(sConnectionContext);
        }

        private String LoadFromXML(String FileName)
        {
            System.Xml.XmlDocument oXmlDoc;
            String sPath;

            oXmlDoc = new System.Xml.XmlDocument();
            sPath = System.Windows.Forms.Application.StartupPath + c;

            oXmlDoc.Load(sPath + FileName);
            return (oXmlDoc.InnerXml);
        }
        #endregion

        #region Eventos

        //Menu Events
        private void SBO_Application_MenuEvent(ref SAPbouiCOM.MenuEvent pVal, out bool BubbleEvent)
        {
            try
            {
                if (pVal.BeforeAction == false)
                {
                    if (pVal.MenuUID.Equals("ImprimirDocumento"))
                    {
                        CargarFormulario();
                    }
                    if (pVal.MenuUID.Equals("EnviarDocumento"))
                    {
                        CargarFormularioEnvDoc();
                    }
                    if (pVal.MenuUID.Equals("ConfiguracionAddOn"))
                    {
                        CargarFormularioConfigAddOn();
                    }
                    if (pVal.MenuUID.Equals("1284")) // Cuando se hace clic derecho y Cancelar
                    {
                        try
                        {
                            if (!String.IsNullOrEmpty(ultimoForm.ToString()))
                            {
                                SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm(ultimoForm, 0);
                                oForm.Items.Item("2").Click(); // Cierro el actual
                                ultimoForm = "";// Vacío la variable ultimoForm
                                cierroUltimoForm = false; // Lo pongo en false para que no se cierre cuando voy a confirmar el documento
                                esDocCancelado = true; // Indico que es un documento cancelado

                                GuardoFactura = false;
                                codigoFactura = ""; impresoraNombre = "";
                                if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                                { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                                codigoDocEntry = ""; tieneAutorizaciones = false;
                                formFactura = false;
                                NroDocumento = "";
                            }
                        }
                        catch (Exception ex)
                        { }
                    }
                }
                //SBO_Application.Menus.Item("5890").Enabled = false; // Menu de Parametrizacion de Formularios
            }
            catch
            {
                BubbleEvent = false;
            }
            BubbleEvent = true;
        }

        //Items Events (Every item click is detected here)
        private void SBO_Application_ItemEvent(String FormUID, ref SAPbouiCOM.ItemEvent pVal, out bool BubbleEvent)
        {
            try
            {
                if (!pVal.BeforeAction)
                {
                    try
                    {
                        // Entra aca cuando se da enter en la pantalla de Bloqueo
                        if (pVal.FormTypeEx.Equals("821") && pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK)
                        {
                            //init();
                            //if (guardaLog == true)
                            //    guardaLogProceso(pVal.FormTypeEx.ToString(), "", "Inicializa AddOn", ""); // Guarda log del Proceso
                        }
                    }
                    catch (Exception ex)
                    { }

                    try
                    {
                        if (pVal.FormTypeEx.Equals("140") && pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK)
                        {
                            // Aca va el codigo
                        }
                    }
                    catch (Exception ex)
                    { }

                    try
                    {
                        // Entra aca cuando se da enter en la pantalla de Mensajes / Alertas
                        if (pVal.FormTypeEx.Equals("198") && pVal.ItemUID.Equals("6") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK)
                        {
                            tieneAutorizaciones = false;
                            // Cierra el formulario del documento actual
                            if (ultimoForm.Equals("133") || ultimoForm.Equals("60090") || ultimoForm.Equals("60091") || ultimoForm.Equals("65303") || ultimoForm.Equals("179") || ultimoForm.Equals("65307") || ((ultimoForm.Equals("140") || ultimoForm.Equals("182") || ultimoForm.Equals("180") || ultimoForm.Equals("720") || ultimoForm.Equals("143")) && realizarRemitos == true))
                            {
                                if (cierroUltimoForm == true)
                                {
                                    SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm(ultimoForm, pVal.FormTypeCount);
                                    oForm.Items.Item("2").Click(); // Cierro el actual
                                    ultimoForm = ""; // Vacío la variable ultimoForm
                                    cierroUltimoForm = false; // Lo pongo en false para que no se cierre cuando voy a confirmar el documento
                                }
                            }
                            GuardoFactura = false;
                            codigoFactura = ""; impresoraNombre = "";
                            if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                            { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                            codigoDocEntry = "";
                            formFactura = false;
                            NroDocumento = "";
                        }
                    }
                    catch (Exception ex)
                    {
                        //if (guardaLog == true)
                        //    guardaLogProceso(pVal.FormTypeEx.ToString(), codigoFactura, "ERROR al querer Cerrar el Form", ex.Message.ToString());
                    }

                    try
                    {
                        // Entra aca cuando se crea un documento y tiene activado las autorizaciones al facturar 
                        if ((pVal.FormTypeEx.Equals("50106") || pVal.FormTypeEx.Equals("50108")) && pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK)
                        {
                            cierroUltimoForm = true;
                            tieneAutorizaciones = true;
                            // Limpia los datos para que los vuelva a Cargar
                            GuardoFactura = false;
                            codigoFactura = ""; impresoraNombre = "";
                            if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                            { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                            codigoDocEntry = "";
                            formFactura = false;
                            NroDocumento = "";
                        }
                    }
                    catch (Exception ex)
                    { }

                    try
                    {
                        if (pVal.FormTypeEx.Equals("133") || pVal.FormTypeEx.Equals("60090") || pVal.FormTypeEx.Equals("60091") || pVal.FormTypeEx.Equals("65303") || pVal.FormTypeEx.Equals("179") || pVal.FormTypeEx.Equals("65307") || ((pVal.FormTypeEx.Equals("140") || pVal.FormTypeEx.Equals("182") || pVal.FormTypeEx.Equals("180") || pVal.FormTypeEx.Equals("143") || pVal.FormTypeEx.Equals("720")) && realizarRemitos == true))
                        {
                            if (ultimoForm.Equals("") || ultimoForm.Equals("133") || ultimoForm.Equals("60090") || ultimoForm.Equals("60091") || ultimoForm.Equals("65303") || ultimoForm.Equals("179") || pVal.FormTypeEx.Equals("65307") || ((pVal.FormTypeEx.Equals("140") || pVal.FormTypeEx.Equals("182") || pVal.FormTypeEx.Equals("180") || pVal.FormTypeEx.Equals("143") || pVal.FormTypeEx.Equals("720")) && realizarRemitos == true))
                            {
                                if (!pVal.FormTypeEx.Equals(ultimoForm))
                                {
                                    ultimoForm = pVal.FormTypeEx.ToString(); // Me guardo el ultimo Formulario para la proxima vez que entre 
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    { }

                    if (enviaAuto) // Si esta en True envia todo Automaticamente
                    {
                        // NUEVO BLOQUE DE CODIGO. 16/04/2018
                        if ((pVal.FormTypeEx.Equals("133") || pVal.FormTypeEx.Equals("60090") || pVal.FormTypeEx.Equals("60091") || pVal.FormTypeEx.Equals("65303") || pVal.FormTypeEx.Equals("179") || pVal.FormTypeEx.Equals("940") || pVal.FormTypeEx.Equals("65304") || pVal.FormTypeEx.Equals("65307") || ((pVal.FormTypeEx.Equals("140") || pVal.FormTypeEx.Equals("182") || pVal.FormTypeEx.Equals("143") || pVal.FormTypeEx.Equals("180") || pVal.FormTypeEx.Equals("720")) && realizarRemitos == true) || (pVal.FormTypeEx.Equals("426") && realizarResguardos == true) || ((pVal.FormTypeEx.Equals("141") || pVal.FormTypeEx.Equals("181")) && realizarBoletaEntrada == true) || pVal.FormTypeEx.Equals("170")) && pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_ITEM_PRESSED && pVal.ActionSuccess == true)/*&& pVal.Before_Action == false*/
                        {
                            try
                            {
                                //if (tieneAutorizaciones == false)
                                //{
                                SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm(pVal.FormTypeEx.ToString(), pVal.FormTypeCount);
                                SAPbouiCOM.Button botonSeleccionado = (SAPbouiCOM.Button)oForm.Items.Item("1").Specific;
                                if (botonSeleccionado.Caption.ToString().Equals("Crear") /*|| botonSeleccionado.Caption.ToString().Equals("OK")*/) // Solo deja avanzar cuando le da en Crear
                                {
                                    codigoFactura = "";

                                    if (verificarActualizarExisteFactura(pVal.FormTypeEx) == true)  // Ejecuto la función para saber si la factura fue almacenada, paso el número de documento y el id del formulario
                                        cfeEnviar(pVal.FormTypeEx.ToString());
                                }
                                //}
                            }
                            catch (Exception ex)
                            { }
                        }

                        //////// Si no tiene codigoFactura entonces es porque ya la guardo, por lo tanto paso la variable almacenoFactura a False y generoPDF a False
                        //////if (codigoFactura.Equals(""))
                        //////{
                        //////    almacenoFactura = false; generoPDF = false; pdfAbierto = false; creoFactura = false;
                        //////}

                        //////bool esFacturaNueva = true;
                        //////// Si no ha sido almacenada, y Si ya tiene el número de factura y si es Factura de Clientes o Nota de Credito de Clientes Facturas de Clientes + Pago o Nota de Debito de Clientes o Tiene la variable en True de Remitos
                        //////if (!almacenoFactura && !codigoFactura.Equals("") && (pVal.FormTypeEx.Equals("133") || pVal.FormTypeEx.Equals("60090") || pVal.FormTypeEx.Equals("60091") || pVal.FormTypeEx.Equals("65303") || pVal.FormTypeEx.Equals("179") || pVal.FormTypeEx.Equals("940") || pVal.FormTypeEx.Equals("65304") || pVal.FormTypeEx.Equals("65307") || ((pVal.FormTypeEx.Equals("140") || pVal.FormTypeEx.Equals("182") || pVal.FormTypeEx.Equals("143") || pVal.FormTypeEx.Equals("180") || pVal.FormTypeEx.Equals("720")) && realizarRemitos == true) || ((pVal.FormTypeEx.Equals("141") || pVal.FormTypeEx.Equals("181")) && realizarBoletaEntrada == true))) //  
                        //////    almacenoFactura = verificarExisteFactura(codigoFactura, pVal.FormTypeEx); // Ejecuto la función para saber si la factura fue almacenada, paso el número de documento y el id del formulario

                        //////// Entra aca cuando se presiona el botón Crear en algunos de los formularios
                        //////if (pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK) // Se agrega que el codigoFactura no sea nulo ni vacío
                        //////{
                        //////    try
                        //////    {
                        //////        if (pVal.FormTypeEx.Equals("133") || pVal.FormTypeEx.Equals("60090") || pVal.FormTypeEx.Equals("60091") || pVal.FormTypeEx.Equals("65303") || pVal.FormTypeEx.Equals("179") || pVal.FormTypeEx.Equals("940") || pVal.FormTypeEx.Equals("65304") || pVal.FormTypeEx.Equals("65307") || ((pVal.FormTypeEx.Equals("140") || pVal.FormTypeEx.Equals("182") || pVal.FormTypeEx.Equals("143") || pVal.FormTypeEx.Equals("180") || pVal.FormTypeEx.Equals("720")) && realizarRemitos == true) || ((pVal.FormTypeEx.Equals("141") || pVal.FormTypeEx.Equals("181")) && realizarBoletaEntrada == true))
                        //////        {
                        //////            // Nuevo Bloque de Código para saber si es una Actualizacion de un documento.
                        //////            SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm(pVal.FormTypeEx.ToString(), pVal.FormTypeCount);
                        //////            SAPbouiCOM.Button botonSeleccionado = (SAPbouiCOM.Button)oForm.Items.Item("1").Specific;
                        //////            if (!botonSeleccionado.Caption.ToString().Equals("Crear") && !botonSeleccionado.Caption.ToString().Equals("OK")) // Solo deja avanzar cuando le da en Crear
                        //////                esFacturaNueva = false;
                        //////        }
                        //////    }
                        //////    catch (Exception ex)
                        //////    { }

                        //////    bool retBubble = false;
                        //////    if (esFacturaNueva == true)
                        //////    {
                        //////        if (esDocCancelado == false) // Si no es un documento de Cancelacion
                        //////        {
                        //////            // Agrego las condiciones con un Case
                        //////            string caseSwitch = pVal.FormTypeEx.ToString(); // Guardo el número del formulario y Ejecuto la funcion correspondiente
                        //////            switch (caseSwitch)
                        //////            {
                        //////                case "133": //Facturas de Clientes
                        //////                    retBubble = crearFormFacturaClientes(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "60090": //Facturas de Clientes + Pago
                        //////                    retBubble = crearFormFacturaClientesMasPago(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "60091": //Facturas de Reserva de Clientes 
                        //////                    retBubble = crearFormFacturaReservaClientes(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "65304": //Boleta
                        //////                    retBubble = crearFormBoleta(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "65307": //Factura Exportación
                        //////                    retBubble = crearFormFacturaExportacion(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "65303": //Nota de Debito de Clientes
                        //////                    retBubble = crearFormNotaDebitoClientes(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "179": //Nota de Crédito de Clientes
                        //////                    retBubble = crearFormNotaCreditoClientes(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "140": //Remitos
                        //////                    if (realizarRemitos == true)
                        //////                        retBubble = crearFormRemitos(caseSwitch.ToString(), pVal.FormTypeCount); // Sino hace los remitos comun if (!descEmpresa.ToString().Equals("DREG")) // Si no es Dreghal
                        //////                    break;
                        //////                case "143": //Remitos - Cancelacion
                        //////                    if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") /*|| descEmpresa.ToString().Equals("MEDIT")*/)) // || descEmpresa.ToString().Equals("PROND")
                        //////                        retBubble = crearFormRemitosCancelacion(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "940": //Transferencia de Stock
                        //////                    if (realizarRemitos == true)
                        //////                    {
                        //////                        if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE"))
                        //////                            retBubble = crearFormTransferenciaStock(caseSwitch.ToString(), pVal.FormTypeCount); // Si es Dreghal entra por Transferencia de Stock
                        //////                    }
                        //////                    break;
                        //////                case "426": //Pagos Efectuados. e-Resguardos de IVA
                        //////                    if (realizarResguardos == true)
                        //////                    {
                        //////                        //if (descEmpresa.ToString().Equals("DREG"))
                        //////                        retBubble = crearFormPagosEfectuados(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    }
                        //////                    break;
                        //////                case "182": //Devoluciones (Compras)
                        //////                    if (realizarRemitos == true)
                        //////                    {
                        //////                        if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT"))
                        //////                            retBubble = crearFormRemitos(caseSwitch.ToString(), pVal.FormTypeCount); // Si es Almena hace los Remitos del formulario Devoluciones
                        //////                    }
                        //////                    break;
                        //////                case "180": //Devoluciones (Ventas)
                        //////                    if (realizarRemitos == true)
                        //////                    {
                        //////                        if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("PROND"))
                        //////                            retBubble = crearFormRemitosCancelacion(caseSwitch.ToString(), pVal.FormTypeCount); // Si es Almena hace los Remitos del formulario Devoluciones
                        //////                    }
                        //////                    break;
                        //////                case "720": //Salida Mercancias
                        //////                    retBubble = crearFormRemitosSalidaMercancias(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "141": // Boletas de Entrada
                        //////                    if (realizarBoletaEntrada == true)
                        //////                        retBubble = crearFormBoletaEntrada(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                case "181": // Boletas de Entrada
                        //////                    if (realizarBoletaEntrada == true)
                        //////                        retBubble = crearFormBoletaEntrada(caseSwitch.ToString(), pVal.FormTypeCount);
                        //////                    break;
                        //////                default:
                        //////                    break;
                        //////            }
                        //////        }
                        //////    }
                        //////    else
                        //////    {
                        //////        retBubble = true; // Si es documento de Cancelacion, paso la validacion a true para que siga el proceso
                        //////        esDocCancelado = false; // Lo paso a false para que no quede para el proximo documento en true
                        //////    }

                        //////    BubbleEvent = retBubble;

                        //////    ////try
                        //////    ////{
                        //////    ////    if (retBubble == true)
                        //////    ////    {
                        //////    ////        if (!String.IsNullOrEmpty(codigoFactura))
                        //////    ////        {
                        //////    ////            if (pVal.FormTypeEx.Equals("133") || pVal.FormTypeEx.Equals("60090") || pVal.FormTypeEx.Equals("60091") || pVal.FormTypeEx.Equals("65303") || pVal.FormTypeEx.Equals("179") || (pVal.FormTypeEx.Equals("140") && realizarRemitos == true))
                        //////    ////            {
                        //////    ////                // Verificacion del numero 
                        //////    ////                int codigoFactVerifica = obtenerCodigoDocumento("1", pVal.FormTypeEx.ToString()); // Obtengo el documento que se ingreso ultimo
                        //////    ////                int codigoConvertido = Convert.ToInt32(codigoFactura);
                        //////    ////                if (codigoConvertido < codigoFactVerifica) // Si el codigo de Factura que obtuvo es mayor al que tengo
                        //////    ////                {
                        //////    ////                    if (!codigoFactVerifica.Equals(0)) // Si entra aca es porque se ah guardado el documento
                        //////    ////                    {
                        //////    ////                        codigoFactura = codigoFactVerifica.ToString();
                        //////    ////                        almacenoFactura = false; generoPDF = false; pdfAbierto = false; creoFactura = false;
                        //////    ////                    }
                        //////    ////                }
                        //////    ////            }
                        //////    ////        }
                        //////    ////    }
                        //////    ////}
                        //////    ////catch (Exception ex)
                        //////    ////{ }
                        //////}
                        //////else // Si no es el evento Clic del botón Crear
                        //////{
                        //////    if (!almacenoFactura)
                        //////    {
                        //////        // Si no ha sido almacenada, y Si ya tiene el número de factura y si es Factura de Clientes o Nota de Credito de Clientes Facturas de Clientes + Pago o Nota de Debito de Clientes o Tiene la variable en True de Remitos
                        //////        if (!codigoFactura.Equals("") && (pVal.FormTypeEx.Equals("133") || pVal.FormTypeEx.Equals("60090") || pVal.FormTypeEx.Equals("60091") || pVal.FormTypeEx.Equals("65303") || pVal.FormTypeEx.Equals("179") || pVal.FormTypeEx.Equals("65307") || ((pVal.FormTypeEx.Equals("140") || pVal.FormTypeEx.Equals("180") || pVal.FormTypeEx.Equals("143") || pVal.FormTypeEx.Equals("720")) && realizarRemitos == true) || (pVal.FormTypeEx.Equals("426") && realizarResguardos == true) || ((pVal.FormTypeEx.Equals("141")|| pVal.FormTypeEx.Equals("181")) && realizarBoletaEntrada == true))) //  
                        //////            almacenoFactura = verificarExisteFactura(codigoFactura, pVal.FormTypeEx); // Ejecuto la función para saber si la factura fue almacenada, paso el número de documento y el id del formulario
                        //////    }

                        //////    if (GuardoFactura && formFactura && almacenoFactura && !creoFactura) // Solo entra si la factura ya fue almacenada 
                        //////    {
                        //////        bool resultado = false;
                        //////        // Agrego las condiciones con un Case

                        //////        string caseSwitch = pVal.FormTypeEx.ToString(); // Guardo el número del formulario y Ejecuto la funcion correspondiente
                        //////        switch (caseSwitch)
                        //////        {
                        //////            case "133": //Facturas de Clientes
                        //////                resultado = formFacturaClientes(caseSwitch.ToString());
                        //////                break;
                        //////            case "60090": //Facturas de Clientes + Pago
                        //////                resultado = formFacturaClientesMasPago(caseSwitch.ToString());
                        //////                break;
                        //////            case "60091": //Facturas de Reserva de Clientes
                        //////                resultado = formFacturaReservaClientes(caseSwitch.ToString());
                        //////                break;
                        //////            case "65304": //Boleta
                        //////                resultado = formBoleta(caseSwitch.ToString());
                        //////                break;
                        //////            case "65307": //Factura Exportación
                        //////                resultado = formFacturaExportacion(caseSwitch.ToString());
                        //////                break;
                        //////            case "65303": //Nota de Debito de Clientes
                        //////                resultado = formNotaDebitoClientes(caseSwitch.ToString());
                        //////                break;
                        //////            case "179": //Nota de Crédito de Clientes
                        //////                resultado = formNotaCreditoClientes(caseSwitch.ToString());
                        //////                break;
                        //////            case "140": //Remitos
                        //////                if (realizarRemitos == true)
                        //////                    resultado = formRemitos(caseSwitch.ToString());
                        //////                break;
                        //////            case "143": //Remitos
                        //////                if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") /*|| descEmpresa.ToString().Equals("MEDIT")*/)) // || descEmpresa.ToString().Equals("PROND")
                        //////                    resultado = formRemitosCancelacion(caseSwitch.ToString());
                        //////                break;
                        //////            case "940": //Transferencia de Stock
                        //////                if (realizarRemitos == true)
                        //////                    if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE"))
                        //////                        resultado = formTransferenciaStock(caseSwitch.ToString());
                        //////                break;
                        //////            case "426": //Pagos Efectuados
                        //////                if (realizarResguardos == true)
                        //////                {
                        //////                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN"))
                        //////                        resultado = formPagosEfectuados(caseSwitch.ToString(), false);
                        //////                }
                        //////                break;
                        //////            case "182": //Devoluciones (Compras)
                        //////                if (realizarResguardos == true)
                        //////                    resultado = formRemitosCompras(caseSwitch.ToString());
                        //////                break;
                        //////            case "180": //Devoluciones (Ventas)
                        //////                if (realizarResguardos == true)
                        //////                    resultado = formRemitosCompras(caseSwitch.ToString());
                        //////                break;
                        //////            case "720": // Salida de Mercancias
                        //////                if (realizarResguardos == true)
                        //////                    resultado = formRemitosSalidaMercancias(caseSwitch.ToString());
                        //////                break;
                        //////            case "141": // Boletas de Entrada
                        //////                if (realizarBoletaEntrada == true)
                        //////                    resultado = formBoletaEntrada(caseSwitch.ToString(), false);
                        //////                break;
                        //////            case "181": // Boletas de Entrada
                        //////                if (realizarBoletaEntrada == true)
                        //////                    resultado = formBoletaEntrada(caseSwitch.ToString(), true);
                        //////                break;
                        //////            default:
                        //////                break;
                        //////        }

                        //////        if (resultado) // Si el resultado es True entonces limpio las variables
                        //////        {
                        //////            esDocCancelado = false;
                        //////            GuardoFactura = false;
                        //////            codigoFactura = ""; impresoraNombre = ""; nombreImpresoraUsuario = ""; templateImpresoraUsuario = "";
                        //////            codigoDocEntry = "";
                        //////            formFactura = false;
                        //////            NroDocumento = "";
                        //////        }
                        //////    }
                        //////}
                    }

                    //////if (pVal.FormTypeEx.Equals("0") && !pVal.BeforeAction && pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK)
                    //////{
                    //////    if (formFactura)
                    //////    {
                    //////        GuardoFactura = true;
                    //////    }
                    //////}

                    #region "ConfiguracionAddOn"
                    // Busca el documento que se digito y lo muestra en la grilla de ImprimirDocumento
                    if (pVal.ItemUID.Equals("1") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("ConfiguracionAddOn"))
                    {
                        try
                        {
                            ObjetoConfiguracion objConfig = new ObjetoConfiguracion();
                            SAPbouiCOM.EditText oStatic;
                            oStatic = oFormConfigAddOn.Items.Item("txtUsuario").Specific;
                            objConfig.Usuario = oStatic.Value;
                            oStatic = oFormConfigAddOn.Items.Item("txtClave").Specific;
                            objConfig.Clave = oStatic.Value;
                            oStatic = oFormConfigAddOn.Items.Item("txtTenant").Specific;
                            objConfig.Tenant = oStatic.Value;
                            oStatic = oFormConfigAddOn.Items.Item("txtRut").Specific;
                            objConfig.Rut = oStatic.Value;
                            oStatic = oFormConfigAddOn.Items.Item("txtWebServ").Specific;
                            objConfig.RutaWS = oStatic.Value;
                            oStatic = oFormConfigAddOn.Items.Item("txtRutaPDF").Specific;
                            objConfig.RutaPDF = oStatic.Value;
                            oStatic = oFormConfigAddOn.Items.Item("txtRutaQR").Specific;
                            objConfig.RutaQR = oStatic.Value;

                            SAPbouiCOM.ComboBox oCombo;
                            oCombo = oFormConfigAddOn.Items.Item("cmbEmpresa").Specific;
                            objConfig.Empresa = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbLog").Specific;
                            objConfig.GuardaLog = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbQR").Specific;
                            objConfig.GuardaQR = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbCFE").Specific;
                            objConfig.GuardaDatosCFE = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbPDF").Specific;
                            objConfig.Imprime = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbEnvioA").Specific;
                            objConfig.EnviaAutomatico = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbCopiasC").Specific;
                            objConfig.ImprimeDosCopiasCred = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbRemitos").Specific;
                            objConfig.RealizaRemitos = oCombo.Selected.Value.ToString();
                            oCombo = oFormConfigAddOn.Items.Item("cmbResguar").Specific;
                            objConfig.RealizaResguardos = oCombo.Selected.Value.ToString();

                            oStatic = oFormConfigAddOn.Items.Item("txtFechaIn").Specific;
                            if (String.IsNullOrEmpty(oStatic.String))
                                oStatic.Value = "19800101";

                            objConfig.FechaInicio = Convert.ToDateTime(oStatic.String);

                            SAPbobsCOM.Recordset oRSMyTable = null;
                            string query = "delete from [@ADDCFESICFE]";

                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "delete from \"@ADDCFESICFE\"";

                            oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                            oRSMyTable.DoQuery(query);

                            query = "INSERT INTO [@ADDCFESICFE] (Code, Name, U_USUARIO, U_CLAVE, U_TENANT, U_RUCEMISOR, U_RUTAPDF, U_RUTAWS, U_IMPRIME, U_GUARDAQR, U_REMITOCFE, U_IMPRIMECOPIACRE, U_GUARDALOGPROCESO, U_ENVIAAUTO, U_RUTAQR, U_DESC_EMPRESA, U_RESGUARDOCFE, U_GUARDADATOSCFE, U_FECHA_INICIO) VALUES ('" +
                                        1 + "','Config AddOn','" + objConfig.Usuario + "','" + objConfig.Clave + "','" + objConfig.Tenant + "','" + objConfig.Rut + "','" + objConfig.RutaPDF + "','" + objConfig.RutaWS + "','" + objConfig.Imprime + "','" + objConfig.GuardaQR + "','" + objConfig.RealizaRemitos + "','" + objConfig.ImprimeDosCopiasCred + "','" + objConfig.GuardaLog + "','" +
                                            objConfig.EnviaAutomatico + "','" + objConfig.RutaQR + "','" + objConfig.Empresa + "','" + objConfig.RealizaResguardos + "','" + objConfig.GuardaDatosCFE + "','" + objConfig.FechaInicio.ToString(formatoFecha) + "')";

                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            {
                                query = "INSERT INTO \"@ADDCFESICFE\" (\"Code\", \"Name\", \"U_USUARIO\", \"U_CLAVE\", \"U_TENANT\", \"U_RUCEMISOR\", \"U_RUTAPDF\", \"U_RUTAWS\", \"U_IMPRIME\", \"U_GUARDAQR\", \"U_REMITOCFE\", \"U_IMPRIMECOPIACRE\", \"U_GUARDALOGPROCESO\", \"U_ENVIAAUTO\", \"U_RUTAQR\", \"U_DESC_EMPRESA\", \"U_RESGUARDOCFE\", \"U_GUARDADATOSCFE\", \"U_FECHA_INICIO\") VALUES (\'" +
                                        1 + "\',\'Config AddOn\',\'" + objConfig.Usuario + "\',\'" + objConfig.Clave + "\',\'" + objConfig.Tenant + "\',\'" + objConfig.Rut + "\',\'" + objConfig.RutaPDF + "\',\'" + objConfig.RutaWS + "\',\'" + objConfig.Imprime + "\',\'" + objConfig.GuardaQR + "\',\'" + objConfig.RealizaRemitos + "\',\'" + objConfig.ImprimeDosCopiasCred + "\',\'" + objConfig.GuardaLog + "\',\'" +
                                            objConfig.EnviaAutomatico + "\',\'" + objConfig.RutaQR + "\',\'" + objConfig.Empresa + "\',\'" + objConfig.RealizaResguardos + "\',\'" + objConfig.GuardaDatosCFE + "\',\'" + objConfig.FechaInicio.ToString(formatoFecha) + "\')";
                            }

                            oRSMyTable.DoQuery(query);

                            System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                            oRSMyTable = null;

                            SBO_Application.MessageBox("Se actualizó correctamente la Configuración del addOn");

                            obtenerDatosConexion(false, false);
                        }
                        catch (Exception ex)
                        { }
                    }
                    #endregion

                    #region "BuscarGrilla"
                    // Busca el documento que se digito y lo muestra en la grilla de ImprimirDocumento
                    if (pVal.ItemUID.Equals("8") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("ImprimirDocumento"))
                    {
                        try
                        {
                            CargarGrilla(); // Ejecuto la funcion que carga la grilla
                        }
                        catch (Exception ex)
                        { }
                    }

                    // Busca los documentos segun los filtros y lo muestra en la grilla de EnviarDocumento
                    if (pVal.ItemUID.Equals("8") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("EnviarDocumento"))
                    {
                        try
                        {
                            //cambiaEstadoDocumentoPorErrorANulo("121031", "133", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("119101", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("119344", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("119348", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("119382", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("119397", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("119804", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("121195", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("121534", "179", "", "NULL");
                            ////cambiaEstadoDocumentoPorErrorANulo("121535", "179", "", "NULL");
                            //cambiaEstadoDocumentoPorErrorANulo("37754", "133", "","NULL");
                            //cambiaEstadoDocumentoPorErrorANulo("36825", "133", "", "NULL");
                            CargarGrillaEnvDoc(); // Ejecuto la funcion que carga la grilla
                        }
                        catch (Exception ex)
                        { }
                    }

                    // Borra el log de los documentos
                    if (pVal.ItemUID.Equals("100") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("EnviarDocumento"))
                    {
                        try
                        {
                            borrarLog(); // Ejecuto la funcion que elimina el Log
                        }
                        catch (Exception ex)
                        { }
                    }
                    #endregion

                    #region "ImprimeDocPanel"
                    // Imprime el documento seleccionado de la grilla de ImprimirDocumento
                    if (pVal.ItemUID.Equals("7") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("ImprimirDocumento"))
                    {
                        try
                        {
                            SAPbouiCOM.Matrix oStatic;
                            SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm("ImprimirDocumento", 0);
                            oStatic = oForm.Items.Item("2").Specific;
                            int row = oStatic.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_SelectionOrder);
                            if (row == -1)
                            {
                                SBO_Application.MessageBox("Debe seleccionar una fila");
                            }
                            else
                            {
                                SAPbouiCOM.EditText ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                String serie = ed.Value.ToString();
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_4", row);
                                int nro = Int32.Parse(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_3", row);
                                int tipoImp = Int32.Parse(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_2", row);
                                String nroDoc = ed.Value.ToString(); // Obtengo el numero del documento
                                String nroForm = "";
                                IdCFE id = new IdCFE();
                                id.Numero = nro;
                                id.observado = 1;
                                id.rucemisor = rucEmisorSicfe.ToString(); // "110050930013";
                                id.Serie = serie;
                                id.Tipo = tipoImp;

                                SICFERespuestaBuffer pdf = ObtenerPDF(id);

                                string tipoDocumento = "Factura";
                                switch (tipoImp)
                                {
                                    case 101:
                                        tipoDocumento = "Factura"; nroForm = "60091";
                                        break;
                                    case 102:
                                        tipoDocumento = "Nota_Credito"; nroForm = "179";
                                        break;
                                    case 103:
                                        tipoDocumento = "Nota_Debito"; nroForm = "65303";
                                        break;
                                    case 181:
                                        tipoDocumento = "Remito"; nroForm = "140";
                                        break;
                                    /*case 181:
                                        tipoDocumento = "Remito_Cancelacion"; nroForm = "143";
                                        break;*/
                                    case 182:
                                        tipoDocumento = "Resguardo"; nroForm = "426";
                                        break;
                                    case 121:
                                        tipoDocumento = "Factura_Exportacion"; nroForm = "65307";
                                        break;
                                    default:
                                        tipoDocumento = "Factura";
                                        break;
                                }

                                try
                                {
                                    string nombrePDF = obtenerNombreTipoCFE(id.Tipo.ToString().Trim()) + " " + id.Serie.ToString().Trim() + "-" + id.Numero.ToString().Trim() + ".pdf";
                                    nombrePDF = nombrePDF.ToString().Replace(" ", "_");
                                    string filename = rutaDefecto.ToString() + nombrePDF.ToString();

                                    //string filename = rutaDefecto.ToString() + tipoDocumento.ToString() + "_" + nroDoc + ".pdf";
                                    if (File.Exists(filename.ToString()))
                                        System.Diagnostics.Process.Start(filename.ToString()); // Si ya existe lo abre simplemente
                                    else
                                    {
                                        if (!File.Exists(filename))
                                            filename = filename.ToString().Replace("\\\\", "\\"); // Le quito las Retrobarras que estén de mas

                                        if (File.Exists(filename.ToString()))
                                            System.Diagnostics.Process.Start(filename.ToString()); // Si ya existe lo abre simplemente
                                        else
                                        {
                                            // Sino lo crea
                                            FileStream fs = new FileStream(filename, FileMode.Create, FileAccess.Write);
                                            fs.Write(pdf.Buffer, 0, pdf.Buffer.Length);
                                            fs.Close();
                                            System.Diagnostics.Process.Start(filename.ToString()); //"C:\\Archivos\\Factura-" + codigoFactura + ".pdf"
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    if (guardaLog == true)
                                        guardaLogProceso(pVal.FormTypeEx.ToString(), "", "ERROR al querer Reimprimir PDF desde el Panel", ex.Message.ToString()); // Guarda log del Proceso
                                }

                                generoPDF = true;

                                ////if (nroForm.ToString().Equals("179"))
                                ////    CambiarEstadoNotaCredito(nroForm);
                                ////else
                                ////    CambiarEstadoFactura(nroForm);

                                generoPDF = false;
                            }
                        }
                        catch (Exception ex)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pVal.FormTypeEx.ToString(), "", "ERROR al querer Reimprimir PDF desde el Panel", ex.Message.ToString()); // Guarda log del Proceso
                        }
                        //oStatic.GetLineData(row);
                    }
                    #endregion

                    #region "EnviarDocumento"
                    // Envia el documento seleccionado de la grilla de "EnviarDocumento"
                    if (pVal.ItemUID.Equals("7") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("EnviarDocumento"))
                    {
                        try
                        {
                            esDocCancelado = false;
                            SAPbouiCOM.Matrix oStatic;
                            SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm("EnviarDocumento", 0);
                            oStatic = oForm.Items.Item("2").Specific;
                            SAPbouiCOM.Button oStaticText = oForm.Items.Item("7").Specific;

                            int row = oStatic.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder);

                            if (row == -1)
                                SBO_Application.MessageBox("Debe seleccionar una fila");
                            else
                            {
                                oStaticText.Item.Enabled = false;
                                while (row != -1)
                                {
                                    SAPbouiCOM.EditText ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                    DocumentoNOElectronico docNo = new DocumentoNOElectronico();
                                    docNo.DocEntry = Convert.ToInt32(ed.Value.ToString());
                                    ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_4", row);

                                    try
                                    {
                                        docNo.Monto = Convert.ToDouble(ed.Value.ToString());
                                    }
                                    catch (Exception ex)
                                    {
                                        docNo.Monto = 0;
                                    }

                                    ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_3", row);
                                    docNo.Tipo = ed.Value.ToString();
                                    ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_2", row);
                                    docNo.DocNum = Convert.ToInt32(ed.Value.ToString());
                                    ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_0", row);
                                    docNo.Cliente = ed.Value.ToString();
                                    ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_1", row);
                                    docNo.Fecha = ed.Value.ToString();

                                    codigoFactura = docNo.DocNum.ToString(); // Guardo el codigoFactura que es el valor que necesito para ejecutar las funciones

                                    bool resultado = false;
                                    // Agrego las condiciones con un Case
                                    string caseSwitch = docNo.Tipo.ToString(); // Guardo el tipo de Documento y Ejecuto la funcion correspondiente
                                    switch (caseSwitch)
                                    {
                                        case "Factura": //Facturas de Clientes
                                            if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "133") == true)
                                                resultado = formFacturaReservaClientes("133");
                                            break;
                                        case "Factura Exportacion": //Factura Exportacion
                                            if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "65307") == true)
                                                resultado = formFacturaExportacion("65307");
                                            break;
                                        case "Nota Credito": //Nota de Crédito de Clientes
                                            if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "179") == true)
                                                resultado = formNotaCreditoClientes("179");
                                            break;
                                        case "Nota Debito": //Nota de Debito de Clientes
                                            if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "65303") == true)
                                                resultado = formNotaDebitoClientes("65303");
                                            break;
                                        case "Remito": //Remitos
                                            //if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA")) // Si es Dreghal
                                            //    resultado = formTransferenciaStock("940");
                                            //else 
                                            if (descEmpresa.ToString().Equals("ALMEN")) // Si es Almena 
                                                resultado = formRemitosCompras("182");
                                            else
                                                resultado = formRemitos("140");
                                            break;
                                        case "Trsf Stock": // Transferencia de Stock
                                            resultado = formTransferenciaStock("940");
                                            break;
                                        case "Remito Entrada":
                                            if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") /*|| descEmpresa.ToString().Equals("MEDIT")*/)) // || descEmpresa.ToString().Equals("PROND")
                                                resultado = formRemitosCancelacion("143");
                                            break;
                                        case "Resguardo": //Resguardo

                                            ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                            string codigoCuentaDGI = ed.Value.ToString().Trim();
                                            resultado = formResguardoPorCompraProveedor("141", false, codigoCuentaDGI);
                                            break;

                                        case "Resguardo Pago": //Resguardo
                                            resultado = formPagosEfectuados("426", false);
                                            break;
                                        case "Cancelacion eResg": //Resguardo
                                            if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("ENGRW") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/)
                                                resultado = formPagosEfectuados("426", true);
                                            else
                                            {
                                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                                string codigoCuentaDGII = ed.Value.ToString().Trim();
                                                resultado = formResguardoPorCompraProveedor("181", true, codigoCuentaDGII);
                                            }
                                            break;
                                        case "Devolucion": //Devolucion
                                            resultado = formRemitosCancelacion("180");
                                            break;
                                        case "Salida Mercancias": // Salida de Mercancias
                                            resultado = formRemitosSalidaMercancias("720");
                                            break;
                                        case "Boleta Entrada": // Boleta Entrada
                                            resultado = formBoletaEntrada("141", false);
                                            break;
                                        case "Cancelacion Boleta": // Boleta Entrada
                                            resultado = formBoletaEntrada("181", true);
                                            break;
                                        case "Recibo":
                                            resultado = formPagosRecibidos("170");
                                            break;
                                        default:
                                            break;
                                    }

                                    if (resultado) // Si el resultado es True entonces limpio las variables
                                    {
                                        ////if (guardaLog == true)
                                        ////    guardaLogProceso(codigoFactura, codigoFactura, "Documento enviado Manualmente por " + usuarioLogueado.ToString(), "Sucursal: " + idSucursalUsuario); // Guarda log del Proceso

                                        GuardoFactura = false; tieneAutorizaciones = false;
                                        codigoFactura = ""; impresoraNombre = "";
                                        if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                                        { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                                        codigoDocEntry = "";
                                        formFactura = false;
                                        NroDocumento = "";
                                    }

                                    row = oStatic.GetNextSelectedRow(row, SAPbouiCOM.BoOrderType.ot_RowOrder);
                                }
                                oStaticText.Item.Enabled = true;
                            }

                            CargarGrillaEnvDoc(); // Recargo la grilla
                        }
                        catch (Exception ex)
                        {
                            guardaLogProceso(pVal.FormTypeEx.ToString(), codigoFactura, "ERROR al querer Enviar Documento a Fact Electronica", ex.Message.ToString()); // Guarda log del Proceso
                        }
                        //oStatic.GetLineData(row);
                    }

                    // Cuando presiona clic en "Enviar Todos"
                    if (pVal.ItemUID.Equals("15") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("EnviarDocumento"))
                    {
                        try
                        {
                            esDocCancelado = false;
                            SAPbouiCOM.Matrix oStatic;
                            SAPbouiCOM.Button oStaticText;
                            SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm("EnviarDocumento", 0);
                            oStatic = oForm.Items.Item("2").Specific;
                            oStaticText = oForm.Items.Item("15").Specific;

                            int cantRows = oStatic.RowCount; // Saco la cantidad de registros que tiene la Grilla
                            int row = 0;

                            cancelarEnvio = false;
                            oStaticText.Item.Enabled = false;
                            for (int i = 0; i < cantRows && cancelarEnvio == false; i++) // Mientras tenga registros y mientras no se Cancele por el usuario
                            {
                                row = i + 1;

                                oStaticText.Caption = "Enviando " + row + "/" + cantRows;

                                SAPbouiCOM.EditText ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                DocumentoNOElectronico docNo = new DocumentoNOElectronico();
                                docNo.DocEntry = Convert.ToInt32(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_4", row);

                                try
                                {
                                    docNo.Monto = Convert.ToDouble(ed.Value.ToString());
                                }
                                catch (Exception ex)
                                {
                                    docNo.Monto = 0;
                                }

                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_3", row);
                                docNo.Tipo = ed.Value.ToString();
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_2", row);
                                docNo.DocNum = Convert.ToInt32(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_0", row);
                                docNo.Cliente = ed.Value.ToString();
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_1", row);
                                docNo.Fecha = ed.Value.ToString();

                                codigoFactura = docNo.DocNum.ToString(); // Guardo el codigoFactura que es el valor que necesito para ejecutar las funciones

                                bool resultado = false;
                                // Agrego las condiciones con un Case
                                string caseSwitch = docNo.Tipo.ToString(); // Guardo el tipo de Documento y Ejecuto la funcion correspondiente
                                switch (caseSwitch)
                                {
                                    case "Factura": //Facturas de Clientes
                                        if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "133") == true)
                                            resultado = formFacturaReservaClientes("133");
                                        break;
                                    case "Factura Exportacion": //Factura Exportacion
                                        if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "65307") == true)
                                            resultado = formFacturaExportacion("65307");
                                        break;
                                    case "Nota Credito": //Nota de Crédito de Clientes
                                        if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "179") == true)
                                            resultado = formNotaCreditoClientes("179");
                                        break;
                                    case "Nota Debito": //Nota de Debito de Clientes
                                        if (ObtenerLicTradNumDocumento(docNo.DocNum.ToString(), "65303") == true)
                                            resultado = formNotaDebitoClientes("65303");
                                        break;
                                    case "Remito": //Remitos
                                        //if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA")) // Si es Dreghal
                                        //    resultado = formTransferenciaStock("940");
                                        //else 
                                        if (descEmpresa.ToString().Equals("ALMEN")) // Si es Almena 
                                            resultado = formRemitosCompras("182");
                                        else
                                            resultado = formRemitos("140");
                                        break;
                                    case "Trsf Stock": //Nota de Debito de Clientes
                                        resultado = formTransferenciaStock("940");
                                        break;
                                    case "Remito Entrada":
                                        if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") /*|| descEmpresa.ToString().Equals("MEDIT")*/)) // || descEmpresa.ToString().Equals("PROND")
                                            resultado = formRemitosCancelacion("143");
                                        break;
                                    case "Resguardo": //Resguardo
                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("ENGRW") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/)
                                            resultado = formPagosEfectuados("426", false);
                                        else
                                        {
                                            ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                            string codigoCuentaDGI = ed.Value.ToString().Trim();
                                            resultado = formResguardoPorCompraProveedor("141", false, codigoCuentaDGI);
                                        }
                                        break;
                                    case "Cancelacion eResg": //Resguardo
                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("ENGRW") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/)
                                            resultado = formPagosEfectuados("426", true);
                                        else
                                        {
                                            ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                            string codigoCuentaDGI = ed.Value.ToString().Trim();
                                            resultado = formResguardoPorCompraProveedor("181", true, codigoCuentaDGI);
                                        }
                                        break;
                                    case "Devolucion": //Devolucion
                                        resultado = formRemitosCancelacion("180");
                                        break;
                                    case "Salida Mercancias": //Salida Mercancias
                                        resultado = formRemitosSalidaMercancias("720");
                                        break;
                                    case "Boleta Entrada": // Boleta Entrada
                                        resultado = formBoletaEntrada("141", false);
                                        break;
                                    case "Cancelacion Boleta": // Boleta Entrada
                                        resultado = formBoletaEntrada("181", true);
                                        break;
                                    case "Resguardo Pago": //Resguardo
                                        resultado = formPagosEfectuados("426", false);
                                        break;
                                    default:
                                        break;
                                }

                                if (resultado) // Si el resultado es True entonces limpio las variables
                                {
                                    ////if (guardaLog == true)
                                    ////    guardaLogProceso(codigoFactura, codigoFactura, "Documento enviado Manualmente por " + usuarioLogueado.ToString(), "Sucursal: " + idSucursalUsuario); // Guarda log del Proceso

                                    GuardoFactura = false; tieneAutorizaciones = false;
                                    codigoFactura = ""; impresoraNombre = "";
                                    if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                                    { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                                    codigoDocEntry = "";
                                    formFactura = false;
                                    NroDocumento = "";
                                }
                            }
                            oStaticText.Item.Enabled = true;
                            oStaticText.Caption = "Enviar Todos"; // Le pongo el nombro original al Botón

                            CargarGrillaEnvDoc(); // Recargo la grilla
                        }
                        catch (Exception ex)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pVal.FormTypeEx.ToString(), codigoFactura, "ERROR al querer Enviar Documento a Fact Electronica", ex.Message.ToString()); // Guarda log del Proceso
                        }
                        //oStatic.GetLineData(row);
                    }

                    if (pVal.ItemUID.Equals("17") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("EnviarDocumento"))
                    {
                        try
                        {
                            SAPbouiCOM.Matrix oStatic;
                            SAPbouiCOM.Button oStaticText;
                            SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm("EnviarDocumento", 0);
                            oStatic = oForm.Items.Item("2").Specific;

                            int row = oStatic.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_SelectionOrder);
                            if (row == -1)
                                SBO_Application.MessageBox("Debe seleccionar una fila");
                            else
                            {
                                SAPbouiCOM.EditText ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_5", row);
                                DocumentoNOElectronico docNo = new DocumentoNOElectronico();
                                docNo.DocEntry = Convert.ToInt32(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_4", row);
                                docNo.Monto = Convert.ToDouble(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_3", row);
                                docNo.Tipo = ed.Value.ToString();
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_2", row);
                                docNo.DocNum = Convert.ToInt32(ed.Value.ToString());
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_0", row);
                                docNo.Cliente = ed.Value.ToString();
                                ed = (SAPbouiCOM.EditText)oStatic.GetCellSpecific("V_1", row);
                                docNo.Fecha = ed.Value.ToString();

                                codigoFactura = docNo.DocNum.ToString(); // Guardo el codigoFactura que es el valor que necesito para ejecutar las funciones

                                if (docNo.Tipo.ToString().Contains("Nota Cr"))
                                    darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "179", "");
                                else if (docNo.Tipo.ToString().Contains("Cancelacion eResg"))
                                {
                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("ENGRW") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") && !descEmpresa.ToString().Equals("TECHM"))
                                        darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "426", "");
                                    else
                                    {
                                        string codResgBaja = docNo.DocEntry.ToString();
                                        docNo.DocEntry = ObtenerDocEntryDocumento(docNo.DocNum.ToString(), "181");
                                        darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "181", codResgBaja);
                                    }
                                }
                                else if (docNo.Tipo.ToString().Contains("Resg"))
                                {
                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && docNo.Tipo.ToString().Equals("Resguardo Pago") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") && !descEmpresa.ToString().Equals("TECHM"))
                                        darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "426", "");
                                    else
                                    {
                                        string codResgBaja = "";// docNo.DocEntry.ToString();
                                        docNo.DocEntry = ObtenerDocEntryDocumento(docNo.DocNum.ToString(), "141");
                                        darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "141", codResgBaja);
                                    }
                                }
                                else if (docNo.Tipo.ToString().Contains("Remito"))
                                    darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "140", "");
                                else if (docNo.Tipo.ToString().Contains("Trsf"))
                                    darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "940", "");
                                else if (docNo.Tipo.ToString().Contains("Devol"))
                                    darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "180", "");
                                else if (docNo.Tipo.ToString().Contains("Boleta"))
                                    darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "141", "");
                                else
                                    darBajaManualEnvDoc(0, docNo.DocNum, docNo.DocEntry, "133", "");

                                CargarGrillaEnvDoc(); // Recargo la grilla
                            }
                        }
                        catch (Exception ex)
                        {
                            guardaLogProceso(pVal.FormTypeEx.ToString(), codigoFactura, "ERROR al querer Dar de Baja Manual", ex.Message.ToString()); // Guarda log del Proceso
                        }
                        //oStatic.GetLineData(row);
                    }

                    // Envía un documento que por algún motivo no fue enviado a Fact Electronica o se quiere reenviar
                    if (pVal.ItemUID.Equals("21") && pVal.EventType == SAPbouiCOM.BoEventTypes.et_CLICK && pVal.FormUID.Equals("EnviarDocumento"))
                    {
                        try
                        {
                            SAPbouiCOM.EditText oStatic;
                            oStatic = oFormEnviarDocumento.Items.Item("20").Specific; // Numero del documento

                            if (!String.IsNullOrEmpty(oStatic.String))
                            {
                                codigoFactura = oStatic.String; // Guardo el codigoFactura que es el valor que necesito para ejecutar las funciones
                                string tipoDoc = "";

                                SAPbouiCOM.ComboBox oStaticCombo;

                                oStaticCombo = oFormEnviarDocumento.Items.Item("18").Specific; // Tipo de documento
                                if (!String.IsNullOrEmpty(oStaticCombo.Value.ToString()))
                                {
                                    tipoDoc = oStaticCombo.Selected.Value.ToString();

                                    cambiaEstadoDocumentoPorErrorANulo(codigoFactura, tipoDoc, "", "NULL"); // Le cambia el estado al documento para que el mismo pueda ser enviado

                                    bool resultado = false;
                                    // Agrego las condiciones con un Case
                                    string caseSwitch = tipoDoc.ToString(); // Guardo el tipo de Documento y Ejecuto la funcion correspondiente
                                    switch (caseSwitch)
                                    {
                                        case "133": //Facturas de Clientes
                                            resultado = formFacturaClientes(caseSwitch.ToString());
                                            break;
                                        case "60090": //Facturas de Clientes + Pago
                                            resultado = formFacturaClientesMasPago(caseSwitch.ToString());
                                            break;
                                        case "60091": //Facturas de Reserva de Clientes
                                            resultado = formFacturaReservaClientes(caseSwitch.ToString());
                                            break;
                                        case "65304": //Boleta
                                            resultado = formBoleta(caseSwitch.ToString());
                                            break;
                                        case "65307": //Factura Exportación
                                            resultado = formFacturaExportacion(caseSwitch.ToString());
                                            break;
                                        case "65303": //Nota de Debito de Clientes
                                            resultado = formNotaDebitoClientes(caseSwitch.ToString());
                                            break;
                                        case "179": //Nota de Crédito de Clientes
                                            resultado = formNotaCreditoClientes(caseSwitch.ToString());
                                            break;
                                        case "140": //Remitos
                                            if (realizarRemitos == true)
                                                resultado = formRemitos(caseSwitch.ToString());
                                            break;
                                        case "143": //Remitos Cancelacion
                                            if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") /*|| descEmpresa.ToString().Equals("MEDIT")*/)) // || descEmpresa.ToString().Equals("PROND")
                                                resultado = formRemitosCancelacion(caseSwitch.ToString());
                                            break;
                                        case "940": //Transferencia de Stock
                                            if (realizarRemitos == true)
                                                if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE"))
                                                    resultado = formTransferenciaStock(caseSwitch.ToString());
                                            break;
                                        case "426": //Pagos Efectuados
                                            if (realizarResguardos == true)
                                            {
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("ENGRW") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/)
                                                    resultado = formPagosEfectuados(caseSwitch.ToString(), false);
                                                //else
                                                //    resultado = formResguardoPorCompraProveedor("141", false);
                                            }
                                            break;
                                        case "99999": //Cancelacion de eResguardo 
                                            if (realizarResguardos == true)
                                            {
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("ENGRW") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/)
                                                    resultado = formPagosEfectuados("426", false);
                                                //else
                                                //    resultado = formResguardoPorCompraProveedor("141", false);
                                            }
                                            break;
                                        case "182": //Devoluciones Compras
                                            if (realizarRemitos == true)
                                                resultado = formRemitosCompras(caseSwitch.ToString());
                                            break;
                                        case "180": //Devoluciones 
                                            if (realizarRemitos == true)
                                                resultado = formRemitosCancelacion(caseSwitch.ToString());
                                            break;
                                        case "720": //Salida Mercancias 
                                            resultado = formRemitosSalidaMercancias(caseSwitch.ToString());
                                            break;

                                        default:
                                            break;
                                    }

                                    if (resultado) // Si el resultado es True entonces limpio las variables
                                    {
                                        ////if (guardaLog == true)
                                        ////    guardaLogProceso(codigoFactura, codigoFactura, "Documento enviado Manualmente por " + usuarioLogueado.ToString(), "Sucursal: " + idSucursalUsuario); // Guarda log del Proceso

                                        GuardoFactura = false; tieneAutorizaciones = false;
                                        codigoFactura = ""; impresoraNombre = "";
                                        if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                                        { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                                        codigoDocEntry = "";
                                        formFactura = false;
                                        NroDocumento = "";
                                    }
                                }
                                else
                                    SBO_Application.MessageBox("Debe seleccionar el tipo de Documento");
                            }
                            else
                                SBO_Application.MessageBox("Debe ingresar el número de Documento");
                        }
                        catch (Exception ex)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pVal.FormTypeEx.ToString(), codigoFactura, "ERROR al querer Enviar Documento a Fact Electronica", ex.Message.ToString()); // Guarda log del Proceso
                        }
                        //oStatic.GetLineData(row);
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso(pVal.FormTypeEx.ToString(), "", "ERROR Evento Principal", ex.Message.ToString()); // Guarda log del Proceso
            }
            BubbleEvent = true;
        }

        // Evento para cerar el SAP
        private void SBO_Application_AppEvent(SAPbouiCOM.BoAppEventTypes EventType)
        {
            try
            {
                switch (EventType)
                {
                    case SAPbouiCOM.BoAppEventTypes.aet_ShutDown:
                        System.Windows.Forms.Application.Exit();
                        break;
                    case SAPbouiCOM.BoAppEventTypes.aet_CompanyChanged:
                        break;
                    case SAPbouiCOM.BoAppEventTypes.aet_LanguageChanged:
                        break;
                    case SAPbouiCOM.BoAppEventTypes.aet_ServerTerminition:
                        break;
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso("99999", "", "ERROR al cerrar el addOn", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public bool cfeEnviar(string pVal)
        {
            bool resultado = false;
            try
            {
                // Agrego las condiciones con un Case

                string caseSwitch = pVal.ToString(); // Guardo el número del formulario y Ejecuto la funcion correspondiente
                switch (caseSwitch)
                {
                    case "133": //Facturas de Clientes
                        resultado = formFacturaClientes(caseSwitch.ToString());
                        break;
                    case "60090": //Facturas de Clientes + Pago
                        resultado = formFacturaClientesMasPago(caseSwitch.ToString());
                        break;
                    case "60091": //Facturas de Reserva de Clientes
                        resultado = formFacturaReservaClientes(caseSwitch.ToString());
                        break;
                    case "65304": //Boleta
                        resultado = formBoleta(caseSwitch.ToString());
                        break;
                    case "65307": //Factura Exportación
                        resultado = formFacturaExportacion(caseSwitch.ToString());
                        break;
                    case "65303": //Nota de Debito de Clientes
                        resultado = formNotaDebitoClientes(caseSwitch.ToString());
                        break;
                    case "179": //Nota de Crédito de Clientes
                        resultado = formNotaCreditoClientes(caseSwitch.ToString());
                        break;
                    case "140": //Remitos
                        if (realizarRemitos == true)
                            resultado = formRemitos(caseSwitch.ToString());
                        break;
                    case "143": //Remitos
                        if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") /*|| descEmpresa.ToString().Equals("MEDIT")*/)) // || descEmpresa.ToString().Equals("PROND")
                            resultado = formRemitosCancelacion(caseSwitch.ToString());
                        break;
                    case "940": //Transferencia de Stock
                        if (realizarRemitos == true)
                            if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE"))
                                resultado = formTransferenciaStock(caseSwitch.ToString());
                        break;
                    case "426": //Pagos Efectuados
                        if (realizarResguardos == true)
                        {
                            if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/)
                                resultado = formPagosEfectuados(caseSwitch.ToString(), false);
                        }
                        break;
                    case "182": //Devoluciones (Compras)
                        resultado = formRemitosCompras(caseSwitch.ToString());
                        break;
                    case "180": //Devoluciones (Ventas)
                        resultado = formRemitosCancelacion(caseSwitch.ToString());
                        break;
                    case "720": // Salida de Mercancias
                        resultado = formRemitosSalidaMercancias(caseSwitch.ToString());
                        break;
                    case "141": // Boletas de Entrada
                        if (realizarBoletaEntrada == true)
                            resultado = formBoletaEntrada(caseSwitch.ToString(), false);
                        break;
                    case "181": // Boletas de Entrada
                        if (realizarBoletaEntrada == true)
                            resultado = formBoletaEntrada(caseSwitch.ToString(), true);
                        break;
                    case "170": // Recibos (factura cobranza)
                        resultado = formPagosRecibidos(caseSwitch.ToString());
                        break;
                    default:
                        break;
                }

                if (resultado) // Si el resultado es True entonces limpio las variables
                {
                    esDocCancelado = false;
                    GuardoFactura = false;
                    codigoFactura = ""; impresoraNombre = "";
                    if (impresoraUserLog == false) // Si no usa la impresora del usuario logueado
                    { nombreImpresoraUsuario = ""; templateImpresoraUsuario = ""; }
                    codigoDocEntry = "";
                    formFactura = false;
                    NroDocumento = ""; tieneAutorizaciones = false;
                }

                return resultado;
            }
            catch (Exception ex)
            { }
            return resultado;
        }

        #region "Crear Documentos"
        // Formulario 133 Factura de Clientes
        public Boolean formFacturaClientes(String pFormFactura)
        {
            Boolean res = false;

            try
            {
                String xmlFActuraCliente = "";
                bool esFacturaExportacion = false;

                try
                {
                    if (!descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("PORTV"))
                    {
                        esFacturaExportacion = verificarEsFacturaExportacionDeReserva(codigoFactura); // Primero revisa por el Indicator
                        if (esFacturaExportacion == false)
                            esFacturaExportacion = esCfeManualFacturaExportacion(codigoFactura); // Si no es revisa por el campo TIPOCFEMANUAL
                    }
                    else
                        esFacturaExportacion = ObtenerCardCodeCliente(codigoFactura, pFormFactura); // Si es Schindler se fija en el campo VatStatus de la pestaña Finanzas de la ficha Socio de Negocio, Si es Portvan en el Grupo
                }
                catch (Exception ex)
                { }

                // Se comentó a partir del cambio de VatStatus
                //if (descEmpresa.ToString().Equals("TRIAL"))
                //    esFacturaExportacion = true;

                if (esFacturaExportacion == false)
                {
                    if (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("AEG") || descEmpresa.ToString().Equals("ANCAL") || descEmpresa.ToString().Equals("OPRUM") || descEmpresa.ToString().Equals("CABIN"))
                        xmlFActuraCliente = generarXmlFacturaNuevo(pFormFactura);
                    else
                    {
                        if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                            xmlFActuraCliente = GenerarXmlFactura(pFormFactura); // generarXmlFacturaNuevo
                        else
                            xmlFActuraCliente = GenerarXmlFacturaFITCO(pFormFactura);
                    }
                }
                else
                    xmlFActuraCliente = GenerarXmlFacturaExportacion(pFormFactura);

                guardarOperacionCSV(codigoDocEntry.ToString(), "XML", xmlFActuraCliente); // Guarda log en Archivo CSV

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);

                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                //    CambiarEstadoFactura(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 2 veces mas 
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            { }
            return res;
        }

        //Formulario 170 PAgos Recibidos
        public Boolean formPagosRecibidos(String pFormFactura)
        {
            Boolean res = false;

            try
            {
                String xmlFActuraCliente = "";

                xmlFActuraCliente = generarXmlRecibo(pFormFactura);

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    SICFERespuestaBuffer pdf = null;

                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV

                            if (!pFormFactura.Equals("170"))
                                pdf = ObtenerPDF(id);

                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                if (!pFormFactura.Equals("170"))
                                {
                                    generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                    if (!imprimePDFDefecto && imprimeDocContingencia)
                                    {
                                        int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                        bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                        for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 2 veces mas 
                                        {
                                            imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                        }
                                    }
                                }

                                res = true;
                            }
                            catch
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            { }
            return res;
        }

        // Formulario 60091 Factura de Reserva de Clientes
        public Boolean formFacturaReservaClientes(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                String xmlFActuraCliente = "";

                bool esFacturaExportacion = false;

                try
                {
                    if (!descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("PORTV"))
                    {
                        esFacturaExportacion = verificarEsFacturaExportacionDeReserva(codigoFactura); // Primero revisa por el Indicator
                        if (esFacturaExportacion == false)
                            esFacturaExportacion = esCfeManualFacturaExportacion(codigoFactura); // Si no es revisa por el campo TIPOCFEMANUAL
                    }
                    else
                        esFacturaExportacion = ObtenerCardCodeCliente(codigoFactura, pFormFactura); // Si es Schindler se fija en el campo VatStatus de la pestaña Finanzas de la ficha Socio de Negocio, Si es Portvan en el Grupo
                }
                catch (Exception ex)
                { }

                // Se comentó a partir del cambio de VatStatus
                //if (descEmpresa.ToString().Equals("TRIAL"))
                //    esFacturaExportacion = true;

                if (esFacturaExportacion == false)
                {
                    if (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("AEG") || descEmpresa.ToString().Equals("ANCAL") || descEmpresa.ToString().Equals("OPRUM") || descEmpresa.ToString().Equals("CABIN"))
                        xmlFActuraCliente = generarXmlFacturaNuevo(pFormFactura);
                    else
                    {
                        if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                            xmlFActuraCliente = GenerarXmlFactura(pFormFactura); // generarXmlFacturaNuevo
                        else
                            xmlFActuraCliente = GenerarXmlFacturaFITCO(pFormFactura);
                    }
                }
                else
                    xmlFActuraCliente = GenerarXmlFacturaExportacion(pFormFactura);

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);
                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                //    CambiarEstadoFactura(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 65304 Boleta
        public Boolean formBoleta(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                String xmlFActuraCliente = "";
                bool esFacturaExportacion = false;

                try
                {
                    if (!descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("PORTV"))
                    {
                        esFacturaExportacion = verificarEsFacturaExportacionDeReserva(codigoFactura); // Primero revisa por el Indicator
                        if (esFacturaExportacion == false)
                            esFacturaExportacion = esCfeManualFacturaExportacion(codigoFactura); // Si no es revisa por el campo TIPOCFEMANUAL
                    }
                    else
                        esFacturaExportacion = ObtenerCardCodeCliente(codigoFactura, pFormFactura); // Si es Schindler se fija en el campo VatStatus de la pestaña Finanzas de la ficha Socio de Negocio, Si es Portvan en el Grupo
                }
                catch (Exception ex)
                { }

                // Se comentó a partir del cambio de VatStatus
                //if (descEmpresa.ToString().Equals("TRIAL"))
                //    esFacturaExportacion = true;

                if (esFacturaExportacion == false)
                {
                    if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                        xmlFActuraCliente = GenerarXmlFactura(pFormFactura);
                    else
                        xmlFActuraCliente = GenerarXmlFacturaFITCO(pFormFactura);
                }
                else
                    xmlFActuraCliente = GenerarXmlFacturaExportacion(pFormFactura);

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);
                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                //    CambiarEstadoFactura(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 60090 Factura de Clientes + Pago
        public Boolean formFacturaClientesMasPago(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                String xmlFActuraCliente = "";
                if (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("AEG") || descEmpresa.ToString().Equals("OPRUM"))
                    xmlFActuraCliente = generarXmlFacturaNuevo(pFormFactura);
                else
                {
                    if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                        xmlFActuraCliente = GenerarXmlFactura(pFormFactura); // generarXmlFacturaNuevo
                    else
                        xmlFActuraCliente = GenerarXmlFacturaFITCO(pFormFactura);
                }

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);
                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                //    CambiarEstadoFactura(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 65307 Factura de Exportación
        public Boolean formFacturaExportacion(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                String xmlFActuraCliente = GenerarXmlFacturaExportacion(pFormFactura);
                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);
                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                //    CambiarEstadoFactura(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 179 Nota Credito de Clientes
        public Boolean formNotaCreditoClientes(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                //bool esManual = false; // Variable para verificar si proviene de un documento Manual
                bool esExportacion = false;
                try
                {
                    //esManual = obtenerDocumentoReferenciaNotaCreditoEsManual(codigoFactura);
                    if (!descEmpresa.ToString().Equals("SCHIN") || !descEmpresa.ToString().Equals("PORTV") || !descEmpresa.ToString().Equals("RURAL"))
                    {
                        esExportacion = obtenerDocumentoReferenciaEsExportacion(codigoFactura);

                        if (esExportacion == false)
                            esExportacion = esCfeManualNotaCreditoExportacion(codigoFactura);
                    }
                    else
                        esExportacion = ObtenerCardCodeCliente(codigoFactura, pFormFactura); // Se fija en el campo VatStatus de la pestaña Finanzas de la ficha Socio de Negocio, Si es Portvan en el Grupo
                }
                catch (Exception ex)
                { }

                // Se comentó a partir del cambio de VatStatus
                //if (descEmpresa.ToString().Equals("TRIAL"))
                //    esFacturaExportacion = true;

                //if (esManual == false)
                //{
                String xmlFActuraCliente = "";
                if (esExportacion == false)
                {
                    if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                    {
                        if (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("AEG") || descEmpresa.ToString().Equals("OPRUM") || descEmpresa.ToString().Equals("RURAL"))
                            xmlFActuraCliente = GenerarXmlNotaCreditoNuevo(pFormFactura);
                        else
                            xmlFActuraCliente = GenerarXmlNotaCredito(pFormFactura);
                    }
                    else
                        xmlFActuraCliente = GenerarXmlNotaCreditoFITCO(pFormFactura);
                }
                else
                    xmlFActuraCliente = GenerarXmlNotaCreditoExportacion(pFormFactura);

                /*if (descEmpresa.ToString().Equals("ALMEN"))
                    xmlFActuraCliente = GenerarXmlNotaCreditoAlmena(pFormFactura);*/

                if (!xmlFActuraCliente.Equals(""))
                {
                    if (verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                    {
                        try
                        {
                            SICFERespuestaEnvioCFE respuesta = new SICFERespuestaEnvioCFE();
                            if (esExportacion == false)
                                respuesta = EnviarCFENotaCreditoDebito(pFormFactura, xmlFActuraCliente);
                            else
                                respuesta = EnviarCFENotaCreditoDebitoExportacion(pFormFactura, xmlFActuraCliente);
                            if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                            {
                                guardarOperacionCSV(codigoDocEntry.ToString(), "14", "Guarda Folio"); // Guarda log en Archivo CSV
                                GuardarSerieYNumeroNotaCredito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                                IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                                creoFactura = true;
                                guardarOperacionCSV(codigoDocEntry.ToString(), "14", "Obtiene PDF"); // Guarda log en Archivo CSV
                                SICFERespuestaBuffer pdf = ObtenerPDF(id);
                                try
                                {
                                    bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                    if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 202 || id.Tipo == 212))
                                        imprimeDocContingencia = false;

                                    generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "14");

                                    //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                    //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                    //     CambiarEstadoNotaCredito(pFormFactura);

                                    if (!imprimePDFDefecto && imprimeDocContingencia)
                                    {
                                        int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                        bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                        for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                        {
                                            imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                        }
                                    }

                                    res = true;
                                }
                                catch
                                {
                                    SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                                }
                            }
                        }
                        catch
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        //SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");
                    }
                }
                else
                    res = true;
                //}
                //else
                //    res = true; // Lo paso a true para que devuelva
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 65303 Nota Debito de Clientes
        public Boolean formNotaDebitoClientes(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                String xmlFActuraCliente = "";

                if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                    xmlFActuraCliente = GenerarXmlNotaDebito(pFormFactura);
                else
                    xmlFActuraCliente = GenerarXmlNotaDebitoFITCO(pFormFactura);

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFENotaCreditoDebito(pFormFactura, xmlFActuraCliente);
                        if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);
                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 203 || id.Tipo == 213))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "13");

                                //// YA CAMBIO EL ESTADO JUNTO CON SERIE Y FOLIO
                                //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                //    CambiarEstadoFactura(pFormFactura);

                                res = true;
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 140 Remitos ó Entregas
        public Boolean formRemitos(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                bool sigue = true;
                bool esExportacion = false; // Por defecto no es Exportación. Si Genera_Remito busca si el mismo es de Exportación
                try
                {
                    SAPbobsCOM.Recordset oRSMyTableResg = ObtenerGeneraRemito(codigoFactura, pFormFactura);
                    if (oRSMyTableResg != null)
                    {
                        while (!oRSMyTableResg.EoF)
                        {
                            int generaRem = (int)oRSMyTableResg.Fields.Item("U_GENERA_REMITO").Value; // 0 No Genera. 1 Genera eRemito. 2 Genera eRemito de cancelación. 3 Genera eRemito de Exportación. 4 Genera eRemito de cancelacion de Exportacion
                            if (generaRem == 0)
                                sigue = false;
                            else if (generaRem == 3)
                                esExportacion = true; // Remito de Exportación

                            oRSMyTableResg.MoveNext();
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                    oRSMyTableResg = null;
                }
                catch (Exception ex)
                { }

                if (sigue == true || esExportacion == true)
                {
                    //if (esManual == false)
                    //{
                    String xmlFActuraCliente = "";
                    if (esExportacion == false) // COMENTADO 30/07  /*&& !descEmpresa.ToString().Equals("POCHA")*/
                    {
                        if (descEmpresa.ToString().Equals("RURAL"))
                            xmlFActuraCliente = GenerarXmlRemitosNuevo(pFormFactura);
                        else
                            xmlFActuraCliente = GenerarXmlRemitos(pFormFactura);
                    }
                    else
                        xmlFActuraCliente = GenerarXmlRemitosExportacion(pFormFactura);

                    //String xmlFActuraCliente = GenerarXmlRemitos(pFormFactura);
                    if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                    {
                        try
                        {
                            SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                            if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                            {
                                guardarOperacionCSV(codigoDocEntry.ToString(), "15", "Guarda Folio"); // Guarda log en Archivo CSV
                                GuardarSerieYNumeroRemito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                                IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                                creoFactura = true;
                                guardarOperacionCSV(codigoDocEntry.ToString(), "15", "Obtiene PDF"); // Guarda log en Archivo CSV
                                SICFERespuestaBuffer pdf = ObtenerPDF(id);

                                try
                                {
                                    bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                    if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                        imprimeDocContingencia = false;

                                    generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "15");

                                    if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                        CambiarEstadoRemito(pFormFactura);

                                    if (!imprimePDFDefecto && imprimeDocContingencia)
                                    {
                                        int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                        bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                        for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                        {
                                            imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                        }
                                    }

                                    res = true;
                                }
                                catch (Exception ex)
                                {
                                    SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        //if (!xmlFActuraCliente.Equals(""))
                        //    SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 720 Salida Mercancias
        public Boolean formRemitosSalidaMercancias(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                bool sigue = ObtenerSalidaMercanciaGeneraRemito(codigoFactura, pFormFactura);

                if (sigue == true)
                {
                    String xmlFActuraCliente = GenerarXmlRemitosSalidaMercaderia(pFormFactura);

                    //String xmlFActuraCliente = GenerarXmlRemitos(pFormFactura);
                    if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                    {
                        try
                        {
                            SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                            if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                            {
                                guardarOperacionCSV(codigoDocEntry.ToString(), "60", "Guarda Folio"); // Guarda log en Archivo CSV
                                GuardarSerieYNumeroRemito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                                IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                                creoFactura = true;
                                guardarOperacionCSV(codigoDocEntry.ToString(), "60", "Obtiene PDF"); // Guarda log en Archivo CSV
                                SICFERespuestaBuffer pdf = ObtenerPDF(id);
                                try
                                {
                                    bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                    if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                        imprimeDocContingencia = false;

                                    generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "60");

                                    if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                        CambiarEstadoRemitoSalidaMercancias(pFormFactura);

                                    if (!imprimePDFDefecto && imprimeDocContingencia)
                                    {
                                        int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                        bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                        for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                        {
                                            imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                        }
                                    }

                                    res = true;
                                }
                                catch (Exception ex)
                                {
                                    SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        //if (!xmlFActuraCliente.Equals(""))
                        //    SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 140 Remitos ó Entregas
        public Boolean formRemitosCompras(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                bool sigue = true;
                try
                {
                    SAPbobsCOM.Recordset oRSMyTableResg = ObtenerGeneraRemito(codigoFactura, pFormFactura);
                    if (oRSMyTableResg != null)
                    {
                        while (!oRSMyTableResg.EoF)
                        {
                            int generaRem = (int)oRSMyTableResg.Fields.Item("U_GENERA_REMITO").Value; // 0 No Genera. 1 Genera eRemito. 2 Genera eRemito de cancelación
                            if (generaRem == 0)
                                sigue = false;

                            oRSMyTableResg.MoveNext();
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                    oRSMyTableResg = null;
                }
                catch (Exception ex)
                { }

                if (sigue == true)
                {
                    String xmlFActuraCliente = GenerarXmlRemitos(pFormFactura);
                    if (!xmlFActuraCliente.Equals("")) //&& verificarDocumentoFecha(codigoFactura, pFormFactura) == true
                    {
                        try
                        {
                            SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroRemito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "13", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);

                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "15");

                                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                    CambiarEstadoRemitoCompras(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                        catch (Exception ex)
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        /*if (!xmlFActuraCliente.Equals(""))
                            SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                    }
                }
                else
                    guardaLogProceso(pFormFactura.ToString(), "", "Remito no es valido", ""); // Guarda log del Proceso
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 140 Remitos ó Entregas
        public Boolean formRemitosCancelacion(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                bool sigue = true; bool esExportacion = false;
                try
                {
                    SAPbobsCOM.Recordset oRSMyTableResg = ObtenerGeneraRemito(codigoFactura, pFormFactura);
                    if (oRSMyTableResg != null)
                    {
                        while (!oRSMyTableResg.EoF)
                        {
                            int generaRem = (int)oRSMyTableResg.Fields.Item("U_GENERA_REMITO").Value; // 0 No Genera. 1 Genera eRemito. 2 Genera eRemito de cancelación. 3 Genera eRemito de Exportación. 4 Genera eRemito de cancelacion de Exportacion
                            if (generaRem == 4)
                                esExportacion = true; // Remito de Cancelación de Exportación
                            else if (generaRem == 2)
                                sigue = true; // Remito de Cancelación
                            else
                                sigue = false;

                            oRSMyTableResg.MoveNext();
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                    oRSMyTableResg = null;
                }
                catch (Exception ex)
                { }

                if (sigue == true || esExportacion == true)
                {
                    //String xmlFActuraCliente = GenerarXmlRemitosCancelaciones(pFormFactura);
                    String xmlFActuraCliente = "";
                    if (esExportacion == false)
                    {
                        if (descEmpresa.ToString().Equals("RURAL"))
                            xmlFActuraCliente = GenerarXmlRemitosCancelacionesNuevo(pFormFactura);
                        else
                            xmlFActuraCliente = GenerarXmlRemitosCancelaciones(pFormFactura);
                    }
                    else
                        xmlFActuraCliente = GenerarXmlRemitosCancelacionesExportacion(pFormFactura);

                    if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                    {
                        try
                        {
                            SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                            guardarOperacionCSV(codigoDocEntry.ToString(), "15", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroRemito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "15", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);

                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "15");

                                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                    CambiarEstadoRemito(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                        catch (Exception ex)
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        //if (!xmlFActuraCliente.Equals(""))
                        //    SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error de conexion con sicfe" + ex.Message);
            }
            return res;
        }

        // Formulario 940 Remitos ó Entregas
        public Boolean formTransferenciaStock(String pFormFactura)
        {
            Boolean res = false;
            try
            {
                //bool esDevolucionRemito = false;
                //bool generaRemitoTransferencia = true;
                //try
                //{
                //    SAPbobsCOM.Recordset oRSMyTableResg = ObtenerGeneraRemito(codigoFactura, pFormFactura); // Obtengo las cuentas que se utilizaron en el documento
                //    if (oRSMyTableResg != null)
                //    {
                //        while (!oRSMyTableResg.EoF)
                //        {
                //            int generaRem = (int)oRSMyTableResg.Fields.Item("U_GENERA_REMITO").Value;
                //            if (generaRem == 1)
                //                esDevolucionRemito = true;
                //            else
                //                generaRemitoTransferencia = false;

                //            if ((descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && pFormFactura.ToString().Equals("940")) // Si es Granja Pocha y si es una Tr de Stock
                //            {
                //                generaRem = (int)oRSMyTableResg.Fields.Item("U_GENERA_REMITO_TR").Value;
                //                if (generaRem == 0)
                //                    generaRemitoTransferencia = false; // No genera
                //                else
                //                    generaRemitoTransferencia = true;
                //            }
                //            oRSMyTableResg.MoveNext();
                //        }
                //    }
                //    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                //    oRSMyTableResg = null;
                //}
                //catch (Exception ex)
                //{ }
                bool sigue = true; bool remitoCancelacion = false;
                try
                {
                    SAPbobsCOM.Recordset oRSMyTableResg = ObtenerGeneraRemitoTrsfStock(codigoFactura, pFormFactura);
                    if (oRSMyTableResg != null)
                    {
                        while (!oRSMyTableResg.EoF)
                        {
                            int generaRem = (int)oRSMyTableResg.Fields.Item("U_GENERA_REMITO").Value; // 0 No Genera. 1 Genera eRemito. 2 Genera eRemito de cancelación. 3 Genera eRemito de Exportación. 4 Genera eRemito de cancelacion de Exportacion
                            if (generaRem == 0)
                                sigue = false;
                            else if (generaRem == 2)
                                remitoCancelacion = true;

                            generaRem = (int)oRSMyTableResg.Fields.Item("U_EREMITO").Value; // Valida ahora que el Almacen Genere Remito
                            if (generaRem == 0)
                                sigue = false;

                            oRSMyTableResg.MoveNext();
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                    oRSMyTableResg = null;
                }
                catch (Exception ex)
                { guardaLogProceso(pFormFactura.ToString(), "", "ERROR Verificando si genera eRemito Trsf Stock", ex.Message.ToString()); }// Guarda log del Proceso}

                String xmlFActuraCliente = "";

                if (descEmpresa.ToString().Equals("PROND"))
                    sigue = false;

                if (sigue == true)
                {
                    if (remitoCancelacion == false)
                        xmlFActuraCliente = GenerarXmlRemitos(pFormFactura);
                    else
                        xmlFActuraCliente = GenerarXmlRemitosCancelaciones(pFormFactura);
                }

                if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                {
                    try
                    {
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(pFormFactura, xmlFActuraCliente, "");
                        guardarOperacionCSV(codigoDocEntry.ToString(), "67", "Guarda Folio"); // Guarda log en Archivo CSV
                        //GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                        GuardarSerieYNumeroRemito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                        IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                        creoFactura = true;
                        guardarOperacionCSV(codigoDocEntry.ToString(), "67", "Obtiene PDF"); // Guarda log en Archivo CSV
                        SICFERespuestaBuffer pdf = ObtenerPDF(id);

                        try
                        {
                            bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                            if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                imprimeDocContingencia = false;

                            generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "67");

                            if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                CambiarEstadoTransferenciaStock(pFormFactura);

                            if (!imprimePDFDefecto && imprimeDocContingencia)
                            {
                                int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                {
                                    imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                }
                            }

                            res = true;
                        }
                        catch (Exception ex)
                        {
                            SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                        }
                    }
                    catch (Exception ex)
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso(pFormFactura.ToString(), "", "ERROR Evento Form", ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }

        // Formulario 426 Pagos Efectuados
        public Boolean formPagosEfectuados(String pFormFactura, bool pEsCancelacion)
        {
            Boolean res = false;
            try
            {
                bool sigue = false;

                try
                {
                    //SAPbobsCOM.Recordset oRSMyTableResg = ObtenerCuentaResguardoDocumento(codigoFactura); // Obtengo las cuentas que se utilizaron en el documento
                    //if (oRSMyTableResg != null)
                    //{
                    //    while (!oRSMyTableResg.EoF)
                    //    {
                    //        string cuentaCash = (string)oRSMyTableResg.Fields.Item("CashAcct").Value;
                    //        //string cuentaTrs = (string)oRSMyTableResg.Fields.Item("TrsfrAcct").Value;
                    //        //if (!cuentaCash.ToString().Equals(cuentaResguardos) && !cuentaTrs.ToString().Equals(cuentaResguardos))
                    //        //    sigue = false; // No deja hacer el documento
                    //        sigue = VerificarCuentaGeneraResguardo(cuentaCash); // Verifica si la cuenta genera resguardo o no
                    //        oRSMyTableResg.MoveNext();
                    //    }
                    //}
                    //System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                    //oRSMyTableResg = null;

                    SAPbobsCOM.Recordset oRSMyTableResg = ObtenerCuentaResguardoDocumentoCodigoDGI(codigoFactura); // Obtengo las cuentas que se utilizaron en el documento
                    if (oRSMyTableResg != null)
                    {
                        while (!oRSMyTableResg.EoF)
                        {
                            string codigoCuentaDGI = (string)oRSMyTableResg.Fields.Item("U_CODIGODGI").Value;
                            //string cuentaTrs = (string)oRSMyTableResg.Fields.Item("TrsfrAcct").Value;
                            //if (!cuentaCash.ToString().Equals(cuentaResguardos) && !cuentaTrs.ToString().Equals(cuentaResguardos))
                            //    sigue = false; // No deja hacer el documento
                            if (!String.IsNullOrEmpty(codigoCuentaDGI))
                                sigue = true;
                            oRSMyTableResg.MoveNext();
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableResg);
                    oRSMyTableResg = null;
                }
                catch (Exception ex)
                {
                    if (guardaLog == true)
                        guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR Validando si genera Resguardo", ex.Message.ToString());
                }

                if (sigue == true)
                {
                    String xmlFActuraCliente = "";
                    if (!descEmpresa.ToString().Equals("FITCO") && !descEmpresa.ToString().Equals("FIOCI"))
                        xmlFActuraCliente = GenerarXmlResguardos(pFormFactura, pEsCancelacion);
                    else
                        xmlFActuraCliente = GenerarXmlResguardosFITCO(pFormFactura, pEsCancelacion);

                    if (!xmlFActuraCliente.Equals("") && verificarDocumentoFecha(codigoFactura, pFormFactura) == true)
                    {
                        try
                        {
                            string formFacturaParam = pFormFactura;
                            if (pEsCancelacion == true)
                                formFacturaParam = "99999"; // Le avisa al Envio que es una Cancelacion
                            SICFERespuestaEnvioCFE respuesta = EnviarCFE(formFacturaParam, xmlFActuraCliente, "");

                            if (pEsCancelacion == true)
                                respuesta.IdCFE.Tipo = 0;

                            guardarOperacionCSV(codigoDocEntry.ToString(), "46", "Guarda Folio"); // Guarda log en Archivo CSV
                            GuardarSerieYNumeroRemito(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                            IdCFE id = ObtenerIdCFEFactura(codigoFactura, pFormFactura);
                            creoFactura = true;
                            guardarOperacionCSV(codigoDocEntry.ToString(), "46", "Obtiene PDF"); // Guarda log en Archivo CSV
                            SICFERespuestaBuffer pdf = ObtenerPDF(id);
                            try
                            {
                                bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                    imprimeDocContingencia = false;

                                generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "46");

                                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                    CambiarEstadoFactura(pFormFactura);

                                if (!imprimePDFDefecto && imprimeDocContingencia)
                                {
                                    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    {
                                        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    }
                                }

                                res = true;
                            }
                            catch
                            {
                                SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                            }
                        }
                        catch
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        /*if (!xmlFActuraCliente.Equals(""))
                            SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR No es posible generar el Resguardo", ex.Message.ToString());
            }
            return res;
        }

        // Formulario 426 Pagos Efectuados
        public Boolean formResguardoPorCompraProveedor(String pFormFactura, bool pEsCancelacion, string pCodigoCuentaResguardo)
        {
            Boolean res = false;
            try
            {
                String xmlFActuraCliente = GenerarXmlResguardosPorCompraProveedor(pFormFactura, pEsCancelacion, "", pCodigoCuentaResguardo);
                if (!xmlFActuraCliente.Equals(""))
                {
                    try
                    {
                        string formFacturaParam = pFormFactura;
                        if (pEsCancelacion == true)
                            formFacturaParam = "99999"; // Le avisa al Envio que es una Cancelacion
                        SICFERespuestaEnvioCFE respuesta = EnviarCFE(formFacturaParam, xmlFActuraCliente, pCodigoCuentaResguardo);

                        /*if (pEsCancelacion == true)
                            respuesta.IdCFE.Tipo = 0;*/

                        guardarOperacionCSV(codigoDocEntry.ToString(), "18", "Guarda Folio"); // Guarda log en Archivo CSV
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        guardarControlFE(codigoFactura, pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo, docEntry, 1, pCodigoCuentaResguardo); // Guardo en la tabla ControlFE
                        //GuardarSerieYNumeroFactura(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                        guardarNroSerieYNumero(codigoFactura, pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo, docEntry);
                        IdCFE id = new IdCFE();
                        id.Tipo = respuesta.IdCFE.Tipo;
                        id.Numero = respuesta.IdCFE.Numero;
                        id.observado = 1;
                        id.rucemisor = rucEmisorSicfe.ToString();
                        id.Serie = respuesta.IdCFE.Serie;

                        creoFactura = true;
                        guardarOperacionCSV(codigoDocEntry.ToString(), "18", "Obtiene PDF"); // Guarda log en Archivo CSV
                        SICFERespuestaBuffer pdf = ObtenerPDF(id);
                        try
                        {
                            bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                            if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                imprimeDocContingencia = false;

                            generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, "18");
                            //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                            //    CambiarEstadoFactura(pFormFactura);

                            //if (!imprimePDFDefecto && imprimeDocContingencia)
                            //{
                            //    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                            //    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                            //    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                            //    {
                            //        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                            //    }
                            //}

                            res = true;
                        }
                        catch
                        {
                            SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                        }
                    }
                    catch
                    {
                        SBO_Application.MessageBox("Error de conexion con sicfe");
                    }
                }
                else
                {
                    res = true;
                    /*if (!xmlFActuraCliente.Equals(""))
                        SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR No es posible generar el Resguardo", ex.Message.ToString());
            }
            return res;
        }

        // Formulario 141 Factura de Proveedores141 Factura de Proveedores
        public Boolean formBoletaEntrada(String pFormFactura, bool pEsCancelacion)
        {
            Boolean res = false;
            try
            {
                bool sigue = false;
                bool resguardo = false;

                try
                {
                    SAPbobsCOM.Recordset oRSMyTableBoleta = obtenerGeneraBoletaEntrada(codigoFactura, pFormFactura); // Obtengo las cuentas que se utilizaron en el documento
                    if (oRSMyTableBoleta != null)
                    {
                        while (!oRSMyTableBoleta.EoF)
                        {
                            string generaBoleta = (string)oRSMyTableBoleta.Fields.Item("QryGroup19").Value;
                            string generaResguardo = "N";
                            if (descEmpresa.Equals("ENGRW"))
                            {
                                generaResguardo = (string)oRSMyTableBoleta.Fields.Item("QryGroup19").Value;
                            }

                            if (!String.IsNullOrEmpty(generaBoleta))
                                if (generaBoleta.Equals("Y"))
                                    sigue = true;

                            if (!String.IsNullOrEmpty(generaResguardo))
                                if (generaResguardo.Equals("Y"))
                                    resguardo = true;

                            oRSMyTableBoleta.MoveNext();
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableBoleta);
                    oRSMyTableBoleta = null;
                }
                catch (Exception ex)
                { }

                if (sigue == true)
                {
                    String xmlFActuraCliente = generarXmlBoletaEntrada(pFormFactura, pEsCancelacion);
                    if (!xmlFActuraCliente.Equals(""))
                    {
                        try
                        {
                            SICFERespuestaEnvioCFE respuesta = EnviarCFEBoletaEntrada(pFormFactura, xmlFActuraCliente);

                            /*if (pEsCancelacion == true)
                                respuesta.IdCFE.Tipo = 0;*/
                            if (respuesta != null && !String.IsNullOrEmpty(respuesta.IdCFE.Serie) && !String.IsNullOrEmpty(respuesta.IdCFE.Numero.ToString()) && !String.IsNullOrEmpty(respuesta.IdCFE.Tipo.ToString()))
                            {
                                int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                                GuardarSerieYNumeroBoletaEntrada(pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo);
                                guardarControlFE(codigoFactura, pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo, docEntry, 1, ""); // Guardo en la tabla ControlFE

                                //guardarNroSerieYNumero(codigoFactura, pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo, docEntry);
                                //guardarControlFE(codigoFactura, pFormFactura, respuesta.IdCFE.Serie, respuesta.IdCFE.Numero, respuesta.IdCFE.Tipo, docEntry, 1, ""); // Guardo en la tabla ControlFE

                                IdCFE id = new IdCFE();
                                id.Tipo = respuesta.IdCFE.Tipo;
                                id.Numero = respuesta.IdCFE.Numero;
                                id.observado = 1;
                                id.rucemisor = rucEmisorSicfe.ToString();
                                id.Serie = respuesta.IdCFE.Serie;

                                creoFactura = true;

                                SICFERespuestaBuffer pdf = ObtenerPDF(id);
                                try
                                {
                                    bool imprimeDocContingencia = true; // Por defecto imprime los documentos de Contingencia, pero en Remiler no lo hace

                                    if ((descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA")) && (id.Tipo == 201 || id.Tipo == 211))
                                        imprimeDocContingencia = false;

                                    string objType = "18";
                                    if (pEsCancelacion == true)
                                        objType = "19";

                                    generoPDF = generarPDF(pdf, rutaDefecto, imprimeDocContingencia, id, objType);
                                    //if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                                    //    CambiarEstadoFactura(pFormFactura);

                                    //if (!imprimePDFDefecto && imprimeDocContingencia)
                                    //{
                                    //    int docEntryDocPrueba = ObtenerDocEntryDocumento(codigoFactura, pFormFactura);
                                    //    bool imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, 0);
                                    //    for (int i = 1; i < 3 && imprimio == false; i++) // Si no imprimio de primera vuelve a intentarlo hasta 3 veces
                                    //    {
                                    //        imprimio = imprimirDocumentoCrystalReport(docEntryDocPrueba.ToString(), codigoFactura, pFormFactura, i);
                                    //    }
                                    //}

                                    res = true;
                                }
                                catch
                                {
                                    SBO_Application.MessageBox("Debe existir la carpeta " + rutaDefecto.ToString());
                                }
                            }
                        }
                        catch
                        {
                            SBO_Application.MessageBox("Error de conexion con sicfe");
                        }
                    }
                    else
                    {
                        res = true;
                        /*if (!xmlFActuraCliente.Equals(""))
                            SBO_Application.MessageBox("El documento " + codigoFactura + " tiene una Fecha anterior al comienzo de eFactura");*/
                    }
                }
                else if (resguardo)
                {
                    Boolean prueba = formResguardoPorCompraProveedor(pFormFactura, pEsCancelacion, "");
                    //String xmlFActuraCliente = GenerarXmlResguardosPorCompraProveedor(pFormFactura, pEsCancelacion, "", pCodigoCuentaResguardo);
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR No es posible generar el Resguardo", ex.Message.ToString());
            }
            return res;
        }

        #endregion

        // Funcion que recibe el pdf y el directorio para guardarlo.
        public bool generarPDF(SICFERespuestaBuffer pPDF, String pRutaDefecto, bool pImprimeDocContingencia, IdCFE pIdCfe, string pObjType)
        {
            bool res = false;
            try
            {
                if (!String.IsNullOrEmpty(codigoFactura)) // Si tengo un número de documento
                {
                    string nombrePDF = obtenerNombreTipoCFE(pIdCfe.Tipo.ToString().Trim()) + " " + pIdCfe.Serie.ToString().Trim() + "-" + pIdCfe.Numero.ToString().Trim() + ".pdf";
                    nombrePDF = nombrePDF.ToString().Replace(" ", "_");
                    string filename = rutaDefecto.ToString() + nombrePDF.ToString();

                    if (!Directory.Exists(rutaDefecto.ToString())) // Si no existe la carpeta donde se guardan los pdf
                        Directory.CreateDirectory(rutaDefecto.ToString());

                    guardarOperacionCSV(codigoDocEntry.ToString(), pObjType, "Genera PDF"); // Guarda log en Archivo CSV

                    if (File.Exists(filename.ToString())) // Si ya existe el PDF lo borra
                        File.Delete(filename.ToString());
                    FileStream fs = new FileStream(filename, FileMode.Create, FileAccess.Write);
                    fs.Write(pPDF.Buffer, 0, pPDF.Buffer.Length);
                    fs.Close();

                    try
                    {
                        if (imprimePDFDefecto && pImprimeDocContingencia)
                        {
                            guardarOperacionCSV(codigoDocEntry.ToString(), pObjType, "Imprime PDF " + softwareImpresion.ToString()); // Guarda log en Archivo CSV
                            if (softwareImpresion.ToString().Equals("Acrobat"))
                                res = imprimirPDFAcrobat(filename, pRutaDefecto, nombrePDF); // Imprime el pdf por Acrobat Reader
                            else
                                res = imprimirPDFFoxit(filename, pRutaDefecto, nombrePDF); // Imprime el pdf por Foxit Reader

                            string pArchivo = rutaDefecto + nombrePDF;
                            if (!File.Exists(pArchivo)) // Si el archivo no existe
                                pArchivo = pArchivo.ToString().Replace("\\\\", "\\");
                            GuardarRuta(codigoDocEntry, pObjType, pArchivo);
                        }

                        pdfAbierto = true;
                    }
                    catch (Exception ex)
                    {
                        if (!pdfAbierto && !imprimePDFDefecto) // Si el pdf no esta abierto y si no tiene configurado que imprima por defecto
                        {
                            System.Diagnostics.Process.Start(filename.ToString()); // Reintento mostrar el PDF
                            guardaLogProceso("", codigoFactura.ToString(), "Abre el PDF", nombrePDF); // Guarda log del Proceso
                        }
                    }
                    ////res = true; // Comentado para verificar que funcione la impresion predeterminada de SAP cuando no imprime el documento
                }

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", codigoFactura, "ERROR al Abrir PDF", ex.Message.ToString()); // Guarda log del Proceso
                res = false;
                SBO_Application.MessageBox("Error al generar el PDF" + ex.Message);
            }
            return res;
        }

        // Cargo los datos de la empresa que hace de Emisor del CFE
        public Emisor cargarEmisor()
        {
            Emisor emisor = new Emisor();
            try
            {
                bool cargados = false;
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = obtenerDatosSucursal();

                noImprimeNingunModo = false;

                emisor.RUCEmisor = rucEmisorSicfe.ToString(); // "110050930013";

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        if (!String.IsNullOrEmpty(oRSMyTable.Fields.Item("U_RUT").Value))
                            emisor.RUCEmisor = oRSMyTable.Fields.Item("U_RUT").Value;

                        emisor.RznSoc = oRSMyTable.Fields.Item("U_RAZ_SOC").Value;
                        emisor.NomComercial = oRSMyTable.Fields.Item("U_NOM_COM").Value;
                        //if (String.IsNullOrEmpty(emisor.NomComercial)) // Si no tiene un Alias entonces le cargo la Razon Social
                        //    emisor.NomComercial = emisor.RznSoc;
                        emisor.GiroEmis = "";
                        emisor.Telefono = oRSMyTable.Fields.Item("U_TEL1").Value;
                        emisor.CorreoEmisor = oRSMyTable.Fields.Item("U_EMAIL").Value;
                        emisor.EmiSucursal = oRSMyTable.Fields.Item("U_NOM_COM").Value;
                        emisor.CdgDGISucur = oRSMyTable.Fields.Item("Code").Value;
                        emisor.DomFiscal = oRSMyTable.Fields.Item("U_DOMICILIO").Value;
                        emisor.Ciudad = oRSMyTable.Fields.Item("U_LOC").Value;
                        emisor.Departamento = oRSMyTable.Fields.Item("U_DEPTO").Value;  // obtenerDepartamento(oRSMyTable.Fields.Item("U_DEPTO").Value);
                        emisor.InfoAdicionalEmisor = ""; // Nueva Version Sicfe

                        try
                        {
                            // Aca verifica el modo de impresión de la Sucursal
                            if (oRSMyTable.Fields.Item("U_MODO_IMPRESION").IsNull() == BoYesNoEnum.tNO)
                            {
                                softwareImpresion = "Acrobat"; // Cambio el modo de impresión a Acrobat
                                string modoImpreSucursal = oRSMyTable.Fields.Item("U_MODO_IMPRESION").Value;
                                if (modoImpreSucursal.ToString().Equals("CYR")) // Configurado para imprimir por Crystal Report
                                    imprimePDFDefecto = false;
                                else if (modoImpreSucursal.ToString().Equals("PDF")) // Configurado para imprimir por PDF
                                    imprimePDFDefecto = true;
                                else if (modoImpreSucursal.ToString().Equals("NOI")) // Configurado para NO IMPRIMIR de ningun modo
                                {
                                    imprimePDFDefecto = true; // Lo cambio a true para que entre en la funcion imprimirPDF donde tengo el control para que no imprima
                                    noImprimeNingunModo = true;
                                }
                                else if (modoImpreSucursal.ToString().Equals("FOX")) // Configurado para imprimir por Foxit Reader
                                {
                                    imprimePDFDefecto = true; // Lo cambio a true para que entre en la funcion imprimirPDF donde tengo el control para que no imprima
                                    softwareImpresion = "Foxit"; // Cambio el modo de impresión a Foxit Reader
                                }
                            }
                        }
                        catch (Exception ex)
                        { }

                        try
                        {
                            if (oRSMyTable.Fields.Item("U_TEMPLATE").IsNull() == BoYesNoEnum.tNO) // Toma el Template de la Sucursal 
                                sicfeTemplate = oRSMyTable.Fields.Item("U_TEMPLATE").Value;
                            else
                                sicfeTemplate = "";

                            if (oRSMyTable.Fields.Item("U_CLIENTE").IsNull() == BoYesNoEnum.tNO) // Toma el Cliente de la Sucursal 
                                sicfeCliente = oRSMyTable.Fields.Item("U_CLIENTE").Value;
                            else
                                sicfeCliente = "";

                            if (oRSMyTable.Fields.Item("U_NOMBRE_IMPRESORA").IsNull() == BoYesNoEnum.tNO)
                                impresoraNombre = oRSMyTable.Fields.Item("U_NOMBRE_IMPRESORA").Value; // Nombre de la impresora
                            else
                                impresoraNombre = "";
                        }
                        catch (Exception exx)
                        { guardaLogProceso(codigoFactura.ToString(), codigoFactura.ToString(), "ERROR al buscar datos de template e impresora", exx.Message.ToString()); }
                        cargados = true;

                        oRSMyTable.MoveNext();
                    }
                }

                rucEmisorSicfe = emisor.RUCEmisor;

                oRSMyTable = null;

                ////////SAPbobsCOM.Recordset oRSMyTable = null;
                ////////oRSMyTable = obtenerDatosEmisor();

                ////emisor.RUCEmisor = rucEmisorSicfe.ToString(); // "110050930013";

                ////////if (oRSMyTable != null)
                ////////{
                ////////    while (!oRSMyTable.EoF)
                ////////    {
                ////////        emisor.RznSoc = oRSMyTable.Fields.Item("CompnyName").Value;
                ////////        emisor.NomComercial = oRSMyTable.Fields.Item("AliasName").Value;
                ////////        if (String.IsNullOrEmpty(emisor.NomComercial)) // Si no tiene un Alias entonces le cargo la Razon Social
                ////////            emisor.NomComercial = emisor.RznSoc;
                ////////        emisor.GiroEmis = "";
                ////////        emisor.Telefono = oRSMyTable.Fields.Item("Phone1").Value;
                ////////        emisor.CorreoEmisor = oRSMyTable.Fields.Item("E_mail").Value;
                ////////        emisor.EmiSucursal = oRSMyTable.Fields.Item("PrintHeadr").Value;
                ////////        emisor.CdgDGISucur = "1";
                ////////        emisor.DomFiscal = oRSMyTable.Fields.Item("Street").Value;
                ////////        emisor.Ciudad = oRSMyTable.Fields.Item("City").Value;
                ////////        emisor.Departamento = obtenerDepartamento(oRSMyTable.Fields.Item("State").Value);

                ////////        oRSMyTable.MoveNext();
                ////////    }
                ////////}

                if (!cargados) // Si no fueron cargados se carga por defecto
                {
                    if (descEmpresa.ToString().Equals("TENTA"))
                    {
                        emisor.RznSoc = "La Tentación SRL";
                        emisor.NomComercial = "La Tentación";
                        emisor.GiroEmis = "";
                        //String[] tels = new String[2];
                        //tels[0] = "22969001";
                        //tels[1] = "22969060";
                        //emisor.Telefono = tels;
                        emisor.Telefono = "22969001";
                        emisor.CorreoEmisor = "tentasrl@adinet.com.uy";
                        emisor.EmiSucursal = "La Tentación Toledo";
                        emisor.CdgDGISucur = "1";
                        emisor.DomFiscal = "Ruta 6 Km. 22.800";
                        emisor.Ciudad = "Toledo";
                        emisor.Departamento = "Canelones";
                        emisor.InfoAdicionalEmisor = "";
                    }
                    //if (emisor.Ciudad.ToString().Equals(emisor.Departamento.ToString())) // Para que no se repitan si son iguales envío Departamento vacío.
                    //    emisor.Departamento = "";
                }

                if (emisor.EmiSucursal.ToString().Length > 20)
                    emisor.EmiSucursal = emisor.EmiSucursal.ToString().Substring(0, 20);
                if (emisor.Ciudad.ToString().Length > 30)
                    emisor.Ciudad = emisor.Ciudad.ToString().Substring(0, 30);
                if (emisor.Departamento.ToString().Length > 70)
                    emisor.Departamento = emisor.Departamento.ToString().Substring(0, 30);
                if (emisor.DomFiscal.ToString().Length > 70)
                    emisor.DomFiscal = emisor.DomFiscal.ToString().Substring(0, 70);
                if (emisor.NomComercial.ToString().Length > 30)
                    emisor.NomComercial = emisor.NomComercial.ToString().Substring(0, 30);
                if (emisor.RznSoc.ToString().Length > 150)
                    emisor.RznSoc = emisor.RznSoc.ToString().Substring(0, 150);
                if (emisor.Telefono.ToString().Length > 20)
                    emisor.Telefono = emisor.Telefono.ToString().Substring(0, 20);
                if (emisor.InfoAdicionalEmisor.ToString().Length > 150)
                    emisor.InfoAdicionalEmisor = emisor.InfoAdicionalEmisor.ToString().Substring(0, 150);

                return emisor;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", codigoFactura, "ERROR al Cargar el Emisor", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("Error al cargar el Emisor" + ex.Message);
            }
            return emisor;
        }

        public String GenerarXmlFactura(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                TotalesRetencPercep[] arrayRetPer = null; RetPerc[] arrayItemRetPer = null;
                int cantLineasDocumento = oRSMyTable3.RecordCount;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                double recargoCliente = 0; double saldoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal redondeoDocumento = 0; decimal montoTotalRetenciones = 0; bool hayItemRedondeo = false;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                bool esContingencia = false; int documentoBaseRural = 0;
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                int idUserDoc = 0; decimal cantPiezas = 0;
                bool ocultoDescuento = true;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();
                                strCta = oRSMyTable3.Fields.Item("AcctCode").Value; //Guardo Cta
                                // Me quedo con la tabla de Retenciones
                                if (descEmpresa.Equals("HENDE"))
                                {
                                    oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry, pFormFactura); // Obtengo las Retenciones del documento
                                    arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                    arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                }

                                idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("CARTEL ERROR al obtener el DocEntry");
                            }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        int numRojo = 0;

                                        if (descEmpresa.ToString().Equals("BOSCH"))
                                            numRojo = oRSMyTable.Fields.Item("U_NUMROJO").Value;
                                        else
                                            numRojo = oRSMyTable.Fields.Item("U_NumFactura").Value;

                                        if (numRojo != 0)
                                        {
                                            DateTime fechaDocContingencia = oRSMyTable.Fields.Item("DocDate").Value;
                                            DateTime fechaIniContingencia = Convert.ToDateTime("01/04/2015");
                                            DateTime fechaFinContingencia = Convert.ToDateTime("29/02/2016");
                                            if (fechaDocContingencia >= fechaIniContingencia && fechaDocContingencia <= fechaFinContingencia || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                            {
                                                //if ((descEmpresa.ToString().Equals("BOSCH") && numRojo >= 7901 && numRojo <= 10400 && fechaDocContingencia >= Convert.ToDateTime("01/04/2015")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                if ((descEmpresa.ToString().Equals("BOSCH") && fechaDocContingencia < Convert.ToDateTime("01/03/2016")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                {
                                                    idDoc.Nro = numRojo.ToString();
                                                    idDoc.Serie = "A";
                                                    if (descEmpresa.ToString().Equals("BOSCH"))
                                                        idDoc.Serie = "B";
                                                    esContingencia = true;
                                                }
                                            }
                                        }
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Verificar Doc Contingencia", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                else
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null)
                                {
                                    idDoc.FchVencSpecified = false;
                                }
                                else
                                {
                                    idDoc.FchVencSpecified = true;
                                }
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = false;

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                else
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;

                                // VERIFICACION DEL INDICADOR PARA BOSCH REMILER Y SOLGEO
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                        if (indicador.ToString().Equals("01")) // Es contado
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                        else if (indicador.ToString().Equals("02")) // Es credito
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();

                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                receptor.DirRecep = oRSMyTable.Fields.Item("Address").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                bool agregoCeroRUT = false; // Indica si le agrega un 0 adelante al RUT

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; // Le cargo la direccion de correo electronico
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";

                                        receptor.LugarDestEnt = "";

                                        if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                        if (descEmpresa.ToString().Equals("ETARE"))
                                            saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("INVEN")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }


                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                            {
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                            }
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                                agregoCeroRUT = true;
                                            }
                                            else
                                            {
                                                tipo = "eTck";
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                            else
                                            {
                                                // Si no es un cliente Uruguayo
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4;
                                                tipo = "eTck";
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                {
                                    // Para el nuevo cambio de Trialand
                                    if (!tipo.Equals("eTck") && ObtenerClienteVatStatusExtranjero(codCliente, "C") == true)
                                    {
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        receptor.TipoDocRecep = DocType.Item4;
                                    }
                                }

                                try
                                {
                                    //if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    //    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    if (receptor.TipoDocRecep == DocType.Item4)
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;

                                        if (tipo.ToString().Equals("eFact") && agregoCeroRUT == true)
                                        {   // Entonces es eTicket. No puede hacer una eFactura a un cliente que no sea RUT Uruguayo
                                            tipo = "eTck";
                                            encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                            receptor.DocRecep = receptor.DocRecep.ToString().Substring(1, receptor.DocRecep.Length - 1);
                                        }

                                        /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                        {
                                            if (receptor.CodPaisRecep != CodPaisType.UY)
                                                esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                            else
                                                esDocUruguayo = true;
                                        }*/
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo
                                }
                                catch (Exception e)
                                {
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando Cliente Ext", e.Message.ToString()); // Guarda log del Proceso
                                }

                                if (descEmpresa.ToString().Equals("ETARE"))
                                {
                                    if (codCliente.ToUpper().Contains("PPL") || codCliente.ToUpper().Contains("ETY") || codCliente.ToUpper().Contains("INR") || receptor.RznSocRecep.ToUpper().Contains("PPL") || receptor.RznSocRecep.ToUpper().Contains("ETY") || receptor.RznSocRecep.ToUpper().Contains("INR"))
                                    {
                                        esDocUruguayo = false;
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "-";
                                        receptor.RznSocRecep = "";
                                        receptor.CodPaisRecep = CodPaisType.Item99;
                                    }
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 30)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                /*// Nueva validación porque en algunos casos quedaba UY y con DocRecepExt
                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                    esDocUruguayo = true;
                                else
                                    esDocUruguayo = false;
                                */

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar Receptor", e.Message.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = true;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("TECHM") || descEmpresa.ToString().Equals("MAVIN"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                    {
                                        redondeoDocumento = 0;
                                    }
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }


                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if (descEmpresa.ToString().Equals("TENTA") && descuent != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (descuent < 0 && descuent > -1)
                                                descuent = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            if (String.IsNullOrEmpty(documentoBaseRural.ToString()) || documentoBaseRural == 0)
                                                documentoBaseRural = (int)oRSMyTable3.Fields.Item("BaseDocNum").Value; // Me guardo el documento Base para el Adenda

                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA") && !descEmpresa.ToString().Equals("TRIAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                                {
                                                    if (String.IsNullOrEmpty(oRSMyTable3.Fields.Item("U_EXX_ITEMFACTURA").Value))
                                                        item.NomItem = item.DscItem + " - " + item.NomItem;
                                                    else
                                                        item.NomItem = oRSMyTable3.Fields.Item("U_EXX_ITEMFACTURA").Value + " - " + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("MILDA"))
                                                {
                                                    try
                                                    {
                                                        item.NomItem = item.NomItem + " " + oRSMyTable3.Fields.Item("U_Marca").Value + " " + oRSMyTable3.Fields.Item("U_Campana").Value + " " + oRSMyTable3.Fields.Item("U_UBICACION").Value;
                                                        DateTime fechaInicioM = oRSMyTable3.Fields.Item("U_Inicio").Value;
                                                        DateTime fechaFinM = oRSMyTable3.Fields.Item("U_Fin").Value;
                                                        if (fechaInicioM.Year > 2000) // Si tiene una Fecha correcta
                                                            item.NomItem = item.NomItem + " " + fechaInicioM.ToShortDateString() + "-" + fechaFinM.ToShortDateString();
                                                    }
                                                    catch (Exception exM)
                                                    { }
                                                }
                                                else if (descEmpresa.ToString().Equals("TECHM"))
                                                    item.UniMed = "Uni";

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            if (descEmpresa.ToString().Equals("GENIA"))
                                            {
                                                try
                                                {   // Verifica si hay líneas de Texto
                                                    int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                                    string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                    item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc.ToString());
                                                }
                                                catch (Exception ex)
                                                { }
                                            }

                                            if (descEmpresa.ToString().Equals("CABIN"))
                                            {
                                                string iCode = oRSMyTable3.Fields.Item("ItemCode").Value;
                                                int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                                string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                item.DscItem = obtenerLote(iCode, codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc);
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Moneda y TipoCambio", moneda.ToString() + " - Cot " + monedaArticulo.ToString() + ex.Message.ToString()); // Guarda log del Proceso
                                        }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        //if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")))// Si el documento es en Pesos
                                        //    montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (descuent == 0 || (descEmpresa.ToString().Equals("BOSCH") && descuent != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                //if (moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) // Si el documento es en Pesos
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
                                                else
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2);

                                            if (moneda.ToString().Equals(monedaArticulo)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3);
                                        }

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) // Solo si es ANCAL
                                                    {
                                                        if (ocultoDescuento == true)
                                                            imprimeDescuento = false;
                                                        else
                                                            imprimeDescuento = true;
                                                    }
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                                    if (descuent != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                                            if (descuent != 0)
                                                                precioUni = precioUni * (1 - descuent / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (descuent > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && descuent > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                    item.DescuentoPct += descuent;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct += descuent;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("CIMSA") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("MAVIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = descuent;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("TECHM"))
                                        {
                                            if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                                        if (item.DescuentoPct != 0 && descuent <= 0)
                                                            item.DescuentoMontoSpecified = true;
                                                    }
                                                }
                                            }
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        /*if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        int contadorRetenciones = 0;
                                        if (oRSMyTableRetenciones != null)
                                        {
                                            try
                                            {
                                                while (!oRSMyTableRetenciones.EoF)
                                                {
                                                    try
                                                    {
                                                        decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                                        //TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep(); // Comentado 22/06
                                                        //totRetPerUnidad.CodRet = (string)oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                                        //totRetPerUnidad.ValRetPerc = montoItemRetencion;
                                                        //arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                                        montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                                        //RetPerc itemRetPer = new RetPerc(); // Comentado 22/06
                                                        //itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                                        //itemRetPer.MntSujetoaRet = item.MontoItem; // totRetPerUnidad.ValRetPerc;
                                                        //itemRetPer.Tasa = Math.Round((100 * totRetPerUnidad.ValRetPerc) / item.MontoItem, 2);
                                                        //itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                                        //arrayItemRetPer[contadorRetenciones] = itemRetPer;
                                                        //contadorRetenciones++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                    }
                                                    oRSMyTableRetenciones.MoveNext();
                                                }
                                                //item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount]; // Comentado 22/06
                                                //item.RetencPercep = arrayItemRetPer;
                                            }
                                            catch (Exception ex)
                                            {
                                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR RetenPercep agregando items al XML", ex.Message.ToString());
                                            }
                                        }

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else if ((iva == 0 || imp.ToString().Equals("IVA_AEX")) && descEmpresa.ToString().Equals("OBRIN")) //ASPL - 2021.06.30 - Si es tasa 0 de exportacion y asimiladas, y Obrinel.
                                            {
                                                TotalItemsNoGravados += 0;
                                                item.IndFact = Item_Det_FactIndFact.Item10;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            if (esNuevaVersionDGI)
                                                montoDescUni = item.DescuentoMonto / item.Cantidad;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;

                                                    if (descuent != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;

                                                    if (descuent != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVABasico += item.MontoItem;
                                                    //TotalIVABasico += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        // NUEVA VALIDACION PARA DREGAL
                                        if (descEmpresa.ToString().Equals("DREG"))
                                        {
                                            if (item.DescuentoMonto == 0)
                                            {
                                                try
                                                {
                                                    decimal montoCalculadoPrecio = (item.MontoItem / item.Cantidad) - item.DescuentoMonto;
                                                    if (Math.Round(item.PrecioUnitario, 2) != Math.Round(montoCalculadoPrecio, 2)) // Si el Monto de la Linea y el Monto del Item son distintos
                                                        if (((item.PrecioUnitario - montoCalculadoPrecio) < 1 && (item.PrecioUnitario - montoCalculadoPrecio) > -1) || ((montoCalculadoPrecio - item.PrecioUnitario) < 1 && (montoCalculadoPrecio - item.PrecioUnitario) > -1)) // Si la diferencia es de centésimos
                                                            item.PrecioUnitario = Math.Round(montoCalculadoPrecio, 3);
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al recalcular montoItem Dreghal", ex.Message.ToString()); // Guarda log del Proceso
                                                }
                                            }

                                            //item.PrecioUnitario = item.MontoItem; // Solo para un documento especial
                                        }

                                        if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA"))
                                        {
                                            // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                            if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                                if (item.MontoItem != item.PrecioUnitario)
                                                    item.PrecioUnitario = item.MontoItem;
                                        }

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2);
                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        //// CODIGO PARA LAS RETENCIONES
                                        //try
                                        //{
                                        //    Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[1];
                                        //    RetPerc[] arrayItemRetPer = new RetPerc[1];

                                        //    Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                        //    //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                        //     totRetPerUnidad.CodRet = oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                        //    totRetPerUnidad.ValRetPerc = montoTotalLinea;
                                        //    arrayRetPer[cont] = totRetPerUnidad;

                                        //    RetPerc itemRetPer = new RetPerc();
                                        //    itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                        //    itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                        //    itemRetPer.Tasa = 0;
                                        //    itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                        //    arrayItemRetPer[cont] = itemRetPer;
                                        //    //item.RetencPercep[0] = itemRetPer;
                                        //    item.RetencPercep = new RetPerc[oRSMyTable3.RecordCount];
                                        //    item.RetencPercep[0] = arrayItemRetPer[cont];
                                        //}
                                        //catch (Exception ex)
                                        //{
                                        //    if (guardaLog == true)
                                        //        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                        //}
                                        //// FINAL CODIGO RETENCIONES//

                                        // VERIFICO SI TIENE RETENCIONES
                                        //oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry); // Obtengo las Retenciones del documento
                                        ////TotalesRetencPercep[] arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                        ////RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];


                                        // SE CAMBIO PARA MAS ARRIBA, PARA QUE DESCONTARA DEL TOTAL DE LA LINEA LA RETENCIÓN REALIZADA
                                        ////int contadorRetenciones = 0;
                                        ////if (oRSMyTableRetenciones != null)
                                        ////{
                                        ////    try
                                        ////    {
                                        ////        while (!oRSMyTableRetenciones.EoF)
                                        ////        {
                                        ////            try
                                        ////            {
                                        ////                decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                        ////                TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep();
                                        ////                totRetPerUnidad.CodRet = (string)oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                        ////                totRetPerUnidad.ValRetPerc = montoItemRetencion;
                                        ////                arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                        ////                montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                        ////                RetPerc itemRetPer = new RetPerc();
                                        ////                itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                        ////                itemRetPer.MntSujetoaRet = item.MontoItem; // totRetPerUnidad.ValRetPerc;
                                        ////                itemRetPer.Tasa = Math.Round((100 * totRetPerUnidad.ValRetPerc) / item.MontoItem, 2);
                                        ////                itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                        ////                arrayItemRetPer[contadorRetenciones] = itemRetPer;
                                        ////                contadorRetenciones++;
                                        ////            }
                                        ////            catch (Exception ex)
                                        ////            {
                                        ////                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                        ////            }
                                        ////            oRSMyTableRetenciones.MoveNext();
                                        ////        }
                                        ////        item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount]; //Las comento para que el documento no salga con Retenciones
                                        ////        item.RetencPercep = arrayItemRetPer;
                                        ////    }
                                        ////    catch (Exception ex)
                                        ////    {
                                        ////        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR RetenPercep agregando items al XML", ex.Message.ToString());
                                        ////    }
                                        ////}

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            redondeoDocumento = Math.Round(redondeoDocumento, 2);
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";
                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;
                                            //montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }

                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.Cantidad = Math.Round(item.Cantidad, 3);
                                                item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar los items", e.Message.ToString());
                            }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }
                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                ////if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                ////    descuent = 0;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }

                                if (totales.MntNetoIvaTasaMin == 0)
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                else
                                    totales.MntNetoIvaTasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }

                                if (totales.MntNetoIVATasaBasica == 0)
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                else
                                    totales.MntNetoIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }

                                if (totales.MntNetoIVAOtra == 0)
                                    totales.MntNetoIVAOtraSpecified = false;
                                else
                                    totales.MntNetoIVAOtraSpecified = true;

                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                    totales.MntIVATasaMinSpecified = false;
                                else
                                    totales.MntIVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                    totales.MntIVATasaBasicaSpecified = false;
                                else
                                    totales.MntIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }

                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                ////// VERIFICO SI TIENE RETENCIONES
                                //////oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry); // Obtengo las Retenciones del documento
                                ////TotalesRetencPercep[] arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                ////RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                ////int contadorRetenciones = 0;
                                ////if (oRSMyTableRetenciones != null)
                                ////{
                                ////    while (!oRSMyTableRetenciones.EoF)
                                ////    {
                                ////        try
                                ////        {
                                ////            decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                ////            TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep();
                                ////            totRetPerUnidad.CodRet = oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                ////            totRetPerUnidad.ValRetPerc = montoItemRetencion;
                                ////            arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                ////            montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                ////            RetPerc itemRetPer = new RetPerc();
                                ////            itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                ////            itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                ////            itemRetPer.Tasa = 0;
                                ////            itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                ////            arrayItemRetPer[contadorRetenciones] = itemRetPer;

                                ////            factura.Detalle[0].RetencPercep = new RetPerc[1]; //Las comento para que el documento no salga con Retenciones
                                ////            factura.Detalle[0].RetencPercep[0] = itemRetPer;
                                ////        }
                                ////        catch (Exception ex)
                                ////        {
                                ////            if (guardaLog == true)
                                ////                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                ////        }
                                ////        oRSMyTableRetenciones.MoveNext();
                                ////    }
                                ////}

                                ////if (montoTotalRetenciones != 0) // Si tiene Retenciones // Comentado 22/06
                                ////{
                                ////    try
                                ////    {
                                ////        montoTotalRetenciones = Math.Round(montoTotalRetenciones, 2);
                                ////        totales.MntTotRetenido = montoTotalRetenciones;
                                ////        totales.MntTotRetenidoSpecified = true;

                                ////        totales.RetencPercep = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                ////        totales.RetencPercep = arrayRetPer;
                                ////    }
                                ////    catch (Exception ex)
                                ////    { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Cargando RetenPercep en Totales", ex.Message.ToString()); }
                                ////}

                                totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                // Se comento el 22/12 por problemas con las facturas de descuento 100%
                                // NUEVA LINEA POR PROBLEMAS DEL MONTONETO DE IVA
                                if (descEmpresa.ToString().Equals("ALMEN") && esNuevaVersionDGI == true && descuent == 100)
                                {
                                    TotalItemsGravadosIVABasico = 0; TotalItemsGravadosIVAMinimo = 0; TotalItemsGravadosIVAOtra = 0;
                                    TotalIVABasico = 0; TotalIVAMinimo = 0; TotalIVAOtra = 0;
                                    totales.MntPagar = 0; totales.MntTotal = 0;
                                    //descuent = 0;
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv > -1) && redondeoDocumento == 0)
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                        }
                                    }
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal || (hayItemRedondeo == true && redondeoDocumento != 0))
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento && totales.MntPagar != totales.MntTotal + (redondeoDocumento * -1))
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }
                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                //if (montoTotalRetenciones != 0) // Comentado 22/06
                                //    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                if (totales.TpoMoneda != TipMonType.UYU)
                                {
                                    totales.TpoCambioSpecified = true;
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        //if (totales.TpoCambio != 0)
                                        //    totales.TpoCambioSpecified = true;
                                        //else
                                        //    totales.TpoCambioSpecified = false;
                                    }
                                }
                                else
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;

                                totales.MontoNF = redondeoDocumento;

                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                encabezado.Totales = totales;
                                ////encabezado.Totales.RetencPercep = arrayRetPer; // No las agrego al documento

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar el Encabezado", ex.Message.ToString());
                            }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        descuento.GlosaDR = "";


                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    factura.Encabezado.Totales.MntNoGrvSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                    montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                else
                                                {
                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);
                                                }

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }

                                                /*if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                {
                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item2; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(valorDR, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }
                                                else
                                                {
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }*/
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                if (esContado == true) // Si es un documento contado
                                {
                                    if (!String.IsNullOrEmpty((string)oRSMyTable.Fields.Item("U_MEDIO_PAGO_DGI").Value))
                                    {
                                        MediosPagoMedioPago[] arrayMedios = new MediosPagoMedioPago[1];
                                        MediosPagoMedioPago mediosPago = new MediosPagoMedioPago();

                                        mediosPago.NroLinMP = "1";
                                        mediosPago.CodMP = "1";
                                        mediosPago.GlosaMP = obtenerDescripcionMedioPago((string)oRSMyTable.Fields.Item("U_MEDIO_PAGO_DGI").Value);
                                        mediosPago.OrdenMP = "1";
                                        mediosPago.ValorPago = factura.Encabezado.Totales.MntPagar;
                                        arrayMedios[0] = mediosPago;
                                        factura.MediosPago = arrayMedios;
                                    }
                                }
                            }
                            catch (Exception ex)
                            { }

                            string saltoLinea = "<br>";
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                saltoLinea = "\r\n";

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + saltoLinea;// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + saltoLinea; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL") && !descEmpresa.ToString().Equals("TECHM"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + saltoLinea; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                            {
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + saltoLinea; // Forma de Pago 
                                sicfeAdenda += "Contribuyente amparado a la Ley 15.921" + saltoLinea; // ASPL. 2019-06-12, Nueva leyenda.
                            }

                            if (descEmpresa.ToString().Equals("DREG")) // Si es Dreghal
                            {
                                // Armo el adenda desde 0
                                int numeroPedido = 0; string monedaLetras = "Pesos Uruguayos"; string ordenCompra = "";
                                try
                                {
                                    SAPbobsCOM.Recordset oRSMyTableAdenda = ObtenerDatosPreviosDocumento(codigoFactura, pFormFactura);
                                    if (oRSMyTableAdenda != null)
                                    {
                                        while (!oRSMyTableAdenda.EoF)
                                        {
                                            numeroPedido = oRSMyTableAdenda.Fields.Item("Num_Pedido").Value;
                                            oRSMyTableAdenda.MoveNext();
                                        }
                                    }

                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableAdenda);
                                    oRSMyTableAdenda = null;

                                    if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                        monedaLetras = "Dólares Americanos";
                                    else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                        monedaLetras = "Euros";
                                    else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                        monedaLetras = "Pesos Chilenos";

                                    try
                                    {
                                        ordenCompra = oRSMyTable.Fields.Item("U_ORDEN_COMPRA").Value;
                                    }
                                    catch (Exception ex)
                                    { }
                                }
                                catch (Exception ex)
                                { }

                                //sicfeAdenda = "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                                sicfeAdenda += "Forma.de pago: " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "\r\n"; // Forma de Pago 
                                sicfeAdenda += "Número de pedido: " + numeroPedido + "\r\n";
                                sicfeAdenda += "Usuario: " + obtenerUsuarioCreadorDocumento(idUserDoc) + "\r\n"; // Usuario que creo el documento 
                                sicfeAdenda += "Orden de compra: " + ordenCompra.ToString() + "\r\n";
                                sicfeAdenda += "Moneda: " + monedaLetras.ToString() + "\r\n";
                                sicfeAdenda += "Forma de envío: " + obtenerFormaEnvio(oRSMyTable.Fields.Item("TrnspCode").Value) + "\r\n"; // Forma de Envio 
                                sicfeAdenda += "Vendedor: " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                                sicfeAdenda += "Comentarios: " + oRSMyTable.Fields.Item("Header").Value + "\r\n"; // Comentarios Iniciales
                            }
                            else if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "Obs. Cliente: " + oRSMyTable.Fields.Item("U_Obcli").Value + "SALTOLINEA"; // Observaciones del Cliente 
                                sicfeAdenda += "Contacto: " + oRSMyTable.Fields.Item("U_CONTACTO").Value + "SALTOLINEA";
                                sicfeAdenda += "Telefono: " + oRSMyTable.Fields.Item("U_TELEFONO").Value + "SALTOLINEA";
                                sicfeAdenda += "Documento Interno: " + codigoFactura.ToString() + "SALTOLINEA";
                                sicfeAdenda += "Documento Enlazado: " + documentoBaseRural.ToString() + "SALTOLINEA";
                                sicfeAdenda += "Responsable: " + obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "SALTOLINEA";
                                sicfeAdenda += "Transportista: " + ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura) + "SALTOLINEA";
                                sicfeAdenda += "Orden Compra: " + oRSMyTable.Fields.Item("U_ORDCOMPRA").Value + "SALTOLINEA";
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "SALTOLINEA"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                            {
                                sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); // + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago Cambio 26/6/20
                            }
                            else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                            {
                                sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                if (montoTotalRetenciones != 0)
                                    sicfeAdenda += "Monto Retención: " + Math.Round(montoTotalRetenciones, 2).ToString();
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    sicfeAdenda += "Cambio 30 días <br>";
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                            else if (descEmpresa.ToString().Equals("ETARE"))
                            {
                                if (factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item111 && factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item211)
                                    sicfeAdenda += "Saldo: UYU " + saldoCliente + "<br>"; // Saldo si es eTicket o NC de eTicket
                            }
                            else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                sicfeAdenda += obtenerRemarks(13) + "\r\n";
                            //ASPL - 2019.01.21 - DGI Resolución Nº 231/2019, empresas de Zona Franca deberán indicar la leyenda.
                            else if (descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("WELLS"))
                                sicfeAdenda += "Contribuyente amparado a la Ley N° 15.921";
                            //ASPL - 2019.03.12 - AcctCode = '4-1-010-10-000' or '4-1-010-30-000' 
                            //ASPL - 2019.10.07 - AcctCode = '4-1-020-10-000'
                            else if (descEmpresa.ToString().Equals("INVEN"))
                            {
                                if (strCta == "4-1-010-10-000" || strCta == "4-1-010-30-000" || strCta == "4-1-010-40-000")
                                {
                                    sicfeAdenda += "Facturación por Servicios" + saltoLinea;
                                    sicfeAdenda += "Servicios exonerados por Artículo 161 bis ii Decreto 150/007" + saltoLinea + "<br>";
                                }
                                //ASPL - 2020.08.16 - Datos bancarios deberían salir en todas las facturas.
                                sicfeAdenda += "Banco: BANCO BILBAO VIZCAYA ARGENTARIA URUGUAY S.A. - MONTEVIDEO URUGUAY" + saltoLinea;
                                sicfeAdenda += "Swift code: BBVAUYMM" + saltoLinea;
                                sicfeAdenda += "Dirección: 25 DE MAYO 401 MONTEVIDEO - URUGUAY" + saltoLinea;
                                sicfeAdenda += "BENEFICIARIO FINAL: MARBUS S.A." + saltoLinea;
                                sicfeAdenda += "NUMERO DE CUENTA: 993601992" + saltoLinea;
                            }

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA")) // Si es La Tentacion
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            //SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            return result;
        }

        public String generarXmlFacturaNuevo(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";

            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                int cantLineasDocumento = 0;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                double recargoCliente = 0; double saldoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal redondeoDocumento = 0; decimal montoTotalRetenciones = 0; bool hayItemRedondeo = false;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                bool esContingencia = false; bool esVentaCtaAjena = false; string documentoBaseRural = "";
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                clsObjDocumento objDoc = new clsObjDocumento();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                decimal cantPiezas = 0;
                bool ocultoDescuento = true;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                cantLineasDocumento = objDoc.lineas.Count; // Cantidad de líneas del documento
                                getIdSucursal(objDoc.UserSign); // Actualizo el id de la Sucursal
                                codigoDocEntry = objDoc.DocEntry.ToString();

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }

                                oRSMyTableRetenciones = ObtenerRetencionesDocumento(objDoc.DocEntry.ToString(), pFormFactura); // Obtengo las Retenciones del documento
                            }
                            catch (Exception ex)
                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Obtener objetoDocumento", ex.Message.ToString()); }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                string indicador = oRSMyTable.Fields.Item("Indicator").Value;
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        int numRojo = 0;

                                        if (descEmpresa.ToString().Equals("BOSCH"))
                                            numRojo = oRSMyTable.Fields.Item("U_NUMROJO").Value;
                                        else
                                            numRojo = oRSMyTable.Fields.Item("U_NumFactura").Value;

                                        if (numRojo != 0)
                                        {
                                            DateTime fechaDocContingencia = oRSMyTable.Fields.Item("DocDate").Value;
                                            DateTime fechaIniContingencia = Convert.ToDateTime("01/04/2015");
                                            DateTime fechaFinContingencia = Convert.ToDateTime("29/02/2016");
                                            if (fechaDocContingencia >= fechaIniContingencia && fechaDocContingencia <= fechaFinContingencia || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                            {
                                                //if ((descEmpresa.ToString().Equals("BOSCH") && numRojo >= 7901 && numRojo <= 10400 && fechaDocContingencia >= Convert.ToDateTime("01/04/2015")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                if ((descEmpresa.ToString().Equals("BOSCH") && fechaDocContingencia < Convert.ToDateTime("01/03/2016")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                {
                                                    idDoc.Nro = numRojo.ToString();
                                                    idDoc.Serie = "A";
                                                    if (descEmpresa.ToString().Equals("BOSCH"))
                                                        idDoc.Serie = "B";
                                                    esContingencia = true;
                                                }
                                            }
                                        }
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Verificar Doc Contingencia", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                else
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Setear datos de Contingencia", ex.Message.ToString()); }
                                    }
                                }

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al obtener LicTradNum", ex.Message.ToString()); }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                if (!descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.04.14 Cambio por nuevo layout de SCIFE.
                                    idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null || idDoc.FchVenc == Convert.ToDateTime("01-01-0001"))
                                    idDoc.FchVencSpecified = false;
                                else
                                    idDoc.FchVencSpecified = true;

                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2019-10-10 Condiciones de pago segun criterio, Almacen Rural. 2020-04-27, Condicion de pago sin criterios.
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2019.10.10 Cambio por nuevo layout de SCIFE.
                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago;
                                else
                                    idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = false;

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                { idDoc.FmaPago = IdDoc_FactFmaPago.Item1; esContado = true; }
                                else
                                { idDoc.FmaPago = IdDoc_FactFmaPago.Item2; esContado = false; }

                                // VERIFICACION DEL INDICADOR PARA BOSCH REMILER Y SOLGEO
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        if (indicador.ToString().Equals("01")) // Es contado
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                        else if (indicador.ToString().Equals("02")) // Es credito
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                if (descEmpresa.Equals("AEG") && (indicador.ToString().Equals("02") || indicador.ToString().Equals("07"))) // Es Venta por cuenta Ajena
                                    esVentaCtaAjena = true;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();

                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                bool agregoCeroRUT = false; // Indica si le agrega un 0 adelante al RUT

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;

                                        if (descEmpresa.Equals("TRIGE"))
                                        {
                                            string direccionCompleta = oRSMyTable5.Fields.Item("Street").Value + " " + oRSMyTable5.Fields.Item("StreetNo").Value + " " + oRSMyTable5.Fields.Item("Building").Value;
                                            if (!String.IsNullOrEmpty(direccionCompleta))
                                                receptor.DirRecep = direccionCompleta;
                                        }

                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("PaisNombre").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value;
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";

                                        if (descEmpresa.Equals("TRIGE") || descEmpresa.Equals("POCHA") || descEmpresa.Equals("ALMEN"))
                                            receptor.LugarDestEnt = oRSMyTable2.Fields.Item("GlblLocNum").Value;
                                        else if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + objDoc.DireccionEntrega;
                                        else
                                            receptor.LugarDestEnt = objDoc.DireccionFactura;

                                        if (descEmpresa.ToString().Equals("ETARE"))
                                            saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            string prop2ASU = (string)oRSMyTable2.Fields.Item("QryGroup1").Value; // Valida si es un cliente Rondanet
                                            if (!String.IsNullOrEmpty(prop2ASU) && prop2ASU.Equals("Y"))
                                                esClienteASU = true;
                                            else
                                                esClienteASU = false;
                                        }

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }


                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                            {
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                            }
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                                agregoCeroRUT = true;
                                            }
                                            else
                                            {
                                                tipo = "eTck";
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                            else
                                            {
                                                // Si no es un cliente Uruguayo
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4;
                                                tipo = "eTck";
                                            }
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al agregar Receptor", ex.Message.ToString()); }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                {
                                    // Para el nuevo cambio de Trialand
                                    if (!tipo.Equals("eTck") && ObtenerClienteVatStatusExtranjero(codCliente, "C") == true)
                                    {
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        receptor.TipoDocRecep = DocType.Item4;
                                    }
                                }

                                try
                                {
                                    //if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    //    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    if (receptor.TipoDocRecep == DocType.Item4)
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;

                                        if (tipo.ToString().Equals("eFact") && agregoCeroRUT == true)
                                        {   // Entonces es eTicket. No puede hacer una eFactura a un cliente que no sea RUT Uruguayo
                                            tipo = "eTck";
                                            encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                            receptor.DocRecep = receptor.DocRecep.ToString().Substring(1, receptor.DocRecep.Length - 1);
                                        }

                                        /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                        {
                                            if (receptor.CodPaisRecep != CodPaisType.UY)
                                                esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                            else
                                                esDocUruguayo = true;
                                        }*/
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo
                                }
                                catch (Exception e)
                                {
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando Cliente Ext", e.Message.ToString()); // Guarda log del Proceso
                                }

                                if (descEmpresa.ToString().Equals("ETARE"))
                                {
                                    if (codCliente.ToUpper().Contains("PPL") || codCliente.ToUpper().Contains("ETY") || codCliente.ToUpper().Contains("INR") || receptor.RznSocRecep.ToUpper().Contains("PPL") || receptor.RznSocRecep.ToUpper().Contains("ETY") || receptor.RznSocRecep.ToUpper().Contains("INR"))
                                    {
                                        esDocUruguayo = false;
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "-";
                                        receptor.RznSocRecep = "";
                                        receptor.CodPaisRecep = CodPaisType.Item99;
                                    }
                                }

                                /*// Nueva validación porque en algunos casos quedaba UY y con DocRecepExt
                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                    esDocUruguayo = true;
                                else
                                    esDocUruguayo = false;
                                */

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                if (objDoc != null)
                                {
                                    receptor.CompraID = objDoc.U_IdCompra;
                                    if (!descEmpresa.Equals("TRIGE") && !descEmpresa.Equals("POCHA") && !descEmpresa.Equals("MAVIN") && !descEmpresa.Equals("ALMEN"))
                                        receptor.LugarDestEnt = objDoc.DireccionEntrega;
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 30)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar el Receptor", e.Message.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = true;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("TECHM") || descEmpresa.ToString().Equals("MAVIN"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2, MidpointRounding.ToEven) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                    {
                                        redondeoDocumento = 0;
                                    }
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if (descEmpresa.ToString().Equals("TENTA") && objDoc.DescuentoDocPorcentaje != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje < 0 && objDoc.DescuentoDocPorcentaje > -1)
                                                objDoc.DescuentoDocPorcentaje = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                        {
                                            if (!String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural += ", ";

                                            if (!string.IsNullOrEmpty(lineaRec.BaseDocNum) && documentoBaseRural.Contains(lineaRec.BaseDocNum))
                                                documentoBaseRural = documentoBaseRural.Remove(documentoBaseRural.Length - 2);
                                            else
                                                documentoBaseRural += lineaRec.BaseDocNum; // Me guardo el documento Base para el Adenda
                                        }

                                        Item_Det_Fact item = new Item_Det_Fact();
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = lineaRec.DescripcionDocumento;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        //decimal precio = lineaRec.Precio;
                                        item.DescuentoPct = lineaRec.DescuentoPorcentaje;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = lineaRec.ItemCode;
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA") && !descEmpresa.ToString().Equals("TRIAL") && !descEmpresa.ToString().Equals("TRIGE"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = lineaRec.VisOrder.ToString() + "- " + item.DscItem + "-" + lineaRec.U_Marca + "-" + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                                {
                                                    if (String.IsNullOrEmpty(lineaRec.U_ItemFactura))
                                                        item.NomItem = item.DscItem + " - " + item.NomItem;
                                                    else
                                                        item.NomItem = lineaRec.U_ItemFactura + " - " + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("MILDA"))
                                                {
                                                    try
                                                    {
                                                        item.NomItem = item.NomItem + " " + lineaRec.U_Marca + " " + lineaRec.U_Campana + " " + lineaRec.U_Ubicacion;
                                                        if (lineaRec.U_Inicio.Year > 2000) // Si tiene una Fecha correcta
                                                            item.NomItem = item.NomItem + " " + lineaRec.U_Inicio.ToShortDateString() + "-" + lineaRec.U_Fin.ToShortDateString();
                                                    }
                                                    catch (Exception ex)
                                                    { }
                                                }
                                                else if (descEmpresa.ToString().Equals("TECHM"))
                                                    item.UniMed = "Uni";

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = lineaRec.FreeTxt;
                                                else if (descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("CABIN")) //ASPL - 2021.10.15
                                                {
                                                    item.DscItem = lineaRec.LoteBatchNum;
                                                    item.UniMed = lineaRec.UnidadMedida; //ASPL - 2019.11.04, Especificacion de unidad de medida.
                                                }
                                                else
                                                    item.DscItem = "";
                                            }

                                            string codigoEan = ""; string tipoCodigo = "EAN"; int cantLineasCodigo = 1;

                                            if (descEmpresa.ToString().Equals("POCHA"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras)) //ASPL - 2020.03.12 - Cambio de campo U_CodigoRondanet por CodigoBarras
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++;  // Cambio por codigobarras, en vez de si tiene un Código de Rondanet
                                                }

                                                if (!String.IsNullOrEmpty(item.UniMed)) // ASPL - 2019.11.07, Implementacion de unidades de medida para ASU.
                                                {
                                                    if (item.UniMed.Contains("K") || item.UniMed.Contains("k") || item.UniMed.Contains("KILO"))
                                                        item.UniMed = "KGM"; // Kilogramo
                                                    else if (item.UniMed.Contains("Ca") || item.UniMed.Contains("ca") || item.UniMed.Contains("CA"))
                                                        item.UniMed = "CS"; // Caja
                                                    else if (item.UniMed.Contains("litro") || item.UniMed.Contains("Litro"))
                                                        item.UniMed = "LTR"; // Litro
                                                    else
                                                        item.UniMed = "EA"; // Unidad
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("TRIGE"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString(); // lineaRec.CantidadCajas.ToString(); 
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("ALMEN"))
                                            {
                                                item.DscItem = obtenerCantidadCajasAlmena(lineaRec.UgpEntry); //lineaRec.CantidadPorPaqueteVenta.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("ENGRW"))
                                            {
                                                item.NomItem = lineaRec.LoteBatchNum;
                                                item.DscItem = lineaRec.U_FeDescripcion;
                                            }
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                if (esClienteASU == true) // Cliente Rondanet - ASU
                                                {
                                                    string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                    if (dscItem.Length == 0)
                                                        dscItem = "[000CS]";
                                                    else if (dscItem.Length == 1)
                                                        dscItem = "[00" + dscItem + "CS]";
                                                    else if (dscItem.Length == 2)
                                                        dscItem = "[0" + dscItem + "CS]";
                                                    else if (dscItem.Length == 3)
                                                        dscItem = "[" + dscItem + "CS]";

                                                    item.DscItem = dscItem.ToString(); // lineaRec.CantidadCajas.ToString(); 
                                                    item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                    string strCodigoBarra = lineaRec.CodigoBarras; //ObtenerCodigoBarra(item.DscItem); //ASPL - 2019.11.29
                                                    if (!String.IsNullOrEmpty(strCodigoBarra))
                                                    {
                                                        tipoCodigo = "EAN";
                                                        codigoEan = strCodigoBarra; cantLineasCodigo++; // Si tiene Código de Barras
                                                    }
                                                }

                                                //if (cantLineasCodigo > 1)
                                                //{
                                                if (!String.IsNullOrEmpty(item.UniMed))
                                                {
                                                    if (item.UniMed.Contains("K") || item.UniMed.Contains("k") || item.UniMed.Contains("KILO"))
                                                        item.UniMed = "KGM"; // Kilogramo
                                                    else if (item.UniMed.Contains("Ca") || item.UniMed.Contains("ca") || item.UniMed.Contains("CA"))
                                                        item.UniMed = "CS"; // Caja
                                                    else if (item.UniMed.Contains("litro") || item.UniMed.Contains("Litro"))
                                                        item.UniMed = "LTR"; // Litro
                                                    else
                                                        item.UniMed = "EA"; // Unidad
                                                }
                                                //}
                                            }

                                            try
                                            {
                                                if (!descEmpresa.ToString().Equals("TRIAL"))
                                                {
                                                    Item_Det_FactCodItem[] itemDetCodeArray = new Item_Det_FactCodItem[cantLineasCodigo];
                                                    Item_Det_FactCodItem itemDetCode = new Item_Det_FactCodItem();
                                                    itemDetCode.TpoCod = "INT1";
                                                    itemDetCode.Cod = lineaRec.ItemCode;
                                                    itemDetCodeArray[0] = itemDetCode;

                                                    if (cantLineasCodigo > 1)
                                                    {
                                                        itemDetCode = new Item_Det_FactCodItem();
                                                        itemDetCode.TpoCod = tipoCodigo;
                                                        itemDetCode.Cod = codigoEan;
                                                        itemDetCodeArray[1] = itemDetCode;
                                                    }

                                                    item.CodItem = itemDetCodeArray;
                                                    //item.DscItem = "";
                                                }
                                            }
                                            catch (Exception ex)
                                            { }

                                            if (descEmpresa.ToString().Equals("GENIA"))
                                            {
                                                try
                                                {   // Verifica si hay líneas de Texto
                                                    string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                    item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), lineaRec.LineNum.ToString(), objTypeDoc.ToString());
                                                }
                                                catch (Exception ex)
                                                { }
                                            }

                                            if (item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Moneda y TipoCambio", moneda.ToString() + " - Cot " + lineaRec.TipoCambioLinea.ToString() + ex.Message.ToString()); // Guarda log del Proceso
                                        }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = lineaRec.TotalIVA; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!lineaRec.MonedaLinea.Equals(moneda) && !String.IsNullOrEmpty(lineaRec.MonedaLinea.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (lineaRec.TipoCambioLinea <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                lineaRec.TipoCambioLinea = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (lineaRec.MonedaLinea.ToString().Equals("USD") || lineaRec.MonedaLinea.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni * lineaRec.TipoCambioLinea;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (objDoc.DescuentoDocPorcentaje == 0 || (descEmpresa.ToString().Equals("BOSCH") && objDoc.DescuentoDocPorcentaje != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = lineaRec.TotalLinea; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((lineaRec.MonedaLinea.ToString().Equals("UYU") || lineaRec.MonedaLinea.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni / lineaRec.TipoCambioLinea;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLinea;
                                                else
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLineaME; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = lineaRec.CantidadInventario;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = lineaRec.TotalLinea; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2, MidpointRounding.ToEven);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = lineaRec.TotalLinea; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2, MidpointRounding.ToEven);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2, MidpointRounding.ToEven);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3, MidpointRounding.ToEven);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);

                                            if (moneda.ToString().Equals(lineaRec.MonedaLinea)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3, MidpointRounding.ToEven);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3, MidpointRounding.ToEven);
                                        }

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = lineaRec.CantidadInventario;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) // Solo si es ANCAL
                                                    {
                                                        if (ocultoDescuento == true)
                                                            imprimeDescuento = false;
                                                        else
                                                            imprimeDescuento = true;
                                                    }
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = lineaRec.TotalLinea; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                                    if (objDoc.DescuentoDocPorcentaje != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                            precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                precioUni = precioUni * (1 - objDoc.DescuentoDocPorcentaje / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2, MidpointRounding.ToEven);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - objDoc.DescuentoDocPorcentaje)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2, MidpointRounding.ToEven);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                    item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (objDoc.DescuentoDocPorcentaje < 1 && objDoc.DescuentoDocPorcentaje > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("MAVIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * objDoc.DescuentoDocPorcentaje) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                    item.DescuentoPct = objDoc.DescuentoDocPorcentaje;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN"))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                    }
                                                }
                                            }
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2, MidpointRounding.ToEven);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        //Calculos Totales
                                        decimal iva = ObtenerImpuesto(lineaRec.CodigoImpuesto); // Obtengo el porcentaje de IVA
                                        //if (cotizacion == 0)
                                        //{
                                        //    if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                        //    {
                                        //        TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                        //        TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                        //        ivaMinimo = iva;
                                        //        item.IndFact = Item_Det_FactIndFact.Item2;
                                        //    }
                                        //    else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                        //    {
                                        //        TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                        //        TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                        //        ivaBasico = iva;
                                        //        item.IndFact = Item_Det_FactIndFact.Item3;
                                        //    }
                                        //    else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                        //    {
                                        //        TotalItemsNoGravados += (precio * item.Cantidad);
                                        //        item.IndFact = Item_Det_FactIndFact.Item1;
                                        //    }
                                        //    else
                                        //    {
                                        //        TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                        //        TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                        //        item.IndFact = Item_Det_FactIndFact.Item4;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //decimal pre = precio / (decimal)cotizacion;
                                        if (esNuevaVersionDGI)
                                            montoDescUni = item.DescuentoMonto / item.Cantidad;
                                        decimal montoIVALineaArticulo = 0;
                                        decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                        if (iva == 10 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVAMinimo += item.MontoItem;

                                                if (objDoc.DescuentoDocPorcentaje != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                TotalIVAMinimo += montoIVALineaArticulo;
                                                //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                            }
                                            else
                                            {
                                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && objDoc.DescuentoDocPorcentaje != 0))
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                    TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                            }
                                            ivaMinimo = iva;
                                            item.IndFact = Item_Det_FactIndFact.Item2;
                                        }
                                        else if (iva == 22 || lineaRec.CodigoImpuesto.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVABasico += item.MontoItem;

                                                if (objDoc.DescuentoDocPorcentaje != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                TotalIVABasico += montoIVALineaArticulo;
                                                //TotalItemsGravadosIVABasico += item.MontoItem;
                                                //TotalIVABasico += item.MontoItem * (iva / 100);
                                            }
                                            else
                                            {
                                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && objDoc.DescuentoDocPorcentaje != 0))
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                    TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                            }
                                            ivaBasico = iva;
                                            item.IndFact = Item_Det_FactIndFact.Item3;
                                        }
                                        else if (iva == 0 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                TotalItemsNoGravados += item.MontoItem;
                                            else
                                                TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                            item.IndFact = Item_Det_FactIndFact.Item1;
                                        }
                                        else if ((iva == 0 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_AEX")) && descEmpresa.ToString().Equals("OBRIN")) //ASPL - 2021.06.30 - Si es tasa 0 de exportacion y asimiladas, y Obrinel.
                                        {
                                            TotalItemsNoGravados += 0;
                                            item.IndFact = Item_Det_FactIndFact.Item10;
                                        }
                                        else
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVAOtra += item.MontoItem;
                                                TotalIVAOtra += montoIVALineaArticulo;
                                                //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                //TotalIVAOtra += item.MontoItem * (iva / 100);
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                            }
                                            item.IndFact = Item_Det_FactIndFact.Item4;
                                        }
                                        //}

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        // NUEVA VALIDACION PARA DREGAL
                                        if (descEmpresa.ToString().Equals("DREG"))
                                        {
                                            if (item.DescuentoMonto == 0)
                                            {
                                                try
                                                {
                                                    decimal montoCalculadoPrecio = (item.MontoItem / item.Cantidad) - item.DescuentoMonto;
                                                    if (Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven) != Math.Round(montoCalculadoPrecio, 2, MidpointRounding.ToEven)) // Si el Monto de la Linea y el Monto del Item son distintos
                                                        if (((item.PrecioUnitario - montoCalculadoPrecio) < 1 && (item.PrecioUnitario - montoCalculadoPrecio) > -1) || ((montoCalculadoPrecio - item.PrecioUnitario) < 1 && (montoCalculadoPrecio - item.PrecioUnitario) > -1)) // Si la diferencia es de centésimos
                                                            item.PrecioUnitario = Math.Round(montoCalculadoPrecio, 3, MidpointRounding.ToEven);
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al recalcular montoItem Dreghal", ex.Message.ToString()); // Guarda log del Proceso
                                                }
                                            }

                                            //item.PrecioUnitario = item.MontoItem; // Solo para un documento especial
                                        }

                                        if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA"))
                                        {
                                            // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                            if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                                if (item.MontoItem != item.PrecioUnitario)
                                                    item.PrecioUnitario = item.MontoItem;
                                        }

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                        item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);
                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        if (!String.IsNullOrEmpty(lineaRec.GastoAdiCodigo)) // Si tiene un Gasto adicional
                                        {
                                            try
                                            {
                                                RetPerc[] arrayItemRetPer = new RetPerc[1];
                                                RetPerc itemRetPer = new RetPerc();
                                                itemRetPer.CodRet = lineaRec.GastoAdiCodigo;
                                                itemRetPer.MntSujetoaRet = item.MontoItem;
                                                objDoc.GastoAdiMontoSujeto += item.MontoItem;
                                                itemRetPer.Tasa = Math.Round((lineaRec.GastoAdiMonto * 100) / item.MontoItem, 2, MidpointRounding.ToEven);
                                                itemRetPer.ValRetPerc = lineaRec.GastoAdiMonto;
                                                arrayItemRetPer[0] = itemRetPer;

                                                item.RetencPercep = new RetPerc[1];
                                                item.RetencPercep[0] = arrayItemRetPer[0];
                                            }
                                            catch (Exception ex)
                                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al agregar Retencion/Percepcion", ex.Message.ToString()); }
                                        }

                                        /*// CODIGO PARA LAS RETENCIONES
                                        try
                                        {
                                            Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[1];
                                            RetPerc[] arrayItemRetPer = new RetPerc[1];

                                            Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                            //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                            totRetPerUnidad.CodRet = "2183119";
                                            totRetPerUnidad.ValRetPerc = montoTotalLinea;
                                            arrayRetPer[cont] = totRetPerUnidad;

                                            RetPerc itemRetPer = new RetPerc();
                                            itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                            itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                            itemRetPer.Tasa = 0;
                                            itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                            arrayItemRetPer[cont] = itemRetPer;
                                            //item.RetencPercep[0] = itemRetPer;
                                            item.RetencPercep = new RetPerc[oRSMyTable3.RecordCount];
                                            item.RetencPercep[0] = arrayItemRetPer[cont];
                                        }
                                        catch (Exception ex)
                                        {
                                            if (guardaLog == true)
                                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                        }
                                        // FINAL CODIGO RETENCIONES//*/

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            redondeoDocumento = Math.Round(redondeoDocumento, 2, MidpointRounding.ToEven);
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2, MidpointRounding.ToEven);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2, MidpointRounding.ToEven);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";

                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;
                                            //montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }

                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.Cantidad = Math.Round(item.Cantidad, 3, MidpointRounding.ToEven);
                                                item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven); // Redondeo
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                            }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3, MidpointRounding.ToEven);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2, MidpointRounding.ToEven);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }
                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                ////if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                ////    descuent = 0;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntNetoIvaTasaMin == 0)
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                else
                                    totales.MntNetoIvaTasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntNetoIVATasaBasica == 0)
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                else
                                    totales.MntNetoIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntNetoIVAOtra == 0)
                                    totales.MntNetoIVAOtraSpecified = false;
                                else
                                    totales.MntNetoIVAOtraSpecified = true;

                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2, MidpointRounding.ToEven);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2, MidpointRounding.ToEven);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntIVATasaMin == 0)
                                    totales.MntIVATasaMinSpecified = false;
                                else
                                    totales.MntIVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2, MidpointRounding.ToEven);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2, MidpointRounding.ToEven);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                    totales.MntIVATasaBasicaSpecified = false;
                                else
                                    totales.MntIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2, MidpointRounding.ToEven);
                                }

                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                ////// VERIFICO SI TIENE RETENCIONES
                                //////oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry); // Obtengo las Retenciones del documento
                                ////TotalesRetencPercep[] arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                ////RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                ////int contadorRetenciones = 0;
                                ////if (oRSMyTableRetenciones != null)
                                ////{
                                ////    while (!oRSMyTableRetenciones.EoF)
                                ////    {
                                ////        try
                                ////        {
                                ////            decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                ////            TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep();
                                ////            totRetPerUnidad.CodRet = "2183220";
                                ////            totRetPerUnidad.ValRetPerc = montoItemRetencion;
                                ////            arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                ////            montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                ////            RetPerc itemRetPer = new RetPerc();
                                ////            itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                ////            itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                ////            itemRetPer.Tasa = 0;
                                ////            itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                ////            arrayItemRetPer[contadorRetenciones] = itemRetPer;

                                ////            ////factura.Detalle[0].RetencPercep = new RetPerc[1]; Las comento para que el documento no salga con Retenciones
                                ////            ////factura.Detalle[0].RetencPercep[0] = itemRetPer;
                                ////        }
                                ////        catch (Exception ex)
                                ////        {
                                ////            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                ////        }
                                ////        oRSMyTableRetenciones.MoveNext();
                                ////    }
                                ////}

                                //////if (montoTotalRetenciones != 0) // Si tiene Retenciones
                                //////{
                                //////    montoTotalRetenciones = Math.Round(montoTotalRetenciones, 2);
                                //////    totales.MntTotRetenido = montoTotalRetenciones;
                                //////    totales.MntTotRetenidoSpecified = true;
                                //////}

                                if (objDoc.GastoAdiMonto != 0) // Si tiene Gasto adicional
                                {
                                    try
                                    {
                                        TotalesRetencPercep[] arrayRetGasto = new TotalesRetencPercep[1];
                                        TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep();
                                        totRetPerUnidad.CodRet = objDoc.GastoAdiCodigo;
                                        totRetPerUnidad.ValRetPerc = objDoc.GastoAdiMonto;
                                        arrayRetGasto[0] = totRetPerUnidad;

                                        totales.RetencPercep = new TotalesRetencPercep[1];
                                        totales.RetencPercep = arrayRetGasto;

                                        objDoc.GastoAdiMonto = Math.Round(objDoc.GastoAdiMonto, 2, MidpointRounding.ToEven);
                                        totales.MntTotRetenido = objDoc.GastoAdiMonto;
                                        totales.MntTotRetenidoSpecified = true;
                                    }
                                    catch (Exception ex)
                                    { guardaLogProceso("", codigoFactura, "ERROR al crear XML retención", ex.Message.ToString()); }
                                }

                                totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2, MidpointRounding.ToEven);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }

                                // Se comento el 22/12 por problemas con las facturas de descuento 100%
                                // NUEVA LINEA POR PROBLEMAS DEL MONTONETO DE IVA
                                if (descEmpresa.ToString().Equals("ALMEN") && esNuevaVersionDGI == true && descuent == 100)
                                {
                                    TotalItemsGravadosIVABasico = 0; TotalItemsGravadosIVAMinimo = 0; TotalItemsGravadosIVAOtra = 0;
                                    TotalIVABasico = 0; TotalIVAMinimo = 0; TotalIVAOtra = 0;
                                    totales.MntPagar = 0; totales.MntTotal = 0;
                                    //descuent = 0;
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv > -1) && redondeoDocumento == 0)
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                        }
                                    }
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal || (hayItemRedondeo == true && redondeoDocumento != 0))
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (objDoc.GastoAdiMonto == 0) // Si no tiene gasto adicional
                                        {
                                            if (redondeoDocumento == 0)
                                                totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                            else
                                            {
                                                decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                                if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                                {
                                                    if (totales.MntPagar != totales.MntTotal + redondeoDocumento)
                                                    {
                                                        totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                        redondeoDocumento = 0;
                                                    }
                                                }
                                                else
                                                    redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                            }
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                ////if (montoTotalRetenciones != 0)
                                ////    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    totales.TpoCambioSpecified = true;
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2, MidpointRounding.ToEven);
                                        //if (totales.TpoCambio != 0)
                                        //    totales.TpoCambioSpecified = true;
                                        //else
                                        //    totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2, MidpointRounding.ToEven);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2, MidpointRounding.ToEven);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;
                                totales.MontoNF = redondeoDocumento;
                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                // VALIDACION MNTPAGAR
                                try
                                {
                                    decimal diferenciaError = totales.MntPagar - (totales.MntTotal + totales.MntTotRetenido + totales.MontoNF);
                                    if (diferenciaError != 0 && diferenciaError < 1 && diferenciaError > -1)
                                    {
                                        if (diferenciaError <= Convert.ToDecimal(0.02) && diferenciaError >= Convert.ToDecimal(-0.02))
                                        {
                                            if (totales.MntTotal == totales.MntNoGrv && totales.MntTotRetenido == 0 && totales.MontoNF == 0) // Si el Monto Total = al Monto Exportacion y no tiene redondeo
                                                totales.MntPagar = totales.MntTotal;
                                            else
                                                totales.MntPagar = totales.MntTotal + totales.MntTotRetenido;
                                        }
                                        else
                                        {
                                            if (totales.MntNoGrv != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                            else if (totales.MntExpoyAsim != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                { }
                                // FINAL VALIDACION

                                encabezado.Totales = totales;
                                ////encabezado.Totales.RetencPercep = arrayRetPer; // No las agrego al documento

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar el Encabezado", ex.Message.ToString());
                            }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        descuento.GlosaDR = "";


                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    factura.Encabezado.Totales.MntNoGrvSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                    montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                else
                                                {
                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2, MidpointRounding.ToEven);
                                                }

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2, MidpointRounding.ToEven); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }

                                                /*if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                {
                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item2; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(valorDR, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }
                                                else
                                                {
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }*/
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                if (esContado == true) // Si es un documento contado
                                {
                                    if (!String.IsNullOrEmpty(objDoc.MedioPago))
                                    {
                                        MediosPagoMedioPago[] arrayMedios = new MediosPagoMedioPago[1];
                                        MediosPagoMedioPago mediosPago = new MediosPagoMedioPago();

                                        mediosPago.NroLinMP = "1";
                                        mediosPago.CodMP = "1";
                                        mediosPago.GlosaMP = objDoc.MedioPago;
                                        mediosPago.OrdenMP = "1";
                                        mediosPago.ValorPago = factura.Encabezado.Totales.MntPagar;
                                        arrayMedios[0] = mediosPago;
                                        factura.MediosPago = arrayMedios;
                                    }
                                }
                            }
                            catch (Exception ex)
                            { }

                            try
                            {
                                if (esVentaCtaAjena == true) // Venta por Cuenta Ajena
                                {
                                    clsDatosCuentaAjena cuentaAjena = obtenerDatosCuentaAjena();
                                    if (cuentaAjena != null && !String.IsNullOrEmpty(cuentaAjena.RucEmisor))
                                    {
                                        factura.Compl_Fiscal = new Compl_FiscalType();
                                        factura.Compl_Fiscal.Item = new Compl_Fiscal_DataType();
                                        factura.Compl_Fiscal.Item.DocMdte = cuentaAjena.DocMdte;
                                        factura.Compl_Fiscal.Item.NombreMdte = cuentaAjena.NombreMdte;
                                        factura.Compl_Fiscal.Item.Pais = getCodPais(cuentaAjena.Pais);
                                        factura.Compl_Fiscal.Item.RUCEmisor = cuentaAjena.RucEmisor;

                                        if (cuentaAjena.TipoDocMdte == 1)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item1;
                                        else if (cuentaAjena.TipoDocMdte == 2)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item2;
                                        else if (cuentaAjena.TipoDocMdte == 3)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item3;
                                        else if (cuentaAjena.TipoDocMdte == 4)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item4;
                                        else if (cuentaAjena.TipoDocMdte == 5)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item5;
                                        else if (cuentaAjena.TipoDocMdte == 6)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item6;
                                    }
                                }
                                /*if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item111)
                                {
                                //FECHA 26/6/2020n
                                }
                                idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;*/
                            }
                            catch (Exception ex)
                            { }

                            string saltoLinea = "<br>";
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                saltoLinea = "\r\n";

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("AEG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + saltoLinea;// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("AEG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + saltoLinea; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("AEG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + saltoLinea; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                            {
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + saltoLinea; // Forma de Pago 
                                sicfeAdenda += "Contribuyente amparado a la Ley 15.921" + saltoLinea; //ASPL. 2019-06-12, Nueva leyenda.
                            }

                            if (descEmpresa.ToString().Equals("DREG")) // Si es Dreghal
                            {
                                // Armo el adenda desde 0
                                int numeroPedido = 0; string monedaLetras = "Pesos Uruguayos"; string ordenCompra = "";
                                try
                                {
                                    SAPbobsCOM.Recordset oRSMyTableAdenda = ObtenerDatosPreviosDocumento(codigoFactura, pFormFactura);
                                    if (oRSMyTableAdenda != null)
                                    {
                                        while (!oRSMyTableAdenda.EoF)
                                        {
                                            numeroPedido = oRSMyTableAdenda.Fields.Item("Num_Pedido").Value;
                                            oRSMyTableAdenda.MoveNext();
                                        }
                                    }

                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableAdenda);
                                    oRSMyTableAdenda = null;

                                    if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                        monedaLetras = "Dólares Americanos";
                                    else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                        monedaLetras = "Euros";
                                    else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                        monedaLetras = "Pesos Chilenos";

                                    try
                                    {
                                        ordenCompra = oRSMyTable.Fields.Item("U_ORDEN_COMPRA").Value;
                                    }
                                    catch (Exception ex)
                                    { }
                                }
                                catch (Exception ex)
                                { }

                                //sicfeAdenda = "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                                sicfeAdenda += "Forma.de pago: " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "\r\n"; // Forma de Pago 
                                sicfeAdenda += "Número de pedido: " + numeroPedido + "\r\n";
                                sicfeAdenda += "Usuario: " + obtenerUsuarioCreadorDocumento(objDoc.UserSign) + "\r\n"; // Usuario que creo el documento 
                                sicfeAdenda += "Orden de compra: " + ordenCompra.ToString() + "\r\n";
                                sicfeAdenda += "Moneda: " + monedaLetras.ToString() + "\r\n";
                                sicfeAdenda += "Forma de envío: " + obtenerFormaEnvio(oRSMyTable.Fields.Item("TrnspCode").Value) + "\r\n"; // Forma de Envio 
                                sicfeAdenda += "Vendedor: " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                                sicfeAdenda += "Comentarios: " + oRSMyTable.Fields.Item("Header").Value + "\r\n"; // Comentarios Iniciales
                            }
                            else if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                string strVencimientos = string.Empty;
                                string strObsCliente = string.Empty;
                                string strDirEntrega = string.Empty;
                                string strContacto = string.Empty;
                                string strTelefono = string.Empty;
                                string strResponsable = string.Empty;
                                string strTransportista = string.Empty;
                                string strDocInterno = string.Empty;
                                //string strDocEnlazado = string.Empty;

                                strVencimientos = obtenerVencimientos(codigoDocEntry);
                                strObsCliente = oRSMyTable.Fields.Item("U_Obcli").Value;
                                strDirEntrega = oRSMyTable.Fields.Item("Address2").Value;
                                strContacto = oRSMyTable.Fields.Item("U_CONTACTO").Value;
                                strTelefono = oRSMyTable.Fields.Item("U_TELEFONO").Value;
                                strResponsable = obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value);
                                strTransportista = ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura);
                                strDocInterno = codigoFactura.ToString();
                                //strDocEnlazado = documentoBaseRural.ToString();

                                if (!string.IsNullOrEmpty(strVencimientos))
                                    sicfeAdenda += "Vencimientos: " + strVencimientos + "SALTOLINEA"; // Vencimientos - 2019.10.31
                                //sicfeAdenda = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "SALTOLINEA"; // Forma de Pago 
                                if (!string.IsNullOrEmpty(strObsCliente))
                                    sicfeAdenda += "Obs. Cliente: " + strObsCliente + "SALTOLINEA"; // Observaciones del Cliente 
                                if (!string.IsNullOrEmpty(strDirEntrega))
                                    sicfeAdenda += "Dir Entrega: " + strDirEntrega + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strContacto))
                                    sicfeAdenda += "Contacto: " + strContacto + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTelefono))
                                    sicfeAdenda += "Telefono: " + strTelefono + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strResponsable))
                                    sicfeAdenda += "Responsable: " + strResponsable + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTransportista))
                                    sicfeAdenda += "Transportista: " + strTransportista + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strDocInterno))
                                    sicfeAdenda += "Documento Interno: " + strDocInterno + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(documentoBaseRural))
                                    sicfeAdenda += "Documento Enlazado: " + documentoBaseRural + "SALTOLINEA";

                                if (esContado == false)
                                {
                                    string OrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                    if (!string.IsNullOrEmpty(OrdComp))
                                        sicfeAdenda += "Orden Compra: " + OrdComp + "SALTOLINEA";
                                    sicfeAdenda += "Firmo factura dando conformidad a mercadería y precios detallados y abonaré en el plazo y condiciones pactadas. SALTOLINEA";
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. El no pago del precio en el plazo estipulado, generará el máximo interés legal permitido por la ley. SALTOLINEA";
                                    sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                    sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                    sicfeAdenda += "C.I______________________Fecha__________________. SALTOLINEA";
                                }
                                else
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. SALTOLINEA";

                                ////sicfeAdenda = "Obs. Cliente: " + oRSMyTable.Fields.Item("U_Obcli").Value + "SALTOLINEA"; // Observaciones del Cliente 
                                ////sicfeAdenda += "Contacto: " + oRSMyTable.Fields.Item("U_CONTACTO").Value + "SALTOLINEA";
                                ////sicfeAdenda += "Telefono: " + oRSMyTable.Fields.Item("U_TELEFONO").Value + "SALTOLINEA";
                                ////sicfeAdenda += "Documento Interno: " + codigoFactura.ToString() + "SALTOLINEA";
                                ////sicfeAdenda += "Documento Enlazado: " + documentoBaseRural.ToString() + "SALTOLINEA";
                                ////sicfeAdenda += "Responsable: " + obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "SALTOLINEA";
                                ////sicfeAdenda += "Transportista: " + ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura) + "SALTOLINEA";
                                ////sicfeAdenda += "Orden Compra: " + oRSMyTable.Fields.Item("U_ORDCOMPRA").Value + "SALTOLINEA";
                                ////sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "SALTOLINEA"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                            {
                                sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value);//+ ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago Cambio 26/6/20
                            }
                            else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                            {
                                sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    if (idSucursalUsuario == 21)
                                    {
                                        sicfeAdenda += "Cambio 60 días <br>";
                                    }
                                    else
                                    {
                                        sicfeAdenda += "Cambio 30 días <br>";
                                    }
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                            else if (descEmpresa.ToString().Equals("ETARE"))
                                sicfeAdenda += "Saldo: UYU " + saldoCliente + "<br>";
                            else if (descEmpresa.ToString().Equals("TENTA"))
                            {
                                if (esContado == false)
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                sicfeAdenda += obtenerRemarks(13) + "\r\n";
                            else if (descEmpresa.ToString().Equals("POCHA"))
                            {
                                sicfeAdenda += "Comentarios: " + obtenerComentarioPedido(objDoc.DocEntry);
                                sicfeAdenda += "\r\n";
                                sicfeAdenda += "Compra ID : " + oRSMyTable.Fields.Item("U_IDCOMPRA").Value;
                            }

                            try
                            {
                                XmlSerializer ser = new XmlSerializer(typeof(eFact));
                                using (var stream = new MemoryStream())
                                {
                                    ser.Serialize(stream, factura);
                                    stream.Flush();
                                    stream.Seek(0, SeekOrigin.Begin);
                                    xml.Load(stream);
                                    result = xml.InnerXml;
                                }
                            }
                            catch (Exception ex)
                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Serializar el Objeto", ex.Message.ToString()); }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception e)
            {
                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            return result;
        }

        public String generarXmlRecibo(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            SAPbobsCOM.Recordset oRSMyTable = null;

            try
            {
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                int cantLineasDocumento = 0;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                double recargoCliente = 0; double saldoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal redondeoDocumento = 0; bool hayItemRedondeo = false;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                bool esContingencia = false; bool esVentaCtaAjena = false; string documentoBaseRural = "";
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                clsObjDocumento objDoc = new clsObjDocumento();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                decimal cantPiezas = 0;
                bool ocultoDescuento = true;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                cantLineasDocumento = objDoc.lineas.Count; // Cantidad de líneas del documento
                                getIdSucursal(objDoc.UserSign); // Actualizo el id de la Sucursal
                                codigoDocEntry = objDoc.DocEntry.ToString();
                            }
                            catch (Exception ex)
                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Obtener objetoDocumento", ex.Message.ToString()); }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                String doc = "";
                                doc = oRSMyTable.Fields.Item("LicTradNum").Value;
                                NroDocumento = doc;

                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia

                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al obtener LicTradNum", ex.Message.ToString()); }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchVencSpecified = false;
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                idDoc.MntBrutoSpecified = false;
                                idDoc.FmaPago = IdDoc_FactFmaPago.Item1;

                                idDoc.IndCobPropia = "1"; // Nuevo tag para E-Recibo.

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = "";

                                if (!descEmpresa.Equals("OBRIN"))
                                {
                                    compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;
                                }

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                bool agregoCeroRUT = false; // Indica si le agrega un 0 adelante al RUT

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;

                                        if (descEmpresa.Equals("TRIGE"))
                                        {
                                            string direccionCompleta = oRSMyTable5.Fields.Item("Street").Value + " " + oRSMyTable5.Fields.Item("StreetNo").Value + " " + oRSMyTable5.Fields.Item("Building").Value;
                                            if (!String.IsNullOrEmpty(direccionCompleta))
                                                receptor.DirRecep = direccionCompleta;
                                        }

                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("PaisNombre").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value;
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";

                                        if (descEmpresa.Equals("TRIGE") || descEmpresa.Equals("POCHA") || descEmpresa.Equals("ALMEN"))
                                            receptor.LugarDestEnt = oRSMyTable2.Fields.Item("GlblLocNum").Value;
                                        else if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + objDoc.DireccionEntrega;
                                        else
                                            receptor.LugarDestEnt = objDoc.DireccionFactura;

                                        if (descEmpresa.ToString().Equals("ETARE"))
                                            saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            string prop2ASU = (string)oRSMyTable2.Fields.Item("QryGroup1").Value; // Valida si es un cliente Rondanet
                                            if (!String.IsNullOrEmpty(prop2ASU) && prop2ASU.Equals("Y"))
                                                esClienteASU = true;
                                            else
                                                esClienteASU = false;
                                        }

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                            {
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                            }
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                                agregoCeroRUT = true;
                                            }
                                            else
                                            {
                                                tipo = "eTck";
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                            else
                                            {
                                                // Si no es un cliente Uruguayo
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4;
                                                tipo = "eTck";
                                            }
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al agregar Receptor", ex.Message.ToString()); }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                {
                                    // Para el nuevo cambio de Trialand
                                    if (!tipo.Equals("eTck") && ObtenerClienteVatStatusExtranjero(codCliente, "C") == true)
                                    {
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        receptor.TipoDocRecep = DocType.Item4;
                                    }
                                }

                                try
                                {
                                    //if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    //    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    if (receptor.TipoDocRecep == DocType.Item4)
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;

                                        if (tipo.ToString().Equals("eFact") && agregoCeroRUT == true)
                                        {   // Entonces es eTicket. No puede hacer una eFactura a un cliente que no sea RUT Uruguayo
                                            tipo = "eTck";
                                            encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                            receptor.DocRecep = receptor.DocRecep.ToString().Substring(1, receptor.DocRecep.Length - 1);
                                        }
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo
                                }
                                catch (Exception e)
                                {
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando Cliente Ext", e.Message.ToString()); // Guarda log del Proceso
                                }

                                if (descEmpresa.ToString().Equals("ETARE"))
                                {
                                    if (codCliente.ToUpper().Contains("PPL") || codCliente.ToUpper().Contains("ETY") || codCliente.ToUpper().Contains("INR") || receptor.RznSocRecep.ToUpper().Contains("PPL") || receptor.RznSocRecep.ToUpper().Contains("ETY") || receptor.RznSocRecep.ToUpper().Contains("INR"))
                                    {
                                        esDocUruguayo = false;
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "-";
                                        receptor.RznSocRecep = "";
                                        receptor.CodPaisRecep = CodPaisType.Item99;
                                    }
                                }

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                if (objDoc != null)
                                {
                                    receptor.CompraID = objDoc.U_IdCompra;
                                    if (!descEmpresa.Equals("TRIGE") && !descEmpresa.Equals("POCHA") && !descEmpresa.Equals("MAVIN") && !descEmpresa.Equals("ALMEN"))
                                        receptor.LugarDestEnt = objDoc.DireccionEntrega;
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 30)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                //if (receptor.LugarDestEnt.ToString().Length > 100)
                                //    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar el Receptor", e.Message.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;

                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCurr").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DcntSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DcntSumFC").Value;

                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = true;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null;
                                bool hayGastosAdicionales = false;

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if (descEmpresa.ToString().Equals("TENTA") && objDoc.DescuentoDocPorcentaje != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje < 0 && objDoc.DescuentoDocPorcentaje > -1)
                                                objDoc.DescuentoDocPorcentaje = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                        {
                                            if (!String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural += ", ";

                                            if (!string.IsNullOrEmpty(lineaRec.BaseDocNum) && documentoBaseRural.Contains(lineaRec.BaseDocNum))
                                                documentoBaseRural = documentoBaseRural.Remove(documentoBaseRural.Length - 2);
                                            else
                                                documentoBaseRural += lineaRec.BaseDocNum; // Me guardo el documento Base para el Adenda
                                        }

                                        Item_Det_Fact item = new Item_Det_Fact();
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = lineaRec.DescripcionDocumento;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        decimal precio = lineaRec.Precio;
                                        item.DescuentoPct = lineaRec.DescuentoPorcentaje;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            //item.DscItem = lineaRec.ItemCode;

                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;
                                            }

                                            string codigoEan = ""; int cantLineasCodigo = 1;

                                            if (item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Moneda y TipoCambio", moneda.ToString() + " - Cot " + lineaRec.TipoCambioLinea.ToString() + ex.Message.ToString()); // Guarda log del Proceso
                                        }

                                        decimal precioUni = lineaRec.Precio; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = lineaRec.TotalIVA; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!lineaRec.MonedaLinea.Equals(moneda) && !String.IsNullOrEmpty(lineaRec.MonedaLinea.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (lineaRec.TipoCambioLinea <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                lineaRec.TipoCambioLinea = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (lineaRec.MonedaLinea.ToString().Equals("USD") || lineaRec.MonedaLinea.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni * lineaRec.TipoCambioLinea;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (objDoc.DescuentoDocPorcentaje == 0 || (descEmpresa.ToString().Equals("BOSCH") && objDoc.DescuentoDocPorcentaje != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = lineaRec.TotalLinea; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((lineaRec.MonedaLinea.ToString().Equals("UYU") || lineaRec.MonedaLinea.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni / lineaRec.TipoCambioLinea;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLinea;
                                                else
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLineaME; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = lineaRec.CantidadInventario;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = lineaRec.TotalLinea; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2, MidpointRounding.ToEven);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = lineaRec.TotalLinea; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2, MidpointRounding.ToEven);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2, MidpointRounding.ToEven);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3, MidpointRounding.ToEven);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);

                                            if (moneda.ToString().Equals(lineaRec.MonedaLinea)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3, MidpointRounding.ToEven);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3, MidpointRounding.ToEven);
                                        }

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = lineaRec.CantidadInventario;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) // Solo si es ANCAL
                                                    {
                                                        if (ocultoDescuento == true)
                                                            imprimeDescuento = false;
                                                        else
                                                            imprimeDescuento = true;
                                                    }
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = lineaRec.TotalLinea; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                                    if (objDoc.DescuentoDocPorcentaje != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                            precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                precioUni = precioUni * (1 - objDoc.DescuentoDocPorcentaje / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2, MidpointRounding.ToEven);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - objDoc.DescuentoDocPorcentaje)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2, MidpointRounding.ToEven);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = true;

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                    item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (objDoc.DescuentoDocPorcentaje < 1 && objDoc.DescuentoDocPorcentaje > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("MAVIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * objDoc.DescuentoDocPorcentaje) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                    item.DescuentoPct = objDoc.DescuentoDocPorcentaje;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN"))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                    }
                                                }
                                            }
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2, MidpointRounding.ToEven);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        //Calculos Totales
                                        decimal iva = ObtenerImpuesto(lineaRec.CodigoImpuesto); // Obtengo el porcentaje de IVA

                                        if (esNuevaVersionDGI)
                                            montoDescUni = item.DescuentoMonto / item.Cantidad;
                                        decimal montoIVALineaArticulo = 0;
                                        decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                        if (iva == 10 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVAMinimo += item.MontoItem;

                                                if (objDoc.DescuentoDocPorcentaje != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                TotalIVAMinimo += montoIVALineaArticulo;
                                            }
                                            else
                                            {
                                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && objDoc.DescuentoDocPorcentaje != 0))
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                    TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                            }
                                            ivaMinimo = iva;
                                            item.IndFact = Item_Det_FactIndFact.Item6;
                                        }
                                        else if (iva == 22 || lineaRec.CodigoImpuesto.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVABasico += item.MontoItem;

                                                if (objDoc.DescuentoDocPorcentaje != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                TotalIVABasico += montoIVALineaArticulo;
                                            }
                                            else
                                            {
                                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && objDoc.DescuentoDocPorcentaje != 0))
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                    TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                            }
                                            ivaBasico = iva;
                                            item.IndFact = Item_Det_FactIndFact.Item6;
                                        }
                                        else if (iva == 0 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                TotalItemsNoGravados += item.MontoItem;
                                            else
                                                TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                            item.IndFact = Item_Det_FactIndFact.Item6;
                                        }
                                        else
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVAOtra += item.MontoItem;
                                                TotalIVAOtra += montoIVALineaArticulo;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                            }
                                            item.IndFact = Item_Det_FactIndFact.Item4;
                                        }

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        // NUEVA VALIDACION PARA DREGAL
                                        if (descEmpresa.ToString().Equals("DREG"))
                                        {
                                            if (item.DescuentoMonto == 0)
                                            {
                                                try
                                                {
                                                    decimal montoCalculadoPrecio = (item.MontoItem / item.Cantidad) - item.DescuentoMonto;
                                                    if (Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven) != Math.Round(montoCalculadoPrecio, 2, MidpointRounding.ToEven)) // Si el Monto de la Linea y el Monto del Item son distintos
                                                        if (((item.PrecioUnitario - montoCalculadoPrecio) < 1 && (item.PrecioUnitario - montoCalculadoPrecio) > -1) || ((montoCalculadoPrecio - item.PrecioUnitario) < 1 && (montoCalculadoPrecio - item.PrecioUnitario) > -1)) // Si la diferencia es de centésimos
                                                            item.PrecioUnitario = Math.Round(montoCalculadoPrecio, 3, MidpointRounding.ToEven);
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al recalcular montoItem Dreghal", ex.Message.ToString()); // Guarda log del Proceso
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA"))
                                        {
                                            // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                            if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                                if (item.MontoItem != item.PrecioUnitario)
                                                    item.PrecioUnitario = item.MontoItem;
                                        }

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                        item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);
                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        if (!String.IsNullOrEmpty(lineaRec.GastoAdiCodigo)) // Si tiene un Gasto adicional
                                        {
                                            try
                                            {
                                                RetPerc[] arrayItemRetPer = new RetPerc[1];
                                                RetPerc itemRetPer = new RetPerc();
                                                itemRetPer.CodRet = lineaRec.GastoAdiCodigo;
                                                itemRetPer.MntSujetoaRet = item.MontoItem;
                                                objDoc.GastoAdiMontoSujeto += item.MontoItem;
                                                itemRetPer.Tasa = Math.Round((lineaRec.GastoAdiMonto * 100) / item.MontoItem, 2, MidpointRounding.ToEven);
                                                itemRetPer.ValRetPerc = lineaRec.GastoAdiMonto;
                                                arrayItemRetPer[0] = itemRetPer;

                                                item.RetencPercep = new RetPerc[1];
                                                item.RetencPercep[0] = arrayItemRetPer[0];
                                            }
                                            catch (Exception ex)
                                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al agregar Retencion/Percepcion", ex.Message.ToString()); }
                                        }

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            redondeoDocumento = Math.Round(redondeoDocumento, 2, MidpointRounding.ToEven);
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2, MidpointRounding.ToEven);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2, MidpointRounding.ToEven);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";

                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }

                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.Cantidad = Math.Round(item.Cantidad, 3, MidpointRounding.ToEven);
                                                item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven); // Redondeo
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                            }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = 0;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3, MidpointRounding.ToEven);
                                if (totales.TpoCambio != 0)
                                    totales.TpoCambioSpecified = true;
                                else
                                    totales.TpoCambioSpecified = false;

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                if (totales.MntNoGrv == 0)
                                    totales.MntNoGrvSpecified = false;
                                else
                                    totales.MntNoGrvSpecified = true;

                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                if (totales.MntNetoIvaTasaMin == 0)
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                else
                                    totales.MntNetoIvaTasaMinSpecified = true;

                                if (totales.MntNetoIVATasaBasica == 0)
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                else
                                    totales.MntNetoIVATasaBasicaSpecified = true;

                                if (totales.MntNetoIVAOtra == 0)
                                    totales.MntNetoIVAOtraSpecified = false;
                                else
                                    totales.MntNetoIVAOtraSpecified = true;

                                totales.IVATasaBasicaSpecified = false;
                                totales.IVATasaMinSpecified = false;

                                if (totales.MntIVATasaMin == 0)
                                    totales.MntIVATasaMinSpecified = false;
                                else
                                    totales.MntIVATasaMinSpecified = true;

                                if (totales.MntIVATasaBasica == 0)
                                    totales.MntIVATasaBasicaSpecified = false;
                                else
                                    totales.MntIVATasaBasicaSpecified = true;

                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                if (objDoc.GastoAdiMonto != 0) // Si tiene Gasto adicional
                                {
                                    try
                                    {
                                        TotalesRetencPercep[] arrayRetGasto = new TotalesRetencPercep[1];
                                        TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep();
                                        totRetPerUnidad.CodRet = objDoc.GastoAdiCodigo;
                                        totRetPerUnidad.ValRetPerc = objDoc.GastoAdiMonto;
                                        arrayRetGasto[0] = totRetPerUnidad;

                                        totales.RetencPercep = new TotalesRetencPercep[1];
                                        totales.RetencPercep = arrayRetGasto;

                                        objDoc.GastoAdiMonto = Math.Round(objDoc.GastoAdiMonto, 2, MidpointRounding.ToEven);
                                        totales.MntTotRetenido = objDoc.GastoAdiMonto;
                                        totales.MntTotRetenidoSpecified = true;
                                    }
                                    catch (Exception ex)
                                    { guardaLogProceso("", codigoFactura, "ERROR al crear XML retención", ex.Message.ToString()); }
                                }

                                totales.MntTotal = decimal.Round(totales.MntTotal, 2, MidpointRounding.ToEven);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv > -1) && redondeoDocumento == 0)
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                        }
                                    }
                                }

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    totales.TpoCambioSpecified = true;
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2, MidpointRounding.ToEven);
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                totales.MntTotal = Math.Round(totales.MntTotal, 2, MidpointRounding.ToEven);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2, MidpointRounding.ToEven);

                                totales.MontoNF = totales.MntPagar;
                                if (totales.MontoNF != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                encabezado.Totales = totales;

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso("", codigoFactura, "ERROR al Cargar el Encabezado", ex.Message.ToString());
                            }

                            factura.Encabezado = encabezado;

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = 0;

                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    factura.Encabezado.Totales.MntNoGrvSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                    montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                else
                                                {
                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2, MidpointRounding.ToEven);
                                                }

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2, MidpointRounding.ToEven); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                if (esContado == true) // Si es un documento contado
                                {
                                    if (!String.IsNullOrEmpty(objDoc.MedioPago))
                                    {
                                        MediosPagoMedioPago[] arrayMedios = new MediosPagoMedioPago[1];
                                        MediosPagoMedioPago mediosPago = new MediosPagoMedioPago();

                                        mediosPago.NroLinMP = "1";
                                        mediosPago.CodMP = "1";
                                        mediosPago.GlosaMP = objDoc.MedioPago;
                                        mediosPago.OrdenMP = "1";
                                        mediosPago.ValorPago = factura.Encabezado.Totales.MntPagar;
                                        arrayMedios[0] = mediosPago;
                                        factura.MediosPago = arrayMedios;
                                    }
                                }
                            }
                            catch (Exception ex)
                            { }

                            try
                            {
                                if (esVentaCtaAjena == true) // Venta por Cuenta Ajena
                                {
                                    clsDatosCuentaAjena cuentaAjena = obtenerDatosCuentaAjena();
                                    if (cuentaAjena != null && !String.IsNullOrEmpty(cuentaAjena.RucEmisor))
                                    {
                                        factura.Compl_Fiscal = new Compl_FiscalType();
                                        factura.Compl_Fiscal.Item = new Compl_Fiscal_DataType();
                                        factura.Compl_Fiscal.Item.DocMdte = cuentaAjena.DocMdte;
                                        factura.Compl_Fiscal.Item.NombreMdte = cuentaAjena.NombreMdte;
                                        factura.Compl_Fiscal.Item.Pais = getCodPais(cuentaAjena.Pais);
                                        factura.Compl_Fiscal.Item.RUCEmisor = cuentaAjena.RucEmisor;

                                        if (cuentaAjena.TipoDocMdte == 1)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item1;
                                        else if (cuentaAjena.TipoDocMdte == 2)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item2;
                                        else if (cuentaAjena.TipoDocMdte == 3)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item3;
                                        else if (cuentaAjena.TipoDocMdte == 4)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item4;
                                        else if (cuentaAjena.TipoDocMdte == 5)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item5;
                                        else if (cuentaAjena.TipoDocMdte == 6)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item6;
                                    }
                                }
                            }
                            catch (Exception ex)
                            { }

                            //Referencias

                            SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                            int num = 1;

                            try
                            {
                                oRSMyTableDocRef = obtenerDocumentoReferenciaRecibo(codigoDocEntry); // Le paso el DocEntry
                                if (oRSMyTableDocRef.RecordCount == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (oRSMyTableDocRef.RecordCount > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];

                                    if (oRSMyTableDocRef != null)
                                    {
                                        while (!oRSMyTableDocRef.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                            int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("TpoDocRef").Value);
                                            if (String.IsNullOrEmpty(serie) || nro == 0)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                {
                                                    refe.TpoDocRef = CFEType.Item111;
                                                }
                                                else if (tipo == 101)
                                                {
                                                    refe.TpoDocRef = CFEType.Item101;
                                                }
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTableDocRef.MoveNext();
                                        }
                                    }

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            {
                                throw ex;
                            }

                            try
                            {
                                XmlSerializer ser = new XmlSerializer(typeof(eFact));
                                using (var stream = new MemoryStream())
                                {
                                    ser.Serialize(stream, factura);
                                    stream.Flush();
                                    stream.Seek(0, SeekOrigin.Begin);
                                    xml.Load(stream);
                                    result = xml.InnerXml;
                                }
                            }
                            catch (Exception ex)
                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Serializar el Objeto", ex.Message.ToString()); }

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            SBO_Application.MessageBox("ERROR al generar recibo" + e.ToString());
                        }
                    }
                }
            }
            catch (Exception e)
            {
                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }

            return result;
        }

        public String GenerarXmlFacturaFITCO(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                int cantLineasDocumento = oRSMyTable3.RecordCount;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal redondeoDocumento = 0; decimal montoTotalRetenciones = 0; bool hayItemRedondeo = false;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                bool esContingencia = false; int documentoBaseRural = 0;
                string producerArt = ""; string bankDetails = ""; string bankAccount = ""; string bankAba = ""; string bankSwift = "";
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                int idUserDoc = 0;
                bool ocultoDescuento = true;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                // Me quedo con la tabla de Retenciones
                                oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry, pFormFactura); // Obtengo las Retenciones del documento

                                idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("CARTEL ERROR al obtener el DocEntry");
                            }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                if (indicador.ToString().Equals("99")) // Es contingencia
                                {
                                    try
                                    {
                                        int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                        string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                        if (folioDocumento != 0)
                                        {
                                            idDoc.Nro = folioDocumento.ToString();
                                            idDoc.Serie = SerieDocumento;
                                            esContingencia = true;
                                        }
                                    }
                                    catch (Exception ex)
                                    { }
                                }


                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { }

                                //idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchEmis = oRSMyTable.Fields.Item("DocDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null)
                                {
                                    idDoc.FchVencSpecified = false;
                                }
                                else
                                {
                                    idDoc.FchVencSpecified = true;
                                }
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = false;

                                //int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                //if (EsContado(formaPago))
                                //{
                                //    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                //}
                                //else
                                //{
                                //    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                //}

                                if (EsContadoFitco(oRSMyTable.Fields.Item("U_SI_PayTer").Value))
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                else
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();

                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                string freeText = "";
                                string infoAdicionalClienteFitco = "";
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        freeText = oRSMyTable2.Fields.Item("Free_Text").Value;
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        infoAdicionalClienteFitco = "CEP: " + receptor.CP + " ";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal
                                        receptor.CP = "0";

                                        string numeroDireccion = oRSMyTable5.Fields.Item("StreetNo").Value;
                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; // Le cargo la direccion de correo electronico
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        infoAdicionalClienteFitco = receptor.DirRecep + " " + numeroDireccion + " " + oRSMyTable5.Fields.Item("Block").Value + "," + infoAdicionalClienteFitco + " " + receptor.CiudadRecep + " " + receptor.DeptoRecep + " " + receptor.PaisRecep;
                                        receptor.InfoAdicional = infoAdicionalClienteFitco;

                                        /*string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;
                                        
                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }*/

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                            {
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                            }
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                            {
                                                tipo = "eTck";
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        try
                                        {
                                            bankDetails = obtenerNombreBanco(oRSMyTable2.Fields.Item("HouseBank").Value);
                                            bankAccount = oRSMyTable2.Fields.Item("HousBnkAct").Value;
                                            bankAba = oRSMyTable2.Fields.Item("HsBnkIBAN").Value;
                                            bankSwift = oRSMyTable2.Fields.Item("HsBnkSwift").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                try
                                {
                                    //if (!receptor.CodPaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item101;
                                        tipo = "eTck";

                                        string cnpj = "";
                                        try
                                        {
                                            // Si tiene CNPJ en FreeText
                                            if (freeText.Contains("CNPJ"))
                                            {
                                                int inicialChar = freeText.LastIndexOf("CNPJ");
                                                int finalChar = freeText.Length;
                                                string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                                textoReemplazar = textoReemplazar.Substring(0, 24);
                                                cnpj = textoReemplazar.Replace("CNPJ", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                                if (!String.IsNullOrEmpty(cnpj.ToString()))
                                                {
                                                    //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                    receptor.TipoDocRecep = DocType.Item6; // DNI Documento Arg, Bra, Par o Chi
                                                    receptor.DocRecep = cnpj.ToString();
                                                    receptor.CodPaisRecep = CodPaisType.BR;
                                                }
                                            }
                                            else
                                            {
                                                // Entonces es Otro
                                                int inicialChar = freeText.LastIndexOf("Otro");
                                                int finalChar = freeText.Length;
                                                string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                                //textoReemplazar = textoReemplazar.Substring(0, 24);
                                                cnpj = textoReemplazar.Replace("Otro", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                                if (!String.IsNullOrEmpty(cnpj.ToString()))
                                                {
                                                    //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                    receptor.TipoDocRecep = DocType.Item4; // DNI Documento Arg, Bra, Par o Chi
                                                    receptor.DocRecep = cnpj.ToString();
                                                    receptor.CodPaisRecep = CodPaisType.Item99; // Pais "Otros"

                                                    receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais NUEVA LINEA
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    }
                                    else
                                    {
                                        // Con Dirección Uruguay es eFactura
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                        tipo = "eFact";

                                        if (receptor.DocRecep.ToString().Length == 12) // Tiene RUC
                                            receptor.TipoDocRecep = DocType.Item2;
                                        else if (receptor.DocRecep.ToString().Length >= 7 && receptor.DocRecep.ToString().Length <= 10)
                                            receptor.TipoDocRecep = DocType.Item3;
                                        else if (receptor.DocRecep.ToString().Length == 11 && ValidarRUC("0" + receptor.DocRecep))
                                        {
                                            receptor.TipoDocRecep = DocType.Item2;
                                            receptor.DocRecep = "0" + receptor.DocRecep;
                                        }
                                        else
                                            receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                    }

                                    if (receptor.TipoDocRecep == DocType.Item4 || receptor.TipoDocRecep == DocType.Item6)
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) || receptor.CodPaisRecep == CodPaisType.UY)
                                        {
                                            if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                                receptor.CodPaisRecep = CodPaisType.AR;
                                            else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                                receptor.CodPaisRecep = CodPaisType.BR;
                                            else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                                receptor.CodPaisRecep = CodPaisType.CL;
                                            else
                                                receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais NUEVA LINEA
                                        }
                                        /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                        {
                                            if (receptor.CodPaisRecep != CodPaisType.UY)
                                                esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                            else
                                                esDocUruguayo = true;
                                        }*/
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo
                                }
                                catch (Exception e)
                                {
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando Cliente Ext", e.Message.ToString()); // Guarda log del Proceso
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 30)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);
                                if (receptor.InfoAdicional.ToString().Length > 150)
                                    receptor.InfoAdicional = receptor.RznSocRecep.ToString().Substring(0, 150);
                                /*// Nueva validación porque en algunos casos quedaba UY y con DocRecepExt
                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                    esDocUruguayo = true;
                                else
                                    esDocUruguayo = false;
                                */

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item101 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item201)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item201;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item211;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGO RECPETOR " + e.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("SCHIN"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                    {
                                        redondeoDocumento = 0;
                                    }
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if (descEmpresa.ToString().Equals("TENTA") && descuent != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (descuent < 0 && descuent > -1)
                                                descuent = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            if (String.IsNullOrEmpty(documentoBaseRural.ToString()) || documentoBaseRural == 0)
                                                documentoBaseRural = (int)oRSMyTable3.Fields.Item("BaseDocNum").Value; // Me guardo el documento Base para el Adenda

                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;
                                        string itemCode = oRSMyTable3.Fields.Item("ItemCode").Value;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                //string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                //if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                //    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Moneda y TipoCambio", moneda.ToString() + " - Cot " + monedaArticulo.ToString() + ex.Message.ToString()); // Guarda log del Proceso
                                        }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (descuent == 0 || (descEmpresa.ToString().Equals("BOSCH") && descuent != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                //if (moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) // Si el documento es en Pesos
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
                                                else
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 5);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 5);

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH")) // Solo si es ANCAL
                                                    {
                                                        if (ocultoDescuento == true)
                                                            imprimeDescuento = false;
                                                        else
                                                            imprimeDescuento = true;
                                                    }
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                                    if (descuent != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 5);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                                            if (descuent != 0)
                                                                precioUni = precioUni * (1 - descuent / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 5);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 5);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (descuent > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && descuent > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                    item.DescuentoPct += descuent;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct += descuent;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = descuent;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        try
                                        {   // Verifica si hay líneas de Texto
                                            int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                            string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                            item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc.ToString());
                                        }
                                        catch (Exception ex)
                                        { }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        /*if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            if (esNuevaVersionDGI)
                                                montoDescUni = item.DescuentoMonto / item.Cantidad;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("TECHM") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVABasico += item.MontoItem;
                                                    //TotalIVABasico += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("TECHM") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        /*// CODIGO PARA LAS RETENCIONES
                                        try
                                        {
                                            Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[1];
                                            RetPerc[] arrayItemRetPer = new RetPerc[1];

                                            Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                            //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                            totRetPerUnidad.CodRet = "2183119";
                                            totRetPerUnidad.ValRetPerc = montoTotalLinea;
                                            arrayRetPer[cont] = totRetPerUnidad;

                                            RetPerc itemRetPer = new RetPerc();
                                            itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                            itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                            itemRetPer.Tasa = 0;
                                            itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                            arrayItemRetPer[cont] = itemRetPer;
                                            //item.RetencPercep[0] = itemRetPer;
                                            item.RetencPercep = new RetPerc[oRSMyTable3.RecordCount];
                                            item.RetencPercep[0] = arrayItemRetPer[cont];
                                        }
                                        catch (Exception ex)
                                        {
                                            if (guardaLog == true)
                                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                        }
                                        // FINAL CODIGO RETENCIONES//*/
                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        producerArt += obtenerUserTextArticulo(itemCode); // Completa el campo Producer

                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";
                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;
                                            //montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }

                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.Cantidad = Math.Round(item.Cantidad, 3);
                                                item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                            }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }
                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                ////if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                ////    descuent = 0;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }

                                if (totales.MntNetoIvaTasaMin == 0)
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                else
                                    totales.MntNetoIvaTasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }

                                if (totales.MntNetoIVATasaBasica == 0)
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                else
                                    totales.MntNetoIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }

                                if (totales.MntNetoIVAOtra == 0)
                                    totales.MntNetoIVAOtraSpecified = false;
                                else
                                    totales.MntNetoIVAOtraSpecified = true;

                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                    totales.MntIVATasaMinSpecified = false;
                                else
                                    totales.MntIVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                    totales.MntIVATasaBasicaSpecified = false;
                                else
                                    totales.MntIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }

                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                // VERIFICO SI TIENE RETENCIONES
                                //oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry); // Obtengo las Retenciones del documento
                                TotalesRetencPercep[] arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                int contadorRetenciones = 0;
                                if (oRSMyTableRetenciones != null)
                                {
                                    while (!oRSMyTableRetenciones.EoF)
                                    {
                                        try
                                        {
                                            decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                            TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep();
                                            totRetPerUnidad.CodRet = "2183220";
                                            totRetPerUnidad.ValRetPerc = montoItemRetencion;
                                            arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                            montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                            RetPerc itemRetPer = new RetPerc();
                                            itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                            itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                            itemRetPer.Tasa = 0;
                                            itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                            arrayItemRetPer[contadorRetenciones] = itemRetPer;

                                            ////factura.Detalle[0].RetencPercep = new RetPerc[1]; Las comento para que el documento no salga con Retenciones
                                            ////factura.Detalle[0].RetencPercep[0] = itemRetPer;
                                        }
                                        catch (Exception ex)
                                        {
                                            if (guardaLog == true)
                                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                        }
                                        oRSMyTableRetenciones.MoveNext();
                                    }
                                }

                                //if (montoTotalRetenciones != 0) // Si tiene Retenciones
                                //{
                                //    montoTotalRetenciones = Math.Round(montoTotalRetenciones, 2);
                                //    totales.MntTotRetenido = montoTotalRetenciones;
                                //    totales.MntTotRetenidoSpecified = true;
                                //}


                                totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                // Se comento el 22/12 por problemas con las facturas de descuento 100%
                                // NUEVA LINEA POR PROBLEMAS DEL MONTONETO DE IVA
                                if (descEmpresa.ToString().Equals("ALMEN") && esNuevaVersionDGI == true && descuent == 100)
                                {
                                    TotalItemsGravadosIVABasico = 0; TotalItemsGravadosIVAMinimo = 0; TotalItemsGravadosIVAOtra = 0;
                                    TotalIVABasico = 0; TotalIVAMinimo = 0; TotalIVAOtra = 0;
                                    totales.MntPagar = 0; totales.MntTotal = 0;
                                    //descuent = 0;
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv > -1))
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                        }
                                    }
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal)
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento && totales.MntPagar != totales.MntTotal + (redondeoDocumento * -1))
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }
                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                ////if (montoTotalRetenciones != 0)
                                ////    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("DocDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;

                                totales.MontoNF = redondeoDocumento;

                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                // VALIDACION MNTPAGAR
                                try
                                {
                                    decimal diferenciaError = totales.MntPagar - (totales.MntTotal + totales.MntTotRetenido + totales.MontoNF);
                                    if (diferenciaError != 0 && diferenciaError < 1 && diferenciaError > -1)
                                    {
                                        if (diferenciaError <= Convert.ToDecimal(0.02) && diferenciaError >= Convert.ToDecimal(-0.02))
                                        {
                                            if (totales.MntTotal == totales.MntNoGrv && totales.MntTotRetenido == 0 && totales.MontoNF == 0) // Si el Monto Total = al Monto Exportacion y no tiene redondeo
                                                totales.MntPagar = totales.MntTotal;
                                            else
                                                totales.MntPagar = totales.MntTotal + totales.MntTotRetenido;
                                        }
                                        else
                                        {
                                            if (totales.MntNoGrv != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                            else if (totales.MntExpoyAsim != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                { }
                                // FINAL VALIDACION

                                encabezado.Totales = totales;
                                ////encabezado.Totales.RetencPercep = arrayRetPer; // No las agrego al documento

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        descuento.GlosaDR = "";


                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    factura.Encabezado.Totales.MntNoGrvSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }

                                                /*if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                {
                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item2; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(valorDR, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }
                                                else
                                                {
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }*/
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            if (descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI")) // Si es FITCO
                            {
                                SAPbobsCOM.Recordset orsMyTableAdenda = obtenerDatosAdendaFitco(codigoDocEntry.ToString(), "13");
                                if (orsMyTableAdenda != null)
                                {
                                    while (!orsMyTableAdenda.EoF)
                                    {
                                        sicfeAdenda = "VESSEL:                      " + orsMyTableAdenda.Fields.Item("Vessel").Value + "<br>";
                                        sicfeAdenda += "BILL OF LADING DATE:         " + oRSMyTable.Fields.Item("TaxDate").Value + "<br>"; // U_SI_DatDoc
                                        sicfeAdenda += "LOADING PORT:                " + orsMyTableAdenda.Fields.Item("LoadingPort").Value + "<br>";
                                        sicfeAdenda += "DISCHARGE PORT:              " + orsMyTableAdenda.Fields.Item("DischargePort").Value + "<br>";
                                        sicfeAdenda += "DELIVERY TERMS:              " + orsMyTableAdenda.Fields.Item("DeliveryTerms").Value + "<br>";
                                        sicfeAdenda += "PRO_FORMA INVOICE:           " + oRSMyTable.Fields.Item("U_SI_ProInv").Value + "<br>";
                                        sicfeAdenda += "BILL OF LADING No:           " + oRSMyTable.Fields.Item("U_SI_NumBIL").Value + "<br>";
                                        sicfeAdenda += "COUNTRY OF ORIGIN:           " + orsMyTableAdenda.Fields.Item("Origen").Value + "<br>";
                                        sicfeAdenda += "COUNTRY OF PROCEEDING:       " + orsMyTableAdenda.Fields.Item("Procedencia").Value + "<br>";
                                        sicfeAdenda += "COUNTRY OF AQUISITION:       " + "URUGUAY" + "<br>";
                                        sicfeAdenda += "Producer:                    " + producerArt.ToString() + "<br>";
                                        /*decimal totalNetWei = 0; decimal totalGrossWei = 0;
                                        if (!String.IsNullOrEmpty(Convert.ToString(oRSMyTable.Fields.Item("U_SI_NetWei").Value)))
                                            totalNetWei = Convert.ToDecimal(oRSMyTable.Fields.Item("U_SI_NetWei").Value);
                                        totalNetWei = Math.Round(totalNetWei, 3);
                                        if (!String.IsNullOrEmpty(Convert.ToString(oRSMyTable.Fields.Item("U_SI_GroWei").Value)))
                                            totalGrossWei = Convert.ToDecimal(oRSMyTable.Fields.Item("U_SI_GroWei").Value);
                                        totalGrossWei = Math.Round(totalGrossWei, 3);*/

                                        string netWe = "";
                                        try
                                        {
                                            netWe = string.Format("{0:0.000}", (double)oRSMyTable.Fields.Item("U_SI_NetWei").Value);
                                            if (netWe.Contains(".") && !netWe.Contains(","))
                                                netWe = netWe.Replace(".", ",");

                                            sicfeAdenda += "TOTAL NET WEIGHT KG:         " + netWe + "<br>";

                                            netWe = string.Format("{0:0.000}", (double)oRSMyTable.Fields.Item("U_SI_GroWei").Value);
                                            if (netWe.Contains(".") && !netWe.Contains(","))
                                                netWe = netWe.Replace(".", ",");

                                            sicfeAdenda += "TOTAL GROSS WEIGHT KG:       " + netWe + "<br>";
                                        }
                                        catch (Exception ex)
                                        { }

                                        //sicfeAdenda += "TOTAL NET WEIGHT KG:         " + totalNetWei.ToString() + "<br>";
                                        //sicfeAdenda += "TOTAL GROSS WEIGHT KG:       " + totalGrossWei.ToString() + "<br>";
                                        sicfeAdenda += "TOTAL CUBIC METERS:          " + oRSMyTable.Fields.Item("U_SI_CubMet").Value + "<br>";
                                        sicfeAdenda += "TOTAL OF BAGS:               " + oRSMyTable.Fields.Item("U_SI_TotBag").Value + "<br>";
                                        sicfeAdenda += "TOTAL OF CONTAINERS OF 20'': " + oRSMyTable.Fields.Item("U_SI_TotCon").Value + "<br>";
                                        sicfeAdenda += "TOTAL OF CONTAINERS OF 40'': " + oRSMyTable.Fields.Item("U_SI_TCon40").Value + "<br>";
                                        sicfeAdenda += "PACKING:                     " + obtenerPackingFitco(oRSMyTable.Fields.Item("U_SI_Packin").Value) + "<br>";
                                        sicfeAdenda += "BANK DETAILS:                " + bankDetails.ToString() + "<br>";
                                        sicfeAdenda += "ACCOUNT:                     " + bankAccount.ToString() + "<br>";
                                        sicfeAdenda += "ABA:                         " + bankAba.ToString() + "<br>";
                                        sicfeAdenda += "SWIFT:                       " + bankSwift.ToString() + "<br>";
                                        if (descEmpresa.ToString().Equals("FITCO"))
                                            sicfeAdenda += "BENEFICIARY:                 " + "FITCO INTERNATIONAL SA" + "<br>";
                                        else
                                            sicfeAdenda += "BENEFICIARY:                 " + "FITCO OCI AGRO SA" + "<br>";
                                        sicfeAdenda += "PAYMENTS TERMS:              " + orsMyTableAdenda.Fields.Item("PaymentTerms").Value + "<br>";

                                        orsMyTableAdenda.MoveNext();
                                    }
                                }
                            }

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA")) // Si es La Tentacion
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            try
                            {
                                if (esContado == true) // Si es un documento contado
                                {
                                    if (!String.IsNullOrEmpty((string)oRSMyTable.Fields.Item("U_MEDIO_PAGO_DGI").Value))
                                    {
                                        MediosPagoMedioPago[] arrayMedios = new MediosPagoMedioPago[1];
                                        MediosPagoMedioPago mediosPago = new MediosPagoMedioPago();

                                        mediosPago.NroLinMP = "1";
                                        mediosPago.CodMP = "1";
                                        mediosPago.GlosaMP = obtenerDescripcionMedioPago((string)oRSMyTable.Fields.Item("U_MEDIO_PAGO_DGI").Value);
                                        mediosPago.OrdenMP = "1";
                                        mediosPago.ValorPago = factura.Encabezado.Totales.MntPagar;
                                        arrayMedios[0] = mediosPago;
                                        factura.MediosPago = arrayMedios;
                                    }
                                }
                            }
                            catch (Exception ex)
                            { }

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            return result;
        }

        public String GenerarXmlNotaCredito(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                TotalesRetencPercep[] arrayRetPer = null; RetPerc[] arrayItemRetPer = null;
                int cantLineasDocumento = oRSMyTable3.RecordCount;
                //oRSMyTable3 = ObtenerArticulosNotaCredito(codigoFactura);
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                double recargoCliente = 0; double saldoCliente = 0;
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0; decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal montoTotalItems = 0;
                decimal redondeoDocumento = 0; decimal montoTotalRetenciones = 0; bool hayItemRedondeo = false;
                bool esContingencia = false; int documentoBaseRural = 0;
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                bool ocultoDescuento = true;
                decimal cantPiezas = 0;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();
                            //CAE

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                // Me quedo con la tabla de Retenciones
                                if (descEmpresa.Equals("HENDE"))
                                {
                                    oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry, pFormFactura); // Obtengo las Retenciones del documento
                                    arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                    arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                }

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                if (descEmpresa.ToString().Equals("RURAL")) //Si es almacen rural
                                {
                                    idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign2").Value);
                                }
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA") || descEmpresa.Equals("RURAL"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }

                                if (descEmpresa.Equals("RURAL"))
                                {
                                    idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";
                            factura.CAEData = cae;
                            //Encabezado

                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            // IdDoc
                            try
                            {
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        int numRojo = 0;

                                        if (descEmpresa.ToString().Equals("BOSCH"))
                                            numRojo = oRSMyTable.Fields.Item("U_NUMROJO").Value;
                                        else
                                            numRojo = oRSMyTable.Fields.Item("U_NumFactura").Value;

                                        if (numRojo != 0)
                                        {
                                            DateTime fechaDocContingencia = oRSMyTable.Fields.Item("DocDate").Value;
                                            DateTime fechaIniContingencia = Convert.ToDateTime("01/04/2015");
                                            DateTime fechaFinContingencia = Convert.ToDateTime("29/02/2016");
                                            if (fechaDocContingencia >= fechaIniContingencia && fechaDocContingencia <= fechaFinContingencia || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                            {
                                                //if ((descEmpresa.ToString().Equals("BOSCH") && numRojo >= 7901 && numRojo <= 10400 && fechaDocContingencia >= Convert.ToDateTime("01/04/2015")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                if ((descEmpresa.ToString().Equals("BOSCH") && fechaDocContingencia < Convert.ToDateTime("01/03/2016")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                {
                                                    idDoc.Nro = numRojo.ToString();
                                                    idDoc.Serie = "A";
                                                    if (descEmpresa.ToString().Equals("BOSCH"))
                                                        idDoc.Serie = "B";
                                                    esContingencia = true;
                                                }
                                            }
                                        }
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Verificar Doc Contingencia", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                else
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null)
                                {
                                    idDoc.FchVencSpecified = false;
                                }
                                else
                                {
                                    idDoc.FchVencSpecified = true;
                                }
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = false;

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                }
                                else
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                }

                                // VERIFICACION DEL INDICADOR PARA BOSCH REMILER Y SOLGEO
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                        if (indicador.ToString().Equals("14")) // Es contado
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                        else if (indicador.ToString().Equals("08")) // Es credito
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item102 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item202)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item202;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item212;
                                }

                                encabezado.IdDoc = idDoc;
                            }
                            catch (Exception ex) { }
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor();
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                receptor.DirRecep = oRSMyTable.Fields.Item("Address").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                bool agregoCeroRUT = false; // Indica si le agrega un 0 adelante al RUT

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; // Le cargo la direccion de correo electronico
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        if (descEmpresa.Equals("TRIGE") || descEmpresa.Equals("POCHA") || descEmpresa.Equals("ALMEN"))
                                            receptor.LugarDestEnt = oRSMyTable2.Fields.Item("GlblLocNum").Value;
                                        else if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                        if (descEmpresa.ToString().Equals("ETARE"))
                                            saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", ""); // Aca se guarda el RUC del documento
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                                agregoCeroRUT = true;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    // Si no tiene ningun numero de Rut, CI entonces es un eTicket
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                            else
                                            {
                                                // Si no es un cliente Uruguayo
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                                receptor.TipoDocRecep = DocType.Item4;
                                                tipo = "eTck";
                                            }
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso("", codigoFactura, "ERROR al Cargar Receptor Rec02", ex.Message.ToString()); }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                {
                                    // Para el nuevo cambio de Trialand
                                    if (!tipo.Equals("eTck") && ObtenerClienteVatStatusExtranjero(codCliente, "C") == true)
                                    {
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        receptor.TipoDocRecep = DocType.Item4;
                                    }
                                }

                                if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;

                                    if (tipo.ToString().Equals("eFact") && agregoCeroRUT == true)
                                    {   // Entonces es eTicket. No puede hacer una eFactura a un cliente que no sea RUT Uruguayo
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        receptor.DocRecep = receptor.DocRecep.ToString().Substring(1, receptor.DocRecep.Length - 1);
                                    }
                                    /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                    {
                                        if (receptor.CodPaisRecep != CodPaisType.UY)
                                            esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        else
                                            esDocUruguayo = true;
                                    }*/
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (descEmpresa.ToString().Equals("ETARE"))
                                {
                                    if (codCliente.ToUpper().Contains("PPL") || codCliente.ToUpper().Contains("ETY") || codCliente.ToUpper().Contains("INR") || receptor.RznSocRecep.ToUpper().Contains("PPL") || receptor.RznSocRecep.ToUpper().Contains("ETY") || receptor.RznSocRecep.ToUpper().Contains("INR"))
                                    {
                                        esDocUruguayo = false;
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "-";
                                        receptor.RznSocRecep = "";
                                        receptor.CodPaisRecep = CodPaisType.Item99;
                                    }
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item102 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item202)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item202;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item212;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { guardaLogProceso("", codigoFactura, "ERROR al Cargar Receptor", e.Message.ToString()); }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = true;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("TECHM") || descEmpresa.ToString().Equals("MAVIN"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                    {
                                        redondeoDocumento = 0;
                                    }
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if ((descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL")) && descuent != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (descuent < 0 && descuent > -1)
                                                descuent = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            if (String.IsNullOrEmpty(documentoBaseRural.ToString()) || documentoBaseRural == 0)
                                                documentoBaseRural = (int)oRSMyTable3.Fields.Item("BaseDocNum").Value; // Me guardo el documento Base para el Adenda

                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA") && !descEmpresa.ToString().Equals("TRIAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                                {
                                                    if (String.IsNullOrEmpty(oRSMyTable3.Fields.Item("U_EXX_ITEMFACTURA").Value))
                                                        item.NomItem = item.DscItem + " - " + item.NomItem;
                                                    else
                                                        item.NomItem = oRSMyTable3.Fields.Item("U_EXX_ITEMFACTURA").Value + " - " + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("MILDA"))
                                                {
                                                    try
                                                    {
                                                        item.NomItem = item.NomItem + " " + oRSMyTable3.Fields.Item("U_Marca").Value + " " + oRSMyTable3.Fields.Item("U_Campana").Value + " " + oRSMyTable3.Fields.Item("U_UBICACION").Value;
                                                        DateTime fechaInicioM = oRSMyTable3.Fields.Item("U_Inicio").Value;
                                                        DateTime fechaFinM = oRSMyTable3.Fields.Item("U_Fin").Value;
                                                        if (fechaInicioM.Year > 2000) // Si tiene una Fecha correcta
                                                            item.NomItem = item.NomItem + " " + fechaInicioM.ToShortDateString() + "-" + fechaFinM.ToShortDateString();
                                                    }
                                                    catch (Exception exM)
                                                    { }
                                                }
                                                else if (descEmpresa.ToString().Equals("TECHM"))
                                                    item.UniMed = "Uni";

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                //else if (descEmpresa.ToString().Equals("RURAL"))
                                                //    item.DscItem = lineaRec.LoteBatchNum;
                                                else
                                                    item.DscItem = "";
                                            }

                                            if (descEmpresa.ToString().Equals("GENIA"))
                                            {
                                                try
                                                {   // Verifica si hay líneas de Texto
                                                    int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                                    string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                    item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc.ToString());
                                                }
                                                catch (Exception ex)
                                                { }
                                            }

                                            if (item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                            montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0)
                                                    {
                                                        if (descuent == 0 || (descEmpresa.ToString().Equals("BOSCH") && descuent != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }
                                                }
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
                                                else
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                            if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))
                                                montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        // SE COMENTAN LAS SIGUIENTES 3 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        //if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                        //    if ((montoTotalLinea - montoCalculado < 1 && montoTotalLinea - montoCalculado > -1) || (montoCalculado - montoTotalLinea < 1 && montoCalculado - montoTotalLinea > -1)) // Si la diferencia es de centésimos 
                                        //        montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2);

                                            if (moneda.ToString().Equals(monedaArticulo)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3);
                                        }

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false)) // || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH")) // Solo si es ANCAL
                                                        imprimeDescuento = false;
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                                    if (descuent != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                                            if (descuent != 0)
                                                                precioUni = precioUni * (1 - descuent / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (descuent > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && descuent != 0) // ANTES if (item.DescuentoPct != 0 && descuent > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                    item.DescuentoPct += descuent;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                if (descEmpresa.ToString().Equals("RURAL"))
                                                {
                                                    item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                }
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct += descuent;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("CIMSA") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("MAVIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = descuent;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("TECHM"))
                                        {
                                            if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                                        if (item.DescuentoPct != 0 && descuent <= 0)
                                                            item.DescuentoMontoSpecified = true;
                                                    }
                                                }
                                            }
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        int contadorRetenciones = 0;
                                        if (oRSMyTableRetenciones != null)
                                        {
                                            try
                                            {
                                                while (!oRSMyTableRetenciones.EoF)
                                                {
                                                    try
                                                    {
                                                        decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                                        //TotalesRetencPercep totRetPerUnidad = new TotalesRetencPercep(); // Comentado 22/06
                                                        //totRetPerUnidad.CodRet = (string)oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                                        //totRetPerUnidad.ValRetPerc = montoItemRetencion;
                                                        //arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                                        montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                                        //RetPerc itemRetPer = new RetPerc(); // Comentado 22/06
                                                        //itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                                        //itemRetPer.MntSujetoaRet = item.MontoItem; // totRetPerUnidad.ValRetPerc;
                                                        //itemRetPer.Tasa = Math.Round((100 * totRetPerUnidad.ValRetPerc) / item.MontoItem, 2);
                                                        //itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                                        //arrayItemRetPer[contadorRetenciones] = itemRetPer;
                                                        //contadorRetenciones++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                    }
                                                    oRSMyTableRetenciones.MoveNext();
                                                }
                                                //item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount]; // Comentado 22/06
                                                //item.RetencPercep = arrayItemRetPer;
                                            }
                                            catch (Exception ex)
                                            {
                                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR RetenPercep agregando items al XML", ex.Message.ToString());
                                            }
                                        }

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            if (esNuevaVersionDGI)
                                                montoDescUni = item.DescuentoMonto / item.Cantidad;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;

                                                    if (descuent != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1))) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;

                                                    if (descuent != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                        if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                            if (item.MontoItem != item.PrecioUnitario)
                                                item.PrecioUnitario = item.MontoItem;

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                        montoTotalItems += item.MontoItem;

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            redondeoDocumento = Math.Round(redondeoDocumento, 2);
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";
                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;
                                            //montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                            TotalIVAMinimo += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                            TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.Cantidad = Math.Round(item.Cantidad, 3);
                                                item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();
                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = (decimal)cotizacion;
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                //////// NUEVA LINEA POR PROBLEMAS DEL MONTONETO DE IVA
                                //////if (descEmpresa.ToString().Equals("ALMEN") && esNuevaVersionDGI == true && descuent == 100)
                                //////    descuent = 0;

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }

                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                if (totales.MntNetoIvaTasaMin == 0)
                                {
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                if (totales.MntNetoIVATasaBasica == 0)
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                if (totales.MntNetoIVAOtra == 0)
                                {
                                    totales.MntNetoIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVAOtraSpecified = true;
                                }
                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                {
                                    totales.MntIVATasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                {
                                    totales.MntIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                decimal sumaMontos = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                if (sumaMontos == totales.MntNoGrv) // Si el total es todo de Monto items No Gravados con IVA
                                {
                                    if (sumaMontos != 0 && ((sumaMontos - montoTotalItems <= 1 && sumaMontos - montoTotalItems > 0) || (montoTotalItems - sumaMontos <= 1 && montoTotalItems - sumaMontos > 0)))
                                    {
                                        sumaMontos = montoTotalItems;
                                        totales.MntNoGrv = montoTotalItems;
                                    }
                                }

                                //if (montoTotalRetenciones != 0) // Si tiene Retenciones // Comentado 22/06
                                //{
                                //    try
                                //    {
                                //        montoTotalRetenciones = Math.Round(montoTotalRetenciones, 2);
                                //        totales.MntTotRetenido = montoTotalRetenciones;
                                //        totales.MntTotRetenidoSpecified = true;

                                //        totales.RetencPercep = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                //        totales.RetencPercep = arrayRetPer;
                                //    }
                                //    catch (Exception ex)
                                //    { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Cargando RetenPercep en Totales", ex.Message.ToString()); }
                                //}

                                totales.MntTotal = sumaMontos;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv > -1) && redondeoDocumento == 0)
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNoGrv;
                                            sumaMontos = totales.MntTotal;
                                        }
                                    }
                                }

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal)
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento && totales.MntPagar != totales.MntTotal + (redondeoDocumento * -1))
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }
                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                // Comentado por problemas en BOSCH
                                if (sumaMontos != totales.MntTotal && totales.MntNoGrv > 0) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    sumaMontos = totales.MntNoGrv;
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0, MidpointRounding.ToEven);
                                    if (sumaMontos != totales.MntTotal)
                                        if ((sumaMontos - totales.MntTotal) <= 1 || (totales.MntTotal - sumaMontos) <= 1)
                                            totales.MntNoGrv = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de Redondeo
                                }

                                //if (montoTotalRetenciones != 0) // Comentado 22/06
                                //    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                if (totales.TpoMoneda != TipMonType.UYU)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 3, MidpointRounding.ToEven);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2, MidpointRounding.ToEven);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2, MidpointRounding.ToEven);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;
                                totales.MontoNF = redondeoDocumento;

                                totales.MontoNF = Math.Round(totales.MontoNF, 2, MidpointRounding.ToEven);
                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL")) // Si no es Dreghal ni Ancal
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                    montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                else
                                                {
                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);
                                                }

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                                /*if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                {
                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item2; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(valorDR, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }
                                                else
                                                {
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }*/
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            //Referencias
                            try
                            {
                                int num = 1;

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaNotaCredito(codigoDocEntry); // Le paso el DocEntry

                                bool notaCredGlobal = false;
                                if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                    if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                        notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                if (oRSMyTableDocRef.RecordCount == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                        refe.RazonRef = oRSMyTable.Fields.Item("NumAtCard").Value;
                                    if (descEmpresa.ToString().Equals("POCHA"))
                                    {
                                        refe.RazonRef = oRSMyTable.Fields.Item("NumAtCard").Value;
                                    }
                                    if (String.IsNullOrEmpty(refe.RazonRef))
                                    {
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    }
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (oRSMyTableDocRef.RecordCount > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];

                                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                        if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                            notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    if (oRSMyTableDocRef != null)
                                    {
                                        while (!oRSMyTableDocRef.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                            int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                            if (String.IsNullOrEmpty(serie) || nro == null || nro == 0 || notaCredGlobal == true)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                                    refe.RazonRef = "Descuentos sobre las facturas del mes";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                {
                                                    refe.TpoDocRef = CFEType.Item111;
                                                }
                                                else if (tipo == 101)
                                                {
                                                    refe.TpoDocRef = CFEType.Item101;
                                                }
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTableDocRef.MoveNext();
                                        }
                                    }

                                    #region "Comentado"
                                    ////if (facturas.Count == 0)
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ////    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////    refe.NroLinRef = "1";
                                    ////    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////    refe.IndGlobalSpecified = true;
                                    ////    refe.TpoDocRefSpecified = false;
                                    ////    refe.RazonRef = "Referencia a documento no codificado";
                                    ////    refe.FechaCFErefSpecified = false;
                                    ////    referencia[0] = refe;
                                    ////    factura.Referencia = referencia;
                                    ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////}
                                    ////else if (facturas.Count > 40)
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ////    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////    refe.NroLinRef = "1";
                                    ////    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////    refe.IndGlobalSpecified = true;
                                    ////    refe.TpoDocRefSpecified = false;
                                    ////    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    ////    refe.FechaCFErefSpecified = false;
                                    ////    referencia[0] = refe;
                                    ////    factura.Referencia = referencia;
                                    ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////}
                                    ////else
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[facturas.Count];
                                    ////    foreach (int i in facturas)
                                    ////    {
                                    ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////        SAPbobsCOM.Recordset oRSMyTable4 = ObtenerFactura(i.ToString(), pFormFactura);
                                    ////        if (oRSMyTable4 != null)
                                    ////        {
                                    ////            while (!oRSMyTable4.EoF)
                                    ////            {
                                    ////                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////                ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////                refe.NroLinRef = num.ToString();
                                    ////                String serie = oRSMyTable4.Fields.Item("FolioPref").Value;
                                    ////                int nro = oRSMyTable4.Fields.Item("FolioNum").Value;
                                    ////                int tipo = Int32.Parse(oRSMyTable4.Fields.Item("Ref2").Value);
                                    ////                if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                                    ////                {
                                    ////                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////                    refe.IndGlobalSpecified = true;
                                    ////                    refe.TpoDocRefSpecified = false;
                                    ////                    refe.RazonRef = "Referencia a documento no codificado";
                                    ////                    refe.FechaCFErefSpecified = false;
                                    ////                }
                                    ////                else
                                    ////                {
                                    ////                    refe.IndGlobalSpecified = false;
                                    ////                    refe.TpoDocRefSpecified = true;
                                    ////                    if (tipo == 111)
                                    ////                    {
                                    ////                        refe.TpoDocRef = CFEType.Item111;
                                    ////                    }
                                    ////                    else if (tipo == 101)
                                    ////                    {
                                    ////                        refe.TpoDocRef = CFEType.Item101;
                                    ////                    }
                                    ////                    refe.Serie = serie;
                                    ////                    refe.NroCFERef = nro.ToString();
                                    ////                    refe.FechaCFErefSpecified = false;
                                    ////                }

                                    ////                referencia[num - 1] = refe;
                                    ////                num++;
                                    ////                oRSMyTable4.MoveNext();
                                    ////            }
                                    ////        }

                                    ////    }
                                    #endregion

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            string saltoLinea = "<br>";
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                saltoLinea = "\r\n";

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + saltoLinea;// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + saltoLinea; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + saltoLinea; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + saltoLinea; // Forma de Pago 

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA"))
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "SALTOLINEA"; // Forma de Pago 
                                sicfeAdenda = "Obs. Cliente: " + oRSMyTable.Fields.Item("U_Obcli").Value + "SALTOLINEA"; // Observaciones del Cliente 
                                sicfeAdenda += "Dir Entrega: " + oRSMyTable.Fields.Item("Address2").Value + "SALTOLINEA";
                                sicfeAdenda += "Contacto: " + oRSMyTable.Fields.Item("U_CONTACTO").Value + "SALTOLINEA";
                                sicfeAdenda += "Telefono: " + oRSMyTable.Fields.Item("U_TELEFONO").Value + "SALTOLINEA";
                                sicfeAdenda += "Responsable: " + obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "SALTOLINEA";
                                sicfeAdenda += "Transportista: " + ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura) + "SALTOLINEA";
                                sicfeAdenda += "Documento Interno: " + codigoFactura.ToString() + "SALTOLINEA";
                                sicfeAdenda += "Documento Enlazado: " + documentoBaseRural.ToString() + "SALTOLINEA";

                                if (esContado == false)
                                {
                                    sicfeAdenda += "Orden Compra: " + oRSMyTable.Fields.Item("U_ORDCOMPRA").Value + "SALTOLINEA";
                                    sicfeAdenda += "Firmo factura dando conformidad a mercadería y precios detallados y abonaré en el plazo y condiciones pactadas. SALTOLINEA";
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. El no pago del precio en el plazo estipulado, generará el máximo interés legal permitido por la ley. SALTOLINEA";
                                    sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                    sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                    sicfeAdenda += "C.I______________________Fecha__________________. SALTOLINEA";
                                }
                                else
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. SALTOLINEA";
                            }
                            else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                            {
                                sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                            {
                                sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                if (montoTotalRetenciones != 0)
                                    sicfeAdenda += "Monto Retención: " + Math.Round(montoTotalRetenciones, 2).ToString();
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    sicfeAdenda += "Cambio 30 días <br>";
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                            else if (descEmpresa.ToString().Equals("ETARE"))
                            {
                                if (factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item112 && factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item212)
                                    sicfeAdenda += "Saldo: UYU " + saldoCliente + "<br>"; // Saldo si es eTicket o NC de eTicket
                            }
                            else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                sicfeAdenda += obtenerRemarks(14) + "\r\n";
                            else if (descEmpresa.ToString().Equals("MAVIN")) //ASPL - 2019.04.25 - Motivos de devolucion
                            {
                                sicfeAdenda += "";
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Nota Credito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlNotaCreditoFITCO(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                int cantLineasDocumento = oRSMyTable3.RecordCount;
                //oRSMyTable3 = ObtenerArticulosNotaCredito(codigoFactura);
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                double recargoCliente = 0;
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0; decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal montoTotalItems = 0;
                decimal redondeoDocumento = 0; bool hayItemRedondeo = false;
                bool esContingencia = false; int documentoBaseRural = 0;
                string producerArt = ""; string bankDetails = ""; string bankAccount = ""; string bankAba = ""; string bankSwift = "";
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                bool ocultoDescuento = true;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();
                            //CAE

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                // Me quedo con la tabla de Retenciones
                                oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry, pFormFactura); // Obtengo las Retenciones del documento

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";
                            factura.CAEData = cae;
                            //Encabezado

                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            // IdDoc
                            try
                            {
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                if (indicador.ToString().Equals("99")) // Es contingencia
                                {
                                    try
                                    {
                                        int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                        string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                        if (folioDocumento != 0)
                                        {
                                            idDoc.Nro = folioDocumento.ToString();
                                            idDoc.Serie = SerieDocumento;
                                            esContingencia = true;
                                        }
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { }

                                //idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchEmis = oRSMyTable.Fields.Item("DocDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null)
                                {
                                    idDoc.FchVencSpecified = false;
                                }
                                else
                                {
                                    idDoc.FchVencSpecified = true;
                                }
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = false;

                                try
                                {
                                    if (EsContadoFitco(oRSMyTable.Fields.Item("U_SI_PayTer").Value))
                                        idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                    else
                                        idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                }
                                catch (Exception ex)
                                { idDoc.FmaPago = IdDoc_FactFmaPago.Item1; }

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item102 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item202)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item202;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item212;
                                }

                                encabezado.IdDoc = idDoc;
                            }
                            catch (Exception ex) { }
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor();
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                string freeText = "";
                                string infoAdicionalClienteFitco = "";
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        freeText = oRSMyTable2.Fields.Item("Free_Text").Value;
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        infoAdicionalClienteFitco = "CEP: " + receptor.CP + " ";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal
                                        receptor.CP = "0";

                                        string numeroDireccion = oRSMyTable5.Fields.Item("StreetNo").Value;
                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; // Le cargo la direccion de correo electronico
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        infoAdicionalClienteFitco = receptor.DirRecep + " " + numeroDireccion + " " + oRSMyTable5.Fields.Item("Block").Value + "," + infoAdicionalClienteFitco + " " + receptor.CiudadRecep + " " + receptor.DeptoRecep + " " + receptor.PaisRecep;
                                        receptor.InfoAdicional = infoAdicionalClienteFitco;

                                        /*string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }*/

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", ""); // Aca se guarda el RUC del documento
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.DocRecep = rucDocumento.ToString();

                                            if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                            {
                                                // Si no tiene ningun numero de Rut, CI entonces es un eTicket
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                                tipo = "eTck";
                                                receptor.TipoDocRecep = DocType.Item4;
                                                receptor.DocRecep = "99";
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        try
                                        {
                                            bankDetails = obtenerNombreBanco(oRSMyTable2.Fields.Item("HouseBank").Value);
                                            bankAccount = oRSMyTable2.Fields.Item("HousBnkAct").Value;
                                            bankAba = oRSMyTable2.Fields.Item("HsBnkIBAN").Value;
                                            bankSwift = oRSMyTable2.Fields.Item("HsBnkSwift").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }

                                if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                //if (!receptor.CodPaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                {
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                    tipo = "eTck";

                                    string cnpj = "";
                                    try
                                    {
                                        // Si tiene CNPJ en FreeText
                                        if (freeText.Contains("CNPJ"))
                                        {
                                            int inicialChar = freeText.LastIndexOf("CNPJ");
                                            int finalChar = freeText.Length;
                                            string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                            textoReemplazar = textoReemplazar.Substring(0, 24);
                                            cnpj = textoReemplazar.Replace("CNPJ", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                            if (!String.IsNullOrEmpty(cnpj.ToString()))
                                            {
                                                //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                receptor.TipoDocRecep = DocType.Item6; // DNI Documento Arg, Bra, Par o Chi
                                                receptor.DocRecep = cnpj.ToString();
                                                receptor.CodPaisRecep = CodPaisType.BR;
                                            }
                                        }
                                        else
                                        {
                                            // Entonces es Otro
                                            int inicialChar = freeText.LastIndexOf("Otro");
                                            int finalChar = freeText.Length;
                                            string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                            //textoReemplazar = textoReemplazar.Substring(0, 24);
                                            cnpj = textoReemplazar.Replace("Otro", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                            if (!String.IsNullOrEmpty(cnpj.ToString()))
                                            {
                                                //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                receptor.TipoDocRecep = DocType.Item4; // DNI Documento Arg, Bra, Par o Chi
                                                receptor.DocRecep = cnpj.ToString();
                                                receptor.CodPaisRecep = CodPaisType.Item99; // Pais "Otros"

                                                receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais NUEVA LINEA
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    { }

                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                }
                                else
                                {
                                    // Con Dirección Uruguay es eFactura
                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                    tipo = "eFact";

                                    if (receptor.DocRecep.ToString().Length == 12) // Tiene RUC
                                        receptor.TipoDocRecep = DocType.Item2;
                                    else if (receptor.DocRecep.ToString().Length >= 7 && receptor.DocRecep.ToString().Length <= 10)
                                        receptor.TipoDocRecep = DocType.Item3;
                                    else if (receptor.DocRecep.ToString().Length == 11 && ValidarRUC("0" + receptor.DocRecep))
                                    {
                                        receptor.TipoDocRecep = DocType.Item2;
                                        receptor.DocRecep = "0" + receptor.DocRecep;
                                    }
                                    else
                                        receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                }

                                if (receptor.TipoDocRecep == DocType.Item4 || receptor.TipoDocRecep == DocType.Item6)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) || receptor.CodPaisRecep == CodPaisType.UY)
                                    {
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;
                                        else
                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais NUEVA LINEA
                                    }

                                    /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                    {
                                        if (receptor.CodPaisRecep != CodPaisType.UY)
                                            esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        else
                                            esDocUruguayo = true;
                                    }*/
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);
                                if (receptor.InfoAdicional.ToString().Length > 150)
                                    receptor.InfoAdicional = receptor.RznSocRecep.ToString().Substring(0, 150);

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item102 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item202)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item202;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item212;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("SCHIN"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0 || descEmpresa.ToString().Equals("RURAL")))
                                    {
                                        redondeoDocumento = 0;
                                    }
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if ((descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL")) && descuent != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (descuent < 0 && descuent > -1)
                                                descuent = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            if (String.IsNullOrEmpty(documentoBaseRural.ToString()) || documentoBaseRural == 0)
                                                documentoBaseRural = (int)oRSMyTable3.Fields.Item("BaseDocNum").Value; // Me guardo el documento Base para el Adenda

                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;
                                        string itemCode = oRSMyTable3.Fields.Item("ItemCode").Value;
                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                //string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                //if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                //    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                            montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0)
                                                    {
                                                        if (descuent == 0 || (descEmpresa.ToString().Equals("BOSCH") && descuent != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }
                                                }
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
                                                else
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 5);
                                                }
                                            }
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea


                                        // SE COMENTAN LAS SIGUIENTES 3 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        //if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                        //    if ((montoTotalLinea - montoCalculado < 1 && montoTotalLinea - montoCalculado > -1) || (montoCalculado - montoTotalLinea < 1 && montoCalculado - montoTotalLinea > -1)) // Si la diferencia es de centésimos 
                                        //        montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 5);

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false)) // || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH")) // Solo si es ANCAL
                                                        imprimeDescuento = false;
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                                    if (descuent != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 5);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                                            if (descuent != 0)
                                                                precioUni = precioUni * (1 - descuent / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 5);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 5);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (descuent > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && descuent != 0) // ANTES if (item.DescuentoPct != 0 && descuent > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                    item.DescuentoPct += descuent;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                if (descEmpresa.ToString().Equals("RURAL"))
                                                {
                                                    item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                }
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct += descuent;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = descuent;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        try
                                        {   // Verifica si hay líneas de Texto
                                            int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                            string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                            item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc.ToString());
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            if (esNuevaVersionDGI)
                                                montoDescUni = item.DescuentoMonto / item.Cantidad;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                    TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVABasico += item.MontoItem;
                                                    //TotalIVABasico += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                        if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                            if (item.MontoItem != item.PrecioUnitario)
                                                item.PrecioUnitario = item.MontoItem;

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2);
                                        montoTotalItems += item.MontoItem;
                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        producerArt += obtenerUserTextArticulo(itemCode); // Completa el campo Producer

                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";
                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;

                                            montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.Cantidad = Math.Round(item.Cantidad, 3);
                                                item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();
                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                //////// NUEVA LINEA POR PROBLEMAS DEL MONTONETO DE IVA
                                //////if (descEmpresa.ToString().Equals("ALMEN") && esNuevaVersionDGI == true && descuent == 100)
                                //////    descuent = 0;

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }

                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                if (totales.MntNetoIvaTasaMin == 0)
                                {
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                if (totales.MntNetoIVATasaBasica == 0)
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                if (totales.MntNetoIVAOtra == 0)
                                {
                                    totales.MntNetoIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVAOtraSpecified = true;
                                }
                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                {
                                    totales.MntIVATasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                {
                                    totales.MntIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                decimal sumaMontos = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                if (sumaMontos == totales.MntNoGrv) // Si el total es todo de Monto items No Gravados con IVA
                                {
                                    if (sumaMontos != 0 && ((sumaMontos - montoTotalItems <= 1 && sumaMontos - montoTotalItems > 0) || (montoTotalItems - sumaMontos <= 1 && montoTotalItems - sumaMontos > 0)))
                                    {
                                        sumaMontos = montoTotalItems;
                                        totales.MntNoGrv = montoTotalItems;
                                    }
                                }

                                totales.MntTotal = sumaMontos;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv >= -1))
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNoGrv;
                                            sumaMontos = totales.MntTotal;
                                        }
                                    }
                                }

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal)
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento && totales.MntPagar != totales.MntTotal + (redondeoDocumento * -1))
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }

                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                // Comentado por problemas en BOSCH
                                if (sumaMontos != totales.MntTotal && totales.MntNoGrv > 0) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    sumaMontos = totales.MntNoGrv;
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (sumaMontos != totales.MntTotal)
                                        if ((sumaMontos - totales.MntTotal) <= 1 || (totales.MntTotal - sumaMontos) <= 1)
                                            totales.MntNoGrv = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de Redondeo
                                }

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("DocDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                    }
                                    if (totales.TpoCambio != 0)
                                        totales.TpoCambioSpecified = true;
                                    else
                                        totales.TpoCambioSpecified = false;
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;
                                totales.MontoNF = redondeoDocumento;

                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                // VALIDACION MNTPAGAR
                                try
                                {
                                    decimal diferenciaError = totales.MntPagar - (totales.MntTotal + totales.MntTotRetenido + totales.MontoNF);
                                    if (diferenciaError != 0 && diferenciaError < 1 && diferenciaError > -1)
                                    {
                                        if (diferenciaError <= Convert.ToDecimal(0.02) && diferenciaError >= Convert.ToDecimal(-0.02))
                                        {
                                            if (totales.MntTotal == totales.MntNoGrv && totales.MntTotRetenido == 0 && totales.MontoNF == 0) // Si el Monto Total = al Monto Exportacion y no tiene redondeo
                                                totales.MntPagar = totales.MntTotal;
                                            else
                                                totales.MntPagar = totales.MntTotal + totales.MntTotRetenido;
                                        }
                                        else
                                        {
                                            if (totales.MntNoGrv != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                            else if (totales.MntExpoyAsim != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                { }
                                // FINAL VALIDACION

                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL")) // Si no es Dreghal ni Ancal
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                                /*if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                {
                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item2; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(valorDR, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }
                                                else
                                                {
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }*/
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            //Referencias
                            try
                            {
                                int num = 1;

                                string tipoDocumentosReferencia = oRSMyTable.Fields.Item("U_TIPOREF").Value;
                                string documentosReferencia = oRSMyTable.Fields.Item("U_SI_ComInv").Value;
                                List<clsObjeto> listaReferencias = crearListaReferencia(documentosReferencia);

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaNotaCredito(codigoDocEntry); // Le paso el DocEntry

                                bool notaCredGlobal = false;
                                if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                    if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                        notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                if (listaReferencias.Count == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (listaReferencias.Count > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[listaReferencias.Count];

                                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                        if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                            notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    if (listaReferencias != null)
                                    {
                                        foreach (clsObjeto objetoReferencia in listaReferencias)
                                        {
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = objetoReferencia.Serie;
                                            int nro = Convert.ToInt32(objetoReferencia.Folio);
                                            int tipo = 0;
                                            if (!tipoDocumentosReferencia.ToString().Equals("XXX") && !String.IsNullOrEmpty(tipoDocumentosReferencia.ToString()))
                                            {
                                                tipo = Convert.ToInt32(tipoDocumentosReferencia);
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                    refe.TpoDocRef = CFEType.Item111;
                                                else if (tipo == 101)
                                                    refe.TpoDocRef = CFEType.Item101;
                                                else if (tipo == 112)
                                                    refe.TpoDocRef = CFEType.Item112;
                                                else if (tipo == 113)
                                                    refe.TpoDocRef = CFEType.Item113;
                                                else if (tipo == 102)
                                                    refe.TpoDocRef = CFEType.Item102;
                                                else if (tipo == 103)
                                                    refe.TpoDocRef = CFEType.Item103;
                                                else if (tipo == 121)
                                                    refe.TpoDocRef = CFEType.Item121;
                                                else if (tipo == 122)
                                                    refe.TpoDocRef = CFEType.Item122;
                                                else if (tipo == 201)
                                                    refe.TpoDocRef = CFEType.Item201;
                                                else if (tipo == 211)
                                                    refe.TpoDocRef = CFEType.Item211;
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                        }
                                    }

                                    //ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];

                                    //if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                    //    if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                    //        notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    //if (oRSMyTableDocRef != null)
                                    //{
                                    //    while (!oRSMyTableDocRef.EoF)
                                    //    {
                                    //        //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                    //        ReferenciaReferencia refe = new ReferenciaReferencia();
                                    //        refe.NroLinRef = num.ToString();
                                    //        String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                    //        int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                    //        int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                    //        if (String.IsNullOrEmpty(serie) || nro == null || nro == 0 || notaCredGlobal == true)
                                    //        {
                                    //            refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    //            refe.IndGlobalSpecified = true;
                                    //            refe.TpoDocRefSpecified = false;
                                    //            refe.RazonRef = "Referencia a documento no codificado";
                                    //            if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                    //                refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    //            refe.FechaCFErefSpecified = false;
                                    //        }
                                    //        else
                                    //        {
                                    //            refe.IndGlobalSpecified = false;
                                    //            refe.TpoDocRefSpecified = true;
                                    //            if (tipo == 111)
                                    //            {
                                    //                refe.TpoDocRef = CFEType.Item111;
                                    //            }
                                    //            else if (tipo == 101)
                                    //            {
                                    //                refe.TpoDocRef = CFEType.Item101;
                                    //            }
                                    //            refe.Serie = serie;
                                    //            refe.NroCFERef = nro.ToString();
                                    //            refe.FechaCFErefSpecified = false;
                                    //        }

                                    //        referencia[num - 1] = refe;
                                    //        num++;
                                    //        oRSMyTableDocRef.MoveNext();
                                    //    }
                                    //}

                                    #region "Comentado"
                                    ////if (facturas.Count == 0)
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ////    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////    refe.NroLinRef = "1";
                                    ////    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////    refe.IndGlobalSpecified = true;
                                    ////    refe.TpoDocRefSpecified = false;
                                    ////    refe.RazonRef = "Referencia a documento no codificado";
                                    ////    refe.FechaCFErefSpecified = false;
                                    ////    referencia[0] = refe;
                                    ////    factura.Referencia = referencia;
                                    ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////}
                                    ////else if (facturas.Count > 40)
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ////    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////    refe.NroLinRef = "1";
                                    ////    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////    refe.IndGlobalSpecified = true;
                                    ////    refe.TpoDocRefSpecified = false;
                                    ////    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    ////    refe.FechaCFErefSpecified = false;
                                    ////    referencia[0] = refe;
                                    ////    factura.Referencia = referencia;
                                    ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////}
                                    ////else
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[facturas.Count];
                                    ////    foreach (int i in facturas)
                                    ////    {
                                    ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////        SAPbobsCOM.Recordset oRSMyTable4 = ObtenerFactura(i.ToString(), pFormFactura);
                                    ////        if (oRSMyTable4 != null)
                                    ////        {
                                    ////            while (!oRSMyTable4.EoF)
                                    ////            {
                                    ////                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////                ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////                refe.NroLinRef = num.ToString();
                                    ////                String serie = oRSMyTable4.Fields.Item("FolioPref").Value;
                                    ////                int nro = oRSMyTable4.Fields.Item("FolioNum").Value;
                                    ////                int tipo = Int32.Parse(oRSMyTable4.Fields.Item("Ref2").Value);
                                    ////                if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                                    ////                {
                                    ////                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////                    refe.IndGlobalSpecified = true;
                                    ////                    refe.TpoDocRefSpecified = false;
                                    ////                    refe.RazonRef = "Referencia a documento no codificado";
                                    ////                    refe.FechaCFErefSpecified = false;
                                    ////                }
                                    ////                else
                                    ////                {
                                    ////                    refe.IndGlobalSpecified = false;
                                    ////                    refe.TpoDocRefSpecified = true;
                                    ////                    if (tipo == 111)
                                    ////                    {
                                    ////                        refe.TpoDocRef = CFEType.Item111;
                                    ////                    }
                                    ////                    else if (tipo == 101)
                                    ////                    {
                                    ////                        refe.TpoDocRef = CFEType.Item101;
                                    ////                    }
                                    ////                    refe.Serie = serie;
                                    ////                    refe.NroCFERef = nro.ToString();
                                    ////                    refe.FechaCFErefSpecified = false;
                                    ////                }

                                    ////                referencia[num - 1] = refe;
                                    ////                num++;
                                    ////                oRSMyTable4.MoveNext();
                                    ////            }
                                    ////        }

                                    ////    }
                                    #endregion

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA"))
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            if (descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI")) // Si es FITCO
                            {
                                SAPbobsCOM.Recordset orsMyTableAdenda = obtenerDatosAdendaFitco(codigoDocEntry.ToString(), "14");
                                if (orsMyTableAdenda != null)
                                {
                                    while (!orsMyTableAdenda.EoF)
                                    {
                                        sicfeAdenda = "VESSEL:                      " + orsMyTableAdenda.Fields.Item("Vessel").Value + "<br>";
                                        sicfeAdenda += "REFERENCE NUMBER:            " + orsMyTableAdenda.Fields.Item("VesselReference").Value + "<br>";
                                        sicfeAdenda += "BILL OF LADING DATE:         " + oRSMyTable.Fields.Item("TaxDate").Value + "<br>"; // U_SI_DatDoc
                                        sicfeAdenda += "LOADING PORT:                " + orsMyTableAdenda.Fields.Item("LoadingPort").Value + "<br>";
                                        sicfeAdenda += "DISCHARGE PORT:              " + orsMyTableAdenda.Fields.Item("DischargePort").Value + "<br>";

                                        orsMyTableAdenda.MoveNext();
                                    }
                                }
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Nota Credito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlNotaCreditoNuevo(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                TotalesRetencPercep[] arrayRetPer = null; RetPerc[] arrayItemRetPer = null;
                int cantLineasDocumento = 0;
                //oRSMyTable3 = ObtenerArticulosNotaCredito(codigoFactura);
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                double recargoCliente = 0; double saldoCliente = 0;
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0; decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal montoTotalItems = 0;
                decimal redondeoDocumento = 0; decimal montoTotalRetenciones = 0; bool hayItemRedondeo = false;
                bool esContingencia = false; bool esVentaCtaAjena = false; string documentoBaseRural = "";
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                clsObjDocumento objDoc = new clsObjDocumento();
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                bool ocultoDescuento = true;
                decimal cantPiezas = 0;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();
                            //CAE

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                cantLineasDocumento = objDoc.lineas.Count; // Cantidad de líneas del documento

                                if (descEmpresa.Equals("RURAL"))
                                {
                                    getIdSucursal(objDoc.UserSign2);
                                }
                                else
                                {
                                    getIdSucursal(objDoc.UserSign); // Actualizo el id de la Sucursal
                                }

                                codigoDocEntry = objDoc.DocEntry.ToString();

                                // Me quedo con la tabla de Retenciones
                                if (descEmpresa.Equals("HENDE"))
                                {
                                    oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry, pFormFactura); // Obtengo las Retenciones del documento
                                    arrayRetPer = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                    arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                }

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                                if (descEmpresa.Equals("RURAL"))
                                {
                                    idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";
                            factura.CAEData = cae;
                            //Encabezado

                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            // IdDoc
                            try
                            {
                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                string indicador = oRSMyTable.Fields.Item("Indicator").Value;
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        int numRojo = 0;

                                        if (descEmpresa.ToString().Equals("BOSCH"))
                                            numRojo = oRSMyTable.Fields.Item("U_NUMROJO").Value;
                                        else
                                            numRojo = oRSMyTable.Fields.Item("U_NumFactura").Value;

                                        if (numRojo != 0)
                                        {
                                            DateTime fechaDocContingencia = oRSMyTable.Fields.Item("DocDate").Value;
                                            DateTime fechaIniContingencia = Convert.ToDateTime("01/04/2015");
                                            DateTime fechaFinContingencia = Convert.ToDateTime("29/02/2016");
                                            if (fechaDocContingencia >= fechaIniContingencia && fechaDocContingencia <= fechaFinContingencia || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                            {
                                                //if ((descEmpresa.ToString().Equals("BOSCH") && numRojo >= 7901 && numRojo <= 10400 && fechaDocContingencia >= Convert.ToDateTime("01/04/2015")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                if ((descEmpresa.ToString().Equals("BOSCH") && fechaDocContingencia < Convert.ToDateTime("01/03/2016")) || (descEmpresa.ToString().Equals("REMIL") && (numRojo >= 67501 && numRojo <= 70500) || (numRojo >= 74001 && numRojo <= 77200)) || (descEmpresa.ToString().Equals("SOLGE") && numRojo >= 187901 && numRojo <= 198050))
                                                {
                                                    idDoc.Nro = numRojo.ToString();
                                                    idDoc.Serie = "A";
                                                    if (descEmpresa.ToString().Equals("BOSCH"))
                                                        idDoc.Serie = "B";
                                                    esContingencia = true;
                                                }
                                            }
                                        }
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Verificar Doc Contingencia", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                else
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                    tipo = "eTck";
                                }
                                else
                                {
                                    if (doc.Length == 12)
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                        tipo = "eFact";
                                    }
                                    else
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        tipo = "eTck";
                                    }
                                }

                                try
                                {
                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                    {
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                        tipo = "eFact";
                                    }
                                }
                                catch (Exception ex)
                                { }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                if (!descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.04.14 Cambio por nuevo layout de SCIFE.
                                    idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null || idDoc.FchVenc == Convert.ToDateTime("01-01-0001"))
                                    idDoc.FchVencSpecified = false;
                                else
                                    idDoc.FchVencSpecified = true;
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2020-04-27 Condiciones de pago, Almacen Rural.
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.04.27 Cambio por nuevo layout de SCIFE.
                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago;
                                else
                                    idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = false;

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                }
                                else
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                }

                                // VERIFICACION DEL INDICADOR PARA BOSCH REMILER Y SOLGEO
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    try
                                    {
                                        if (indicador.ToString().Equals("14")) // Es contado
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                        else if (indicador.ToString().Equals("08")) // Es credito
                                            idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item102 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item202)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item202;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item212;
                                }

                                if (descEmpresa.Equals("AEG") && (indicador.ToString().Equals("02") || indicador.ToString().Equals("07"))) // Es Venta por cuenta Ajena
                                    esVentaCtaAjena = true;

                                encabezado.IdDoc = idDoc;
                            }
                            catch (Exception ex) { }
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor();
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                receptor.DirRecep = oRSMyTable.Fields.Item("Address").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                bool agregoCeroRUT = false; // Indica si le agrega un 0 adelante al RUT

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;

                                        if (descEmpresa.Equals("TRIGE"))
                                        {
                                            string direccionCompleta = oRSMyTable5.Fields.Item("Street").Value + " " + oRSMyTable5.Fields.Item("StreetNo").Value + " " + oRSMyTable5.Fields.Item("Building").Value;
                                            if (!String.IsNullOrEmpty(direccionCompleta))
                                                receptor.DirRecep = direccionCompleta;
                                        }

                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("PaisNombre").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; // Le cargo la direccion de correo electronico
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        if (descEmpresa.Equals("TRIGE") || descEmpresa.Equals("POCHA") || descEmpresa.Equals("ALMEN"))
                                            receptor.LugarDestEnt = oRSMyTable2.Fields.Item("GlblLocNum").Value;
                                        else if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + objDoc.DireccionEntrega;

                                        if (descEmpresa.ToString().Equals("ETARE"))
                                            saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", ""); // Aca se guarda el RUC del documento
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item112;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                                agregoCeroRUT = true;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    // Si no tiene ningun numero de Rut, CI entonces es un eTicket
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                            else
                                            {
                                                // Si no es un cliente Uruguayo
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                                receptor.TipoDocRecep = DocType.Item4;
                                                tipo = "eTck";
                                            }
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso("", codigoFactura, "ERROR al Cargar Receptor Rec02", ex.Message.ToString()); }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                {
                                    // Para el nuevo cambio de Trialand
                                    if (!tipo.Equals("eTck") && ObtenerClienteVatStatusExtranjero(codCliente, "C") == true)
                                    {
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        receptor.TipoDocRecep = DocType.Item4;
                                    }
                                }

                                if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;

                                    if (tipo.ToString().Equals("eFact") && agregoCeroRUT == true)
                                    {   // Entonces es eTicket. No puede hacer una eFactura a un cliente que no sea RUT Uruguayo
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        receptor.DocRecep = receptor.DocRecep.ToString().Substring(1, receptor.DocRecep.Length - 1);
                                    }
                                    /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                    {
                                        if (receptor.CodPaisRecep != CodPaisType.UY)
                                            esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        else
                                            esDocUruguayo = true;
                                    }*/
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (descEmpresa.ToString().Equals("ETARE"))
                                {
                                    if (codCliente.ToUpper().Contains("PPL") || codCliente.ToUpper().Contains("ETY") || codCliente.ToUpper().Contains("INR") || receptor.RznSocRecep.ToUpper().Contains("PPL") || receptor.RznSocRecep.ToUpper().Contains("ETY") || receptor.RznSocRecep.ToUpper().Contains("INR"))
                                    {
                                        esDocUruguayo = false;
                                        tipo = "eTck";
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item102;
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "-";
                                        receptor.RznSocRecep = "";
                                        receptor.CodPaisRecep = CodPaisType.Item99;
                                    }
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                {
                                    if (encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item102 || encabezado.IdDoc.TipoCFE == IdDoc_FactTipoCFE.Item202)
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item202;
                                    else
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item212;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { guardaLogProceso("", codigoFactura, "ERROR al Cargar Receptor", e.Message.ToString()); }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = true;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("TECHM") || descEmpresa.ToString().Equals("MAVIN"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        redondeoDocumento = 0;
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if (descEmpresa.ToString().Equals("TENTA") && objDoc.DescuentoDocPorcentaje != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje < 0 && objDoc.DescuentoDocPorcentaje > -1)
                                                objDoc.DescuentoDocPorcentaje = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                        {
                                            if (!String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural += ", ";

                                            if (!string.IsNullOrEmpty(lineaRec.BaseDocNum) && documentoBaseRural.Contains(lineaRec.BaseDocNum))
                                                documentoBaseRural = documentoBaseRural.Remove(documentoBaseRural.Length - 2);
                                            else
                                                documentoBaseRural += lineaRec.BaseDocNum; // Me guardo el documento Base para el Adenda
                                        }

                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = lineaRec.DescripcionDocumento;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        //decimal precio = lineaRec.Precio;
                                        item.DescuentoPct = lineaRec.DescuentoPorcentaje;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = lineaRec.ItemCode;
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA") && !descEmpresa.ToString().Equals("TRIAL") && !descEmpresa.ToString().Equals("TRIGE"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = lineaRec.VisOrder.ToString() + "- " + item.DscItem + "-" + lineaRec.U_Marca + "-" + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                                {
                                                    if (String.IsNullOrEmpty(lineaRec.U_ItemFactura))
                                                        item.NomItem = item.DscItem + " - " + item.NomItem;
                                                    else
                                                        item.NomItem = lineaRec.U_ItemFactura + " - " + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("MILDA"))
                                                {
                                                    try
                                                    {
                                                        item.NomItem = item.NomItem + " " + lineaRec.U_Marca + " " + lineaRec.U_Campana + " " + lineaRec.U_Ubicacion;
                                                        if (lineaRec.U_Inicio.Year > 2000) // Si tiene una Fecha correcta
                                                            item.NomItem = item.NomItem + " " + lineaRec.U_Inicio.ToShortDateString() + "-" + lineaRec.U_Fin.ToShortDateString();
                                                    }
                                                    catch (Exception exM)
                                                    { }
                                                }
                                                else if (descEmpresa.ToString().Equals("TECHM"))
                                                    item.UniMed = "Uni";

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = lineaRec.FreeTxt;
                                                else if (descEmpresa.ToString().Equals("RURAL"))
                                                {
                                                    item.DscItem = lineaRec.LoteBatchNum;
                                                    item.UniMed = lineaRec.UnidadMedida; //ASPL - 2019.11.04, Especificacion de unidad de medida.
                                                }
                                                else
                                                    item.DscItem = "";
                                            }

                                            string codigoEan = ""; string tipoCodigo = "EAN"; int cantLineasCodigo = 1;

                                            if (descEmpresa.ToString().Equals("POCHA"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras)) //ASPL - 2020.03.12 - Cambio de campo 
                                                {
                                                    tipoCodigo = "EAN13";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++;  // Si tiene un Código de Rondanet
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("TRIGE"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString(); // lineaRec.CantidadCajas.ToString(); 
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("ALMEN"))
                                            {
                                                item.DscItem = obtenerCantidadCajasAlmena(lineaRec.UgpEntry); //lineaRec.CantidadPorPaqueteVenta.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("ENGRW"))
                                            {
                                                item.NomItem = lineaRec.LoteBatchNum;
                                                item.DscItem = lineaRec.U_FeDescripcion;
                                            }
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString(); // lineaRec.CantidadCajas.ToString(); 
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }

                                                //if (cantLineasCodigo > 1)
                                                //{
                                                if (!String.IsNullOrEmpty(item.UniMed))
                                                {
                                                    if (item.UniMed.Contains("K") || item.UniMed.Contains("k") || item.UniMed.Contains("KILO"))
                                                        item.UniMed = "KGM"; // Kilogramo
                                                    else if (item.UniMed.Contains("Ca") || item.UniMed.Contains("ca") || item.UniMed.Contains("CA"))
                                                        item.UniMed = "CS"; // Caja
                                                    else if (item.UniMed.Contains("litro") || item.UniMed.Contains("Litro"))
                                                        item.UniMed = "LTR"; // Litro
                                                    else
                                                        item.UniMed = "EA"; // Unidad
                                                }
                                                //}
                                            }

                                            try
                                            {
                                                if (!descEmpresa.ToString().Equals("TRIAL"))
                                                {
                                                    Item_Det_FactCodItem[] itemDetCodeArray = new Item_Det_FactCodItem[cantLineasCodigo];
                                                    Item_Det_FactCodItem itemDetCode = new Item_Det_FactCodItem();
                                                    itemDetCode.TpoCod = "INT1";
                                                    itemDetCode.Cod = lineaRec.ItemCode;
                                                    itemDetCodeArray[0] = itemDetCode;

                                                    if (cantLineasCodigo > 1)
                                                    {
                                                        itemDetCode = new Item_Det_FactCodItem();
                                                        itemDetCode.TpoCod = tipoCodigo;
                                                        itemDetCode.Cod = codigoEan;
                                                        itemDetCodeArray[1] = itemDetCode;
                                                    }

                                                    item.CodItem = itemDetCodeArray;
                                                    //item.DscItem = "";
                                                }
                                            }
                                            catch (Exception ex)
                                            { }

                                            if (descEmpresa.ToString().Equals("GENIA"))
                                            {
                                                try
                                                {   // Verifica si hay líneas de Texto
                                                    string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                    item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), lineaRec.LineNum.ToString(), objTypeDoc.ToString());
                                                }
                                                catch (Exception ex)
                                                { }
                                            }

                                            if (item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);
                                        }
                                        catch (Exception ex)
                                        { }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = lineaRec.TotalIVA; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!lineaRec.MonedaLinea.Equals(moneda) && !String.IsNullOrEmpty(lineaRec.MonedaLinea.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (lineaRec.TipoCambioLinea <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                lineaRec.TipoCambioLinea = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (lineaRec.MonedaLinea.ToString().Equals("USD") || lineaRec.MonedaLinea.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni * lineaRec.TipoCambioLinea;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (objDoc.DescuentoDocPorcentaje == 0 || (descEmpresa.ToString().Equals("BOSCH") && objDoc.DescuentoDocPorcentaje != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = lineaRec.TotalLinea; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((lineaRec.MonedaLinea.ToString().Equals("UYU") || lineaRec.MonedaLinea.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni / lineaRec.TipoCambioLinea;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLinea;
                                                else
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLineaME; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = lineaRec.CantidadInventario;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = lineaRec.TotalLinea; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2, MidpointRounding.ToEven);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = lineaRec.TotalLinea; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2, MidpointRounding.ToEven);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2, MidpointRounding.ToEven);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3, MidpointRounding.ToEven);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);

                                            if (moneda.ToString().Equals(lineaRec.MonedaLinea)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3, MidpointRounding.ToEven);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3, MidpointRounding.ToEven);
                                        }

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = lineaRec.CantidadInventario;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) // Solo si es ANCAL
                                                    {
                                                        if (ocultoDescuento == true)
                                                            imprimeDescuento = false;
                                                        else
                                                            imprimeDescuento = true;
                                                    }
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = lineaRec.TotalLinea; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                                    if (objDoc.DescuentoDocPorcentaje != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                            precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                precioUni = precioUni * (1 - objDoc.DescuentoDocPorcentaje / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2, MidpointRounding.ToEven);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - objDoc.DescuentoDocPorcentaje)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2, MidpointRounding.ToEven);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                    item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (objDoc.DescuentoDocPorcentaje < 1 && objDoc.DescuentoDocPorcentaje > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("MAVIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * objDoc.DescuentoDocPorcentaje) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                    item.DescuentoPct = objDoc.DescuentoDocPorcentaje;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2, MidpointRounding.ToEven);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN"))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2, MidpointRounding.ToEven);
                                                    }
                                                }
                                            }
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2, MidpointRounding.ToEven);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        //Calculos Totales
                                        decimal iva = ObtenerImpuesto(lineaRec.CodigoImpuesto); // Obtengo el porcentaje de IVA
                                        if (esNuevaVersionDGI)
                                            montoDescUni = item.DescuentoMonto / item.Cantidad;
                                        decimal montoIVALineaArticulo = 0;
                                        decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                        if (iva == 10 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVAMinimo += item.MontoItem;

                                                if (objDoc.DescuentoDocPorcentaje != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                TotalIVAMinimo += montoIVALineaArticulo;
                                                //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                            }
                                            else
                                            {
                                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && objDoc.DescuentoDocPorcentaje != 0))
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                    TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                            }
                                            ivaMinimo = iva;
                                            item.IndFact = Item_Det_FactIndFact.Item2;
                                        }
                                        else if (iva == 22 || lineaRec.CodigoImpuesto.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVABasico += item.MontoItem;

                                                if (objDoc.DescuentoDocPorcentaje != 0 && descEmpresa.ToString().Equals("ALMEN"))
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                TotalIVABasico += montoIVALineaArticulo;
                                                //TotalItemsGravadosIVABasico += item.MontoItem;
                                                //TotalIVABasico += item.MontoItem * (iva / 100);
                                            }
                                            else
                                            {
                                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && objDoc.DescuentoDocPorcentaje != 0))
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                    TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                            }
                                            ivaBasico = iva;
                                            item.IndFact = Item_Det_FactIndFact.Item3;
                                        }
                                        else if (iva == 0 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                TotalItemsNoGravados += item.MontoItem;
                                            else
                                                TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                            item.IndFact = Item_Det_FactIndFact.Item1;
                                        }
                                        else
                                        {
                                            if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                            {
                                                montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                    montoIVALineaArticulo = montoImpuestos;
                                                TotalItemsGravadosIVAOtra += item.MontoItem;
                                                TotalIVAOtra += montoIVALineaArticulo;
                                                //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                //TotalIVAOtra += item.MontoItem * (iva / 100);
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                            }
                                            item.IndFact = Item_Det_FactIndFact.Item4;
                                        }

                                        //}

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA"))
                                        {
                                            // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                            if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                                if (item.MontoItem != item.PrecioUnitario)
                                                    item.PrecioUnitario = item.MontoItem;
                                        }

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven);

                                        item.MontoItem = Math.Round(item.MontoItem, 2, MidpointRounding.ToEven);
                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                        if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                            if (item.MontoItem != item.PrecioUnitario)
                                                item.PrecioUnitario = item.MontoItem;

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo
                                        montoTotalItems += item.MontoItem;

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            redondeoDocumento = Math.Round(redondeoDocumento, 2, MidpointRounding.ToEven);
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2, MidpointRounding.ToEven);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2, MidpointRounding.ToEven);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";

                                            detalle[cont] = itemRedondeo;
                                            hayItemRedondeo = true;
                                            //montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();
                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = (decimal)cotizacion;
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                //////// NUEVA LINEA POR PROBLEMAS DEL MONTONETO DE IVA
                                //////if (descEmpresa.ToString().Equals("ALMEN") && esNuevaVersionDGI == true && descuent == 100)
                                //////    descuent = 0;

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }

                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                if (totales.MntNetoIvaTasaMin == 0)
                                {
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                if (totales.MntNetoIVATasaBasica == 0)
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                if (totales.MntNetoIVAOtra == 0)
                                {
                                    totales.MntNetoIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVAOtraSpecified = true;
                                }
                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                {
                                    totales.MntIVATasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                {
                                    totales.MntIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                decimal sumaMontos = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                if (sumaMontos == totales.MntNoGrv) // Si el total es todo de Monto items No Gravados con IVA
                                {
                                    if (sumaMontos != 0 && ((sumaMontos - montoTotalItems <= 1 && sumaMontos - montoTotalItems > 0) || (montoTotalItems - sumaMontos <= 1 && montoTotalItems - sumaMontos > 0)))
                                    {
                                        sumaMontos = montoTotalItems;
                                        totales.MntNoGrv = montoTotalItems;
                                    }
                                }

                                //if (montoTotalRetenciones != 0) // Si tiene Retenciones // Comentado 22/06
                                //{
                                //    try
                                //    {
                                //        montoTotalRetenciones = Math.Round(montoTotalRetenciones, 2);
                                //        totales.MntTotRetenido = montoTotalRetenciones;
                                //        totales.MntTotRetenidoSpecified = true;

                                //        totales.RetencPercep = new TotalesRetencPercep[oRSMyTableRetenciones.RecordCount];
                                //        totales.RetencPercep = arrayRetPer;
                                //    }
                                //    catch (Exception ex)
                                //    { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Cargando RetenPercep en Totales", ex.Message.ToString()); }
                                //}

                                totales.MntTotal = sumaMontos;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2, MidpointRounding.ToEven);
                                }

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv > -1) && redondeoDocumento == 0)
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNoGrv;
                                            sumaMontos = totales.MntTotal;
                                        }
                                    }
                                }

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal)
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento && totales.MntPagar != totales.MntTotal + (redondeoDocumento * -1))
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }
                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                // Comentado por problemas en BOSCH
                                if (sumaMontos != totales.MntTotal && totales.MntNoGrv > 0) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    sumaMontos = totales.MntNoGrv;
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0, MidpointRounding.ToEven);
                                    if (sumaMontos != totales.MntTotal)
                                        if ((sumaMontos - totales.MntTotal) <= 1 || (totales.MntTotal - sumaMontos) <= 1)
                                            totales.MntNoGrv = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de Redondeo
                                }

                                //if (montoTotalRetenciones != 0) // Comentado 22/06
                                //    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                if (totales.TpoMoneda != TipMonType.UYU)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 3, MidpointRounding.ToEven);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2, MidpointRounding.ToEven);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2, MidpointRounding.ToEven);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;
                                totales.MontoNF = redondeoDocumento;

                                totales.MontoNF = Math.Round(totales.MontoNF, 2, MidpointRounding.ToEven);
                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL")) // Si no es Dreghal ni Ancal
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                    montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                else
                                                {
                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);
                                                }

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                                /*if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                {
                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item2; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(valorDR, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }
                                                else
                                                {
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value; // Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                    }
                                                }*/
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            //Referencias
                            try
                            {
                                int num = 1;

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaNotaCredito(codigoDocEntry); // Le paso el DocEntry

                                bool notaCredGlobal = false;
                                if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                    if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                        notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                if (oRSMyTableDocRef.RecordCount == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if (descEmpresa.ToString().Equals("ALMEN") && notaCredGlobal == true)
                                    {
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    }
                                    else if (descEmpresa.ToString().Equals("ANCAL") && notaCredGlobal == true)
                                    {
                                        refe.RazonRef = oRSMyTable.Fields.Item("NumAtCard").Value;
                                        if (String.IsNullOrEmpty(refe.RazonRef))
                                        {
                                            refe.RazonRef = "Descuentos sobre las facturas del mes";
                                        }
                                    }
                                    else if (descEmpresa.ToString().Equals("POCHA"))
                                    {
                                        refe.RazonRef = oRSMyTable.Fields.Item("NumAtCard").Value;
                                        if (String.IsNullOrEmpty(refe.RazonRef))
                                        {
                                            refe.RazonRef = "Descuentos sobre las facturas del mes";
                                        }
                                    }

                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (oRSMyTableDocRef.RecordCount > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];

                                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                        if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                            notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    if (oRSMyTableDocRef != null)
                                    {
                                        while (!oRSMyTableDocRef.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                            int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                            if (String.IsNullOrEmpty(serie) || nro == null || nro == 0 || notaCredGlobal == true)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                                    refe.RazonRef = "Descuentos sobre las facturas del mes";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                {
                                                    refe.TpoDocRef = CFEType.Item111;
                                                }
                                                else if (tipo == 101)
                                                {
                                                    refe.TpoDocRef = CFEType.Item101;
                                                }
                                                if (tipo == 141)
                                                    refe.TpoDocRef = CFEType.Item141;

                                                if (tipo == 142)
                                                    refe.TpoDocRef = CFEType.Item142;

                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTableDocRef.MoveNext();
                                        }
                                    }

                                    #region "Comentado"
                                    ////if (facturas.Count == 0)
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ////    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////    refe.NroLinRef = "1";
                                    ////    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////    refe.IndGlobalSpecified = true;
                                    ////    refe.TpoDocRefSpecified = false;
                                    ////    refe.RazonRef = "Referencia a documento no codificado";
                                    ////    refe.FechaCFErefSpecified = false;
                                    ////    referencia[0] = refe;
                                    ////    factura.Referencia = referencia;
                                    ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////}
                                    ////else if (facturas.Count > 40)
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ////    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////    refe.NroLinRef = "1";
                                    ////    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////    refe.IndGlobalSpecified = true;
                                    ////    refe.TpoDocRefSpecified = false;
                                    ////    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    ////    refe.FechaCFErefSpecified = false;
                                    ////    referencia[0] = refe;
                                    ////    factura.Referencia = referencia;
                                    ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////}
                                    ////else
                                    ////{
                                    ////    ReferenciaReferencia[] referencia = new ReferenciaReferencia[facturas.Count];
                                    ////    foreach (int i in facturas)
                                    ////    {
                                    ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////        SAPbobsCOM.Recordset oRSMyTable4 = ObtenerFactura(i.ToString(), pFormFactura);
                                    ////        if (oRSMyTable4 != null)
                                    ////        {
                                    ////            while (!oRSMyTable4.EoF)
                                    ////            {
                                    ////                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    ////                ReferenciaReferencia refe = new ReferenciaReferencia();
                                    ////                refe.NroLinRef = num.ToString();
                                    ////                String serie = oRSMyTable4.Fields.Item("FolioPref").Value;
                                    ////                int nro = oRSMyTable4.Fields.Item("FolioNum").Value;
                                    ////                int tipo = Int32.Parse(oRSMyTable4.Fields.Item("Ref2").Value);
                                    ////                if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                                    ////                {
                                    ////                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    ////                    refe.IndGlobalSpecified = true;
                                    ////                    refe.TpoDocRefSpecified = false;
                                    ////                    refe.RazonRef = "Referencia a documento no codificado";
                                    ////                    refe.FechaCFErefSpecified = false;
                                    ////                }
                                    ////                else
                                    ////                {
                                    ////                    refe.IndGlobalSpecified = false;
                                    ////                    refe.TpoDocRefSpecified = true;
                                    ////                    if (tipo == 111)
                                    ////                    {
                                    ////                        refe.TpoDocRef = CFEType.Item111;
                                    ////                    }
                                    ////                    else if (tipo == 101)
                                    ////                    {
                                    ////                        refe.TpoDocRef = CFEType.Item101;
                                    ////                    }
                                    ////                    refe.Serie = serie;
                                    ////                    refe.NroCFERef = nro.ToString();
                                    ////                    refe.FechaCFErefSpecified = false;
                                    ////                }

                                    ////                referencia[num - 1] = refe;
                                    ////                num++;
                                    ////                oRSMyTable4.MoveNext();
                                    ////            }
                                    ////        }

                                    ////    }
                                    #endregion

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            try
                            {
                                if (esVentaCtaAjena == true) // Venta por Cuenta Ajena
                                {
                                    clsDatosCuentaAjena cuentaAjena = obtenerDatosCuentaAjena();
                                    if (cuentaAjena != null && !String.IsNullOrEmpty(cuentaAjena.RucEmisor))
                                    {
                                        factura.Compl_Fiscal = new Compl_FiscalType();
                                        factura.Compl_Fiscal.Item = new Compl_Fiscal_DataType();
                                        factura.Compl_Fiscal.Item.DocMdte = cuentaAjena.DocMdte;
                                        factura.Compl_Fiscal.Item.NombreMdte = cuentaAjena.NombreMdte;
                                        factura.Compl_Fiscal.Item.Pais = getCodPais(cuentaAjena.Pais);
                                        factura.Compl_Fiscal.Item.RUCEmisor = cuentaAjena.RucEmisor;

                                        if (cuentaAjena.TipoDocMdte == 1)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item1;
                                        else if (cuentaAjena.TipoDocMdte == 2)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item2;
                                        else if (cuentaAjena.TipoDocMdte == 3)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item3;
                                        else if (cuentaAjena.TipoDocMdte == 4)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item4;
                                        else if (cuentaAjena.TipoDocMdte == 5)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item5;
                                        else if (cuentaAjena.TipoDocMdte == 6)
                                            factura.Compl_Fiscal.Item.TipoDocMdte = DocTypemasNIE.Item6;
                                    }
                                }
                            }
                            catch (Exception ex)
                            { }

                            string saltoLinea = "<br>";
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                saltoLinea = "\r\n";

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("AEG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + saltoLinea;// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("AEG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + saltoLinea; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL") && !descEmpresa.ToString().Equals("AEG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + saltoLinea; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + saltoLinea; // Forma de Pago 

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA"))
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                string strVencimientos = obtenerVencimientos(codigoDocEntry);
                                string strObsCliente = oRSMyTable.Fields.Item("U_Obcli").Value;
                                string strDirEntrega = oRSMyTable.Fields.Item("Address2").Value;
                                string strContacto = oRSMyTable.Fields.Item("U_CONTACTO").Value;
                                string strTelefono = oRSMyTable.Fields.Item("U_TELEFONO").Value;
                                string strResponsable = obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value);
                                string strTransportista = ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura);
                                string strDocInterno = codigoFactura.ToString();

                                if (!string.IsNullOrEmpty(strVencimientos))
                                    sicfeAdenda += "Vencimientos: " + strVencimientos + "SALTOLINEA"; // Vencimientos - 2019.11.04
                                //sicfeAdenda = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "SALTOLINEA"; // Forma de Pago 
                                if (!string.IsNullOrEmpty(strObsCliente))
                                    sicfeAdenda += "Obs. Cliente: " + strObsCliente + "SALTOLINEA"; // Observaciones del Cliente 
                                if (!string.IsNullOrEmpty(strDirEntrega))
                                    sicfeAdenda += "Dir Entrega: " + strDirEntrega + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strContacto))
                                    sicfeAdenda += "Contacto: " + strContacto + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTelefono))
                                    sicfeAdenda += "Telefono: " + strTelefono + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strResponsable))
                                    sicfeAdenda += "Responsable: " + strResponsable + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTransportista))
                                    sicfeAdenda += "Transportista: " + strTransportista + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strDocInterno))
                                    sicfeAdenda += "Documento Interno: " + strDocInterno + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(documentoBaseRural))
                                    sicfeAdenda += "Documento Enlazado: " + documentoBaseRural + "SALTOLINEA";

                                if (esContado == false)
                                {
                                    string OrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                    if (!string.IsNullOrEmpty(OrdComp))
                                        sicfeAdenda += "Orden Compra: " + oRSMyTable.Fields.Item("U_ORDCOMPRA").Value + "SALTOLINEA";
                                    sicfeAdenda += "Firmo factura dando conformidad a mercadería y precios detallados y abonaré en el plazo y condiciones pactadas. SALTOLINEA";
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. El no pago del precio en el plazo estipulado, generará el máximo interés legal permitido por la ley. SALTOLINEA";
                                    sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                    sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                    sicfeAdenda += "C.I______________________Fecha__________________. SALTOLINEA";
                                }
                                else
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. SALTOLINEA";

                                ////sicfeAdenda = "Obs. Cliente: " + oRSMyTable.Fields.Item("U_Obcli").Value + "SALTOLINEA"; // Observaciones del Cliente 
                                ////sicfeAdenda += "Contacto: " + oRSMyTable.Fields.Item("U_CONTACTO").Value + "SALTOLINEA";
                                ////sicfeAdenda += "Telefono: " + oRSMyTable.Fields.Item("U_TELEFONO").Value + "SALTOLINEA";
                                ////sicfeAdenda += "Documento Interno: " + codigoFactura.ToString() + "SALTOLINEA";
                                ////sicfeAdenda += "Documento Enlazado: " + documentoBaseRural.ToString() + "SALTOLINEA";
                                ////sicfeAdenda += "Responsable: " + obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "SALTOLINEA";
                                ////sicfeAdenda += "Transportista: " + ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura) + "SALTOLINEA";
                                ////sicfeAdenda += "Orden Compra: " + oRSMyTable.Fields.Item("U_ORDCOMPRA").Value + "SALTOLINEA";
                                ////sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "SALTOLINEA"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                            {
                                sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                            {
                                sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                if (montoTotalRetenciones != 0)
                                    sicfeAdenda += "Monto Retención: " + Math.Round(montoTotalRetenciones, 2).ToString();
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    sicfeAdenda += "Cambio 30 días <br>";
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                            else if (descEmpresa.ToString().Equals("ETARE"))
                            {
                                if (factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item112 && factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item212)
                                    sicfeAdenda += "Saldo: UYU " + saldoCliente + "<br>"; // Saldo si es eTicket o NC de eTicket
                            }
                            else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                sicfeAdenda += obtenerRemarks(14) + "\r\n";
                            else if (descEmpresa.ToString().Equals("POCHA"))
                            {
                                sicfeAdenda += "Comentarios: " + obtenerComentarioPedido(objDoc.DocEntry);
                                sicfeAdenda += "\r\n";
                                sicfeAdenda += "Compra ID : " + oRSMyTable.Fields.Item("U_IDCOMPRA").Value;
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Nota Credito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlNotaDebito(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                int cantLineasDocumento = oRSMyTable3.RecordCount;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                double recargoCliente = 0; double saldoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0; decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal redondeoDocumento = 0;
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                decimal cantPiezas = 0;

                List<int> facturas = new List<int>();
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            //CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";
                            factura.CAEData = cae;

                            //Encabezado

                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            // IdDoc
                            IdDoc_Fact idDoc = new IdDoc_Fact();
                            idDoc.Serie = "";
                            idDoc.Nro = "";

                            // Si es documento Manual le manda Serie y Numero
                            if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                            {
                                try
                                {
                                    idDoc.Nro = codigoFactura.ToString();
                                    idDoc.Serie = "A";
                                    //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    //idDoc.Serie = serieDoc.ToString();
                                }
                                catch (Exception ex)
                                { }
                            }

                            String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                            NroDocumento = doc;
                            if (String.IsNullOrEmpty(doc))
                            {
                                idDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                tipo = "eTck";
                            }
                            else
                            {
                                if (doc.Length == 12)
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                    tipo = "eFact";
                                }
                                else
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                    tipo = "eTck";
                                }
                            }

                            try
                            {
                                // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                rucDocumento = rucDocumento.ToString().Replace("-", "");
                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                    tipo = "eFact";
                                }
                            }
                            catch (Exception ex)
                            { }

                            idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                            idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                            if (idDoc.FchVenc == null)
                            {
                                idDoc.FchVencSpecified = false;
                            }
                            else
                            {
                                idDoc.FchVencSpecified = true;
                            }
                            // Se asigna la fecha que solicita Signature. 
                            idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                            idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                            idDoc.PeriodoDesdeSpecified = false;
                            idDoc.PeriodoHastaSpecified = false;
                            idDoc.MntBrutoSpecified = false;
                            int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                            if (EsContado(formaPago))
                            {
                                idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                            }
                            else
                            {
                                idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                            }

                            // VERIFICACION DEL INDICADOR PARA BOSCH REMILER Y SOLGEO
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                            {
                                try
                                {
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contado
                                        idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                    else if (indicador.ToString().Equals("02")) // Es credito
                                        idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                }
                                catch (Exception ex)
                                { }
                            }

                            encabezado.IdDoc = idDoc;
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor();
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {

                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                        if (descEmpresa.ToString().Equals("ETARE"))
                                            saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                            {
                                                receptor.TipoDocRecep = DocType.Item2;
                                            }
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                            {
                                                receptor.TipoDocRecep = DocType.Item3;
                                            }
                                            else
                                            {
                                                receptor.TipoDocRecep = DocType.Item4;
                                            }
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                                    tipo = "eTck";
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (receptor.DocRecep.ToString().Equals("99999999"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4;
                                        receptor.DocRecep = "99";
                                    }
                                }

                                if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                ////// Bloque de codigo para controlar el Redondeo del documento
                                ////redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                ////if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")) )// Si el documento no es en Pesos
                                ////    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                ////if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                ////    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }
                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                            montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        /*if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }*/

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0)
                                                    {
                                                        if (descuent == 0 || (descEmpresa.ToString().Equals("BOSCH") && descuent != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }
                                                }
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
                                                else
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        // SE COMENTAN LAS SIGUIENTES 3 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        //if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                        //    if ((montoTotalLinea - montoCalculado < 1 && montoTotalLinea - montoCalculado > -1) || (montoCalculado - montoTotalLinea < 1 && montoCalculado - montoTotalLinea > -1)) // Si la diferencia es de centésimos 
                                        //        montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);

                                        if (descuent > 0)
                                        {
                                            //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                            item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                            item.MontoItem = decimal.Round(item.MontoItem, 2);
                                        }
                                        if (item.DescuentoPct != 0 && descuent == 0)
                                        {
                                            item.DescuentoPctSpecified = true;
                                            //item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad; // VA o NO?
                                            item.DescuentoMonto = montoDescUni * item.Cantidad;
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else if (item.DescuentoPct == 0 && descuent == 0)
                                        {
                                            item.DescuentoPctSpecified = false;
                                            item.DescuentoMontoSpecified = false;
                                        }
                                        else if (item.DescuentoPct != 0 && descuent > 0)
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct += descuent;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct += descuent;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct = descuent;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVABasico += item.MontoItem;
                                                    //TotalIVABasico += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || (descEmpresa.ToString().Equals("ALMEN") && descuent != 0))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }

                                        ////// Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        ////montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        ////montoCalculado = decimal.Round(montoCalculado, 2);
                                        ////if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                        ////    if ((item.MontoItem - montoCalculado <= 1) || (montoCalculado - item.MontoItem <= 1)) // Si la diferencia es de centésimos
                                        ////        item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";
                                            detalle[cont] = itemRedondeo;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense
                                else if (moneda.Equals("BRL") || moneda.Equals("R$"))
                                    totales.TpoMoneda = TipMonType.BRL; //Reales Brasilero

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = (decimal)cotizacion;
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }
                                else
                                {
                                    totales.MntNoGrv = TotalItemsNoGravados;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }
                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;
                                if (descuent > 0)
                                {

                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                if (totales.MntNetoIvaTasaMin == 0)
                                {
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                if (totales.MntNetoIVATasaBasica == 0)
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                if (totales.MntNetoIVAOtra == 0)
                                {
                                    totales.MntNetoIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVAOtraSpecified = true;
                                }
                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                    totales.MntIVATasaMinSpecified = false;
                                else
                                    totales.MntIVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                    totales.MntIVATasaBasicaSpecified = false;
                                else
                                    totales.MntIVATasaBasicaSpecified = true;

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }

                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$"))
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    //totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    //totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    //if (totales.MntPagar != totales.MntTotal)
                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                        totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                totales.MontoNF = 0;
                                totales.MontoNFSpecified = false;
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {

                            }

                            factura.Encabezado = encabezado;


                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item1)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    factura.Encabezado.Totales.MntNoGrvSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                                }
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                {
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                                    factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                                    factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                                }

                                                montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                            ////    {
                            ////        // Nueva version de Sicfe va una linea por cada tipo de IndFact
                            ////        int nroLineaDR = 1;

                            ////        if (listaIndFact.Count != 0)
                            ////        {
                            ////            decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////            if (valorDR > 0)
                            ////            {
                            ////                DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                            ////                foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                            ////                {
                            ////                    DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////                    descuento.NroLinDR = nroLineaDR.ToString();
                            ////                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////                    descuento.TpoDR = TipoDRType.Item2;
                            ////                    descuento.TpoDRSpecified = true;
                            ////                    descuento.ValorDR = Math.Round(valorDR, 2);
                            ////                    descuento.GlosaDR = "";
                            ////                    descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                            ////                    descuento.IndFactDRSpecified = true;

                            ////                    if (descuento.ValorDR > 0)
                            ////                    {
                            ////                        descuentosRecargos[nroLineaDR - 1] = descuento;
                            ////                        factura.DscRcgGlobal = descuentosRecargos;
                            ////                    }

                            ////                    nroLineaDR++;
                            ////                }
                            ////            }
                            ////        }

                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            //Referencias
                            int num = 1;

                            if (facturas.Count == 0)
                            {
                                ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                ReferenciaReferencia refe = new ReferenciaReferencia();
                                refe.NroLinRef = "1";
                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                refe.IndGlobalSpecified = true;
                                refe.TpoDocRefSpecified = false;
                                refe.RazonRef = "Referencia a documento no codificado";
                                refe.FechaCFErefSpecified = false;
                                referencia[0] = refe;
                                factura.Referencia = referencia;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            else if (facturas.Count > 40)
                            {
                                ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                ReferenciaReferencia refe = new ReferenciaReferencia();
                                refe.NroLinRef = "1";
                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                refe.IndGlobalSpecified = true;
                                refe.TpoDocRefSpecified = false;
                                refe.RazonRef = "Afecta a mas de 40 CFE";
                                refe.FechaCFErefSpecified = false;
                                referencia[0] = refe;
                                factura.Referencia = referencia;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            else
                            {
                                ReferenciaReferencia[] referencia = new ReferenciaReferencia[facturas.Count];
                                foreach (int i in facturas)
                                {
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    SAPbobsCOM.Recordset oRSMyTable4 = ObtenerFactura(i.ToString(), pFormFactura);
                                    if (oRSMyTable4 != null)
                                    {
                                        while (!oRSMyTable4.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTable4.Fields.Item("FolioPref").Value;
                                            int nro = oRSMyTable4.Fields.Item("FolioNum").Value;
                                            int tipo = Int32.Parse(oRSMyTable4.Fields.Item(campoReferencia).Value);
                                            if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                {
                                                    refe.TpoDocRef = CFEType.Item111;
                                                }
                                                else if (tipo == 101)
                                                {
                                                    refe.TpoDocRef = CFEType.Item101;
                                                }
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                        }
                                    }
                                }
                                factura.Referencia = referencia;
                            }

                            string saltoLinea = "<br>";
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                saltoLinea = "\r\n";

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + saltoLinea;// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + saltoLinea; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + saltoLinea; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + saltoLinea; // Forma de Pago 

                            if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    sicfeAdenda += "Cambio 30 días <br>";
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                            else if (descEmpresa.ToString().Equals("ETARE"))
                            {
                                if (factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item113 && factura.Encabezado.IdDoc.TipoCFE != IdDoc_FactTipoCFE.Item213)
                                    sicfeAdenda += "Saldo: UYU " + saldoCliente + "<br>"; // Saldo si es eTicket o NC de eTicket
                            }

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA"))
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Nota Debito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlNotaDebitoFITCO(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                int cantLineasDocumento = oRSMyTable3.RecordCount;
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0; decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal redondeoDocumento = 0; decimal montoTotalItems = 0;
                string producerArt = ""; string bankDetails = ""; string bankAccount = ""; string bankAba = ""; string bankSwift = "";
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                List<int> facturas = new List<int>();
                bool esContingencia = false;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            //CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";
                            factura.CAEData = cae;

                            //Encabezado

                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            // IdDoc
                            IdDoc_Fact idDoc = new IdDoc_Fact();
                            idDoc.Serie = "";
                            idDoc.Nro = "";

                            // Si es documento Manual le manda Serie y Numero
                            if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                            {
                                try
                                {
                                    idDoc.Nro = codigoFactura.ToString();
                                    idDoc.Serie = "A";
                                    //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    //idDoc.Serie = serieDoc.ToString();
                                }
                                catch (Exception ex)
                                { }
                            }

                            string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                            if (indicador.ToString().Equals("99")) // Es contingencia
                            {
                                try
                                {
                                    int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                    string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                    if (folioDocumento != 0)
                                    {
                                        idDoc.Nro = folioDocumento.ToString();
                                        idDoc.Serie = SerieDocumento;
                                        esContingencia = true;
                                    }
                                }
                                catch (Exception ex)
                                { }
                            }

                            String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                            NroDocumento = doc;
                            if (String.IsNullOrEmpty(doc))
                            {
                                idDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                tipo = "eTck";
                            }
                            else
                            {
                                if (doc.Length == 12)
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                    tipo = "eFact";
                                }
                                else
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                    tipo = "eTck";
                                }
                            }

                            try
                            {
                                // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                rucDocumento = rucDocumento.ToString().Replace("-", "");
                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                {
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                    tipo = "eFact";
                                }
                            }
                            catch (Exception ex)
                            { }

                            //idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                            idDoc.FchEmis = oRSMyTable.Fields.Item("DocDate").Value;
                            idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                            if (idDoc.FchVenc == null)
                            {
                                idDoc.FchVencSpecified = false;
                            }
                            else
                            {
                                idDoc.FchVencSpecified = true;
                            }
                            // Se asigna la fecha que solicita Signature. 
                            idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                            idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                            idDoc.PeriodoDesdeSpecified = false;
                            idDoc.PeriodoHastaSpecified = false;
                            idDoc.MntBrutoSpecified = false;

                            try
                            {
                                if (EsContadoFitco(oRSMyTable.Fields.Item("U_SI_PayTer").Value))
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                else
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                            }
                            catch (Exception ex)
                            { idDoc.FmaPago = IdDoc_FactFmaPago.Item1; }

                            if (esContingencia == true)
                            {
                                if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item103 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item203)
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item203;
                                else
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item213;
                            }

                            encabezado.IdDoc = idDoc;
                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor();
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {

                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "C"); // Obtengo las direcciones del cliente
                                string freeText = "";
                                string infoAdicionalClienteFitco = "";
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        freeText = oRSMyTable2.Fields.Item("Free_Text").Value;
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        infoAdicionalClienteFitco = "CEP: " + receptor.CP + " ";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal
                                        receptor.CP = "0";

                                        string numeroDireccion = oRSMyTable5.Fields.Item("StreetNo").Value;
                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        receptor.LugarDestEnt = "";

                                        infoAdicionalClienteFitco = receptor.DirRecep + " " + numeroDireccion + " " + oRSMyTable5.Fields.Item("Block").Value + "," + infoAdicionalClienteFitco + " " + receptor.CiudadRecep + " " + receptor.DeptoRecep + " " + receptor.PaisRecep;
                                        receptor.InfoAdicional = infoAdicionalClienteFitco;

                                        /*string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                        }*/

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                            {
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                            }
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                                tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                            {
                                                tipo = "eTck";
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }

                                            receptor.DocRecep = rucDocumento.ToString();

                                            if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                            {
                                                encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                                tipo = "eTck";
                                                receptor.TipoDocRecep = DocType.Item4;
                                                receptor.DocRecep = "99";
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Buscando LicTradNum", ex.Message.ToString()); // Guarda log del Proceso
                                        }

                                        try
                                        {
                                            bankDetails = obtenerNombreBanco(oRSMyTable2.Fields.Item("HouseBank").Value);
                                            bankAccount = oRSMyTable2.Fields.Item("HousBnkAct").Value;
                                            bankAba = oRSMyTable2.Fields.Item("HsBnkIBAN").Value;
                                            bankSwift = oRSMyTable2.Fields.Item("HsBnkSwift").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                try
                                {
                                    bool esUruguayoFITCO = false;

                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    //if (!receptor.CodPaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                    {
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item103;
                                        tipo = "eTck";

                                        string cnpj = "";
                                        try
                                        {
                                            // Si tiene CNPJ en FreeText
                                            if (freeText.Contains("CNPJ"))
                                            {
                                                int inicialChar = freeText.LastIndexOf("CNPJ");
                                                int finalChar = freeText.Length;
                                                string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                                textoReemplazar = textoReemplazar.Substring(0, 24);
                                                cnpj = textoReemplazar.Replace("CNPJ", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                                if (!String.IsNullOrEmpty(cnpj.ToString()))
                                                {
                                                    //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                    receptor.TipoDocRecep = DocType.Item6; // DNI Documento Arg, Bra, Par o Chi
                                                    receptor.DocRecep = cnpj.ToString();
                                                    receptor.CodPaisRecep = CodPaisType.BR;
                                                }
                                            }
                                            else
                                            {
                                                // Entonces es Otro
                                                int inicialChar = freeText.LastIndexOf("Otro");
                                                int finalChar = freeText.Length;
                                                string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                                //textoReemplazar = textoReemplazar.Substring(0, 24);
                                                cnpj = textoReemplazar.Replace("Otro", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                                if (!String.IsNullOrEmpty(cnpj.ToString()))
                                                {
                                                    //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                    receptor.TipoDocRecep = DocType.Item4; // DNI Documento Arg, Bra, Par o Chi
                                                    receptor.DocRecep = cnpj.ToString();
                                                    receptor.CodPaisRecep = CodPaisType.Item99; // Pais "Otros"

                                                    receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais NUEVA LINEA
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    }
                                    else
                                    {
                                        // Con Dirección Uruguay es eFactura
                                        encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item113;
                                        tipo = "eFact";

                                        if (receptor.DocRecep.ToString().Length == 12) // Tiene RUC
                                            receptor.TipoDocRecep = DocType.Item2;
                                        else if (receptor.DocRecep.ToString().Length >= 7 && receptor.DocRecep.ToString().Length <= 10)
                                            receptor.TipoDocRecep = DocType.Item3;
                                        else if (receptor.DocRecep.ToString().Length == 11 && ValidarRUC("0" + receptor.DocRecep))
                                        {
                                            receptor.TipoDocRecep = DocType.Item2;
                                            receptor.DocRecep = "0" + receptor.DocRecep;
                                        }
                                        else
                                            receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                        esUruguayoFITCO = true;
                                    }

                                    if (esUruguayoFITCO == false && (receptor.TipoDocRecep == DocType.Item4 || receptor.TipoDocRecep == DocType.Item6))
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) || receptor.CodPaisRecep == CodPaisType.UY)
                                        {
                                            if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                                receptor.CodPaisRecep = CodPaisType.AR;
                                            else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                                receptor.CodPaisRecep = CodPaisType.BR;
                                            else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                                receptor.CodPaisRecep = CodPaisType.CL;
                                            else
                                                receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais NUEVA LINEA
                                        }
                                        /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                        {
                                            if (receptor.CodPaisRecep != CodPaisType.UY)
                                                esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                            else
                                                esDocUruguayo = true;
                                        }*/
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo
                                }
                                catch (Exception e)
                                {
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando Cliente Ext", e.Message.ToString()); // Guarda log del Proceso
                                }

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                if (esContingencia == true)
                                {
                                    if (idDoc.TipoCFE == IdDoc_FactTipoCFE.Item103 || idDoc.TipoCFE == IdDoc_FactTipoCFE.Item203)
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item203;
                                    else
                                        idDoc.TipoCFE = IdDoc_FactTipoCFE.Item213;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cargar el Receptor", e.Message.ToString()); // Guarda log del Proceso}
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                ////// Bloque de codigo para controlar el Redondeo del documento
                                ////redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                ////if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")) )// Si el documento no es en Pesos
                                ////    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                ////if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                ////    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                //string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                //if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                //    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }
                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0)
                                                    {
                                                        if (descuent == 0 || (descEmpresa.ToString().Equals("BOSCH") && descuent != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }
                                                }
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo))
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
                                                else
                                                    montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 5);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 5);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        ////decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        ////montoCalculado = decimal.Round(montoCalculado, 2);
                                        ////if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                        ////    if ((montoTotalLinea - montoCalculado <= 1 && montoTotalLinea - montoCalculado >= -1) || (montoCalculado - montoTotalLinea <= 1 && montoCalculado - montoTotalLinea >= -1)) // Si la diferencia es de centésimos 
                                        ////        montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 5);

                                        if (descuent > 0)
                                        {
                                            //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                            item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                            item.MontoItem = decimal.Round(item.MontoItem, 2);
                                        }
                                        if (item.DescuentoPct != 0 && descuent == 0)
                                        {
                                            item.DescuentoPctSpecified = true;
                                            //item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad; // VA o NO?
                                            item.DescuentoMonto = montoDescUni * item.Cantidad;
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else if (item.DescuentoPct == 0 && descuent == 0)
                                        {
                                            item.DescuentoPctSpecified = false;
                                            item.DescuentoMontoSpecified = false;
                                        }
                                        else if (item.DescuentoPct != 0 && descuent > 0)
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct += descuent;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct += descuent;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct = descuent;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        }

                                        // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                        if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                            if (item.MontoItem != item.PrecioUnitario)
                                                item.PrecioUnitario = item.MontoItem;

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        montoTotalItems += item.MontoItem;
                                        detalle[cont] = item;

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }

                                    try
                                    {
                                        if (redondeoDocumento != 0)
                                        {
                                            // Agrego el item de redondeo
                                            Item_Det_Fact itemRedondeo = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            itemRedondeo.NroLinDet = nroLinea.ToString();
                                            itemRedondeo.NomItem = "Ajuste por Redondeo";
                                            itemRedondeo.DscItem = "";
                                            itemRedondeo.DescuentoMontoSpecified = false;
                                            itemRedondeo.DescuentoPctSpecified = false;
                                            itemRedondeo.IndAgenteRespSpecified = false;
                                            itemRedondeo.RecargoMntSpecified = false;
                                            itemRedondeo.RecargoPctSpecified = false;
                                            itemRedondeo.MontoItem = redondeoDocumento;
                                            itemRedondeo.Cantidad = 1;
                                            if (itemRedondeo.MontoItem >= 0)
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item6;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                            }
                                            else
                                            {
                                                itemRedondeo.IndFact = Item_Det_FactIndFact.Item7;
                                                itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                                itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                                itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                            }
                                            itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                            itemRedondeo.PrecioUnitarioSpecified = true;
                                            itemRedondeo.UniMed = "N/A";
                                            detalle[cont] = itemRedondeo;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }
                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                {
                                    totales.MntNoGrvSpecified = false;
                                }
                                else
                                {
                                    totales.MntNoGrvSpecified = true;
                                }

                                totales.MntExpoyAsimSpecified = false;
                                totales.MntImpuestoPercSpecified = false;
                                totales.MntIVaenSuspSpecified = false;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                if (totales.MntNetoIvaTasaMin == 0)
                                {
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                if (totales.MntNetoIVATasaBasica == 0)
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                if (totales.MntNetoIVAOtra == 0)
                                {
                                    totales.MntNetoIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVAOtraSpecified = true;
                                }
                                totales.IVATasaBasica = ivaBasico;
                                totales.IVATasaBasicaSpecified = true;
                                totales.IVATasaMin = ivaMinimo;
                                totales.IVATasaMinSpecified = true;

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVABasico != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaMin = montoImpuestoDocumento;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                {
                                    totales.MntIVATasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    if ((TotalItemsGravadosIVAMinimo != 0 || TotalItemsGravadosIVAOtra != 0) || (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("ALMEN")))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                {
                                    totales.MntIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                decimal sumaMontos = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                if (sumaMontos == totales.MntNoGrv) // Si el total es todo de Monto items No Gravados con IVA
                                {
                                    if (sumaMontos != 0 && ((sumaMontos - montoTotalItems <= 1 && sumaMontos - montoTotalItems > 0) || (montoTotalItems - sumaMontos <= 1 && montoTotalItems - sumaMontos > 0)))
                                    {
                                        sumaMontos = montoTotalItems;
                                        totales.MntNoGrv = montoTotalItems;
                                    }
                                }

                                totales.MntTotal = sumaMontos;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if (descuent > 0)
                                {
                                    if (totales.MntNetoIVAOtra == 0 && totales.MntNetoIVATasaBasica == 0 && totales.MntNetoIvaTasaMin == 0 && totales.MntNoGrv != 0)
                                    {   // Validacion para corregir facturas que son solo con IVA Exento.
                                        decimal pagarNoGrv = totales.MntPagar - totales.MntNoGrv;
                                        if ((pagarNoGrv <= 1 && pagarNoGrv >= -1))
                                        {
                                            totales.MntNoGrv = totales.MntPagar;
                                            totales.MntTotal = totales.MntNoGrv;
                                        }
                                    }
                                }

                                if ((totales.MntPagar != totales.MntTotal) || (redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal)
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento && totales.MntPagar != totales.MntTotal + (redondeoDocumento * -1))
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }

                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("DocDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                    }
                                    if (totales.TpoCambio != 0)
                                        totales.TpoCambioSpecified = true;
                                    else
                                        totales.TpoCambioSpecified = false;
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;
                                totales.MontoNF = redondeoDocumento;

                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                // VALIDACION MNTPAGAR
                                try
                                {
                                    decimal diferenciaError = totales.MntPagar - (totales.MntTotal + totales.MntTotRetenido + totales.MontoNF);
                                    if (diferenciaError != 0 && diferenciaError < 1 && diferenciaError > -1)
                                    {
                                        if (diferenciaError <= Convert.ToDecimal(0.02) && diferenciaError >= Convert.ToDecimal(-0.02))
                                        {
                                            if (totales.MntTotal == totales.MntNoGrv && totales.MntTotRetenido == 0 && totales.MontoNF == 0) // Si el Monto Total = al Monto Exportacion y no tiene redondeo
                                                totales.MntPagar = totales.MntTotal;
                                            else
                                                totales.MntPagar = totales.MntTotal + totales.MntTotRetenido;
                                        }
                                        else
                                        {
                                            if (totales.MntNoGrv != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntNoGrv = totales.MntNoGrv + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                            else if (totales.MntExpoyAsim != 0)// Si tiene monto no gravado
                                            {
                                                if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim - diferenciaError;
                                                    totales.MntTotal = totales.MntTotal - diferenciaError;
                                                }
                                                else
                                                {
                                                    totales.MntExpoyAsim = totales.MntExpoyAsim + diferenciaError;
                                                    totales.MntTotal = totales.MntTotal + diferenciaError;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                { }
                                // FINAL VALIDACION

                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {

                            }

                            factura.Encabezado = encabezado;


                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////    DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////    descuento.NroLinDR = "1";
                            ////    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////    descuento.TpoDR = TipoDRType.Item2;
                            ////    descuento.TpoDRSpecified = true;
                            ////    decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////    descuento.ValorDR = Math.Round(valorDR, 2);
                            ////    if (descuento.ValorDR > 0)
                            ////    {
                            ////        descuentosRecargos[0] = descuento;
                            ////        factura.DscRcgGlobal = descuentosRecargos;
                            ////    }
                            ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            //Referencias
                            try
                            {
                                int num = 1;

                                string tipoDocumentosReferencia = oRSMyTable.Fields.Item("U_TIPOREF").Value;
                                string documentosReferencia = oRSMyTable.Fields.Item("U_SI_ComInv").Value;
                                List<clsObjeto> listaReferencias = crearListaReferencia(documentosReferencia);

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaNotaCredito(codigoDocEntry); // Le paso el DocEntry

                                bool notaCredGlobal = false;
                                if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                    if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                        notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                if (listaReferencias.Count == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (listaReferencias.Count > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[listaReferencias.Count];

                                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                        if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                            notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    if (listaReferencias != null)
                                    {
                                        foreach (clsObjeto objetoReferencia in listaReferencias)
                                        {
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = objetoReferencia.Serie;
                                            int nro = Convert.ToInt32(objetoReferencia.Folio);
                                            int tipo = 0;
                                            if (!tipoDocumentosReferencia.ToString().Equals("XXX") && !String.IsNullOrEmpty(tipoDocumentosReferencia.ToString()))
                                            {
                                                tipo = Convert.ToInt32(tipoDocumentosReferencia);
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                    refe.TpoDocRef = CFEType.Item111;
                                                else if (tipo == 101)
                                                    refe.TpoDocRef = CFEType.Item101;
                                                else if (tipo == 112)
                                                    refe.TpoDocRef = CFEType.Item112;
                                                else if (tipo == 113)
                                                    refe.TpoDocRef = CFEType.Item113;
                                                else if (tipo == 102)
                                                    refe.TpoDocRef = CFEType.Item102;
                                                else if (tipo == 103)
                                                    refe.TpoDocRef = CFEType.Item103;
                                                else if (tipo == 121)
                                                    refe.TpoDocRef = CFEType.Item121;
                                                else if (tipo == 122)
                                                    refe.TpoDocRef = CFEType.Item122;
                                                else if (tipo == 201)
                                                    refe.TpoDocRef = CFEType.Item201;
                                                else if (tipo == 211)
                                                    refe.TpoDocRef = CFEType.Item211;
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                        }
                                    }

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            ////Referencias
                            //int num = 1;

                            //if (facturas.Count == 0)
                            //{
                            //    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                            //    ReferenciaReferencia refe = new ReferenciaReferencia();
                            //    refe.NroLinRef = "1";
                            //    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                            //    refe.IndGlobalSpecified = true;
                            //    refe.TpoDocRefSpecified = false;
                            //    refe.RazonRef = "Referencia a documento no codificado";
                            //    refe.FechaCFErefSpecified = false;
                            //    referencia[0] = refe;
                            //    factura.Referencia = referencia;
                            //    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            //}
                            //else if (facturas.Count > 40)
                            //{
                            //    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                            //    ReferenciaReferencia refe = new ReferenciaReferencia();
                            //    refe.NroLinRef = "1";
                            //    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                            //    refe.IndGlobalSpecified = true;
                            //    refe.TpoDocRefSpecified = false;
                            //    refe.RazonRef = "Afecta a mas de 40 CFE";
                            //    refe.FechaCFErefSpecified = false;
                            //    referencia[0] = refe;
                            //    factura.Referencia = referencia;
                            //    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            //}
                            //else
                            //{
                            //    ReferenciaReferencia[] referencia = new ReferenciaReferencia[facturas.Count];
                            //    foreach (int i in facturas)
                            //    {
                            //        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            //        SAPbobsCOM.Recordset oRSMyTable4 = ObtenerFactura(i.ToString(), pFormFactura);
                            //        if (oRSMyTable4 != null)
                            //        {
                            //            while (!oRSMyTable4.EoF)
                            //            {
                            //                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            //                ReferenciaReferencia refe = new ReferenciaReferencia();
                            //                refe.NroLinRef = num.ToString();
                            //                String serie = oRSMyTable4.Fields.Item("FolioPref").Value;
                            //                int nro = oRSMyTable4.Fields.Item("FolioNum").Value;
                            //                int tipo = Int32.Parse(oRSMyTable4.Fields.Item(campoReferencia).Value);
                            //                if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                            //                {
                            //                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                            //                    refe.IndGlobalSpecified = true;
                            //                    refe.TpoDocRefSpecified = false;
                            //                    refe.RazonRef = "Referencia a documento no codificado";
                            //                    refe.FechaCFErefSpecified = false;
                            //                }
                            //                else
                            //                {
                            //                    refe.IndGlobalSpecified = false;
                            //                    refe.TpoDocRefSpecified = true;
                            //                    if (tipo == 111)
                            //                    {
                            //                        refe.TpoDocRef = CFEType.Item111;
                            //                    }
                            //                    else if (tipo == 101)
                            //                    {
                            //                        refe.TpoDocRef = CFEType.Item101;
                            //                    }
                            //                    refe.Serie = serie;
                            //                    refe.NroCFERef = nro.ToString();
                            //                    refe.FechaCFErefSpecified = false;
                            //                }

                            //                referencia[num - 1] = refe;
                            //                num++;
                            //            }
                            //        }
                            //    }
                            //    factura.Referencia = referencia;
                            //}

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA"))
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            if (descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI")) // Si es FITCO
                            {
                                SAPbobsCOM.Recordset orsMyTableAdenda = obtenerDatosAdendaFitco(codigoDocEntry.ToString(), "13");
                                if (orsMyTableAdenda != null)
                                {
                                    while (!orsMyTableAdenda.EoF)
                                    {
                                        sicfeAdenda = "VESSEL:                      " + orsMyTableAdenda.Fields.Item("Vessel").Value + "<br>";
                                        sicfeAdenda += "REFERENCE NUMBER:            " + orsMyTableAdenda.Fields.Item("VesselReference").Value + "<br>";
                                        sicfeAdenda += "BILL OF LADING DATE:         " + oRSMyTable.Fields.Item("TaxDate").Value + "<br>"; // U_SI_DatDoc
                                        sicfeAdenda += "LOADING PORT:                " + orsMyTableAdenda.Fields.Item("LoadingPort").Value + "<br>";
                                        sicfeAdenda += "DISCHARGE PORT:              " + orsMyTableAdenda.Fields.Item("DischargePort").Value + "<br>";
                                        sicfeAdenda += "BANK DETAILS:                " + bankDetails.ToString() + "<br>";
                                        sicfeAdenda += "ACCOUNT:                     " + bankAccount.ToString() + "<br>";
                                        sicfeAdenda += "ABA:                         " + bankAba.ToString() + "<br>";
                                        sicfeAdenda += "SWIFT:                       " + bankSwift.ToString() + "<br>";
                                        if (descEmpresa.ToString().Equals("FITCO"))
                                            sicfeAdenda += "BENEFICIARY:                 " + "FITCO INTERNATIONAL SA" + "<br>";
                                        else
                                            sicfeAdenda += "BENEFICIARY:                 " + "FITCO OCI AGRO SA" + "<br>";
                                        sicfeAdenda += "PAYMENTS TERMS:              " + orsMyTableAdenda.Fields.Item("PaymentTerms").Value + "<br>";

                                        orsMyTableAdenda.MoveNext();
                                    }
                                }
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Nota Debito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlRemitosNuevo(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";

            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;
                bool esContingencia = false;
                string documentoBaseRural = "";
                clsObjDocumento objDoc = new clsObjDocumento();

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            CFEDefTypeERem remito = new CFEDefTypeERem();

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                codigoDocEntry = objDoc.DocEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA") || descEmpresa.Equals("RURAL"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            remito.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item181; //IdDoc_FactTipoCFE.item;

                                if (pFormFactura.Equals("140") || pFormFactura.Equals("180")) // Si es una Entrega o devolución
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                idDoc.TipoCFE = IdDoc_RemTipoCFE.Item281;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                //ASPL - 2020.10.29 - Según solicitado, ticket Nº 6105, sacar en impresión del encabezado de e-Remitos la condición de pago.
                                /*string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2019-10-10 Condiciones de pago segun criterio, Almacen Rural. 2020-04-27, Condicion de pago sin criterios.
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.09.30 Cambio por nuevo layout. 
                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago; */

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando CfeDefTypeERem Remito", ex.ToString()); // Guarda log del Proceso
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String rucDocumento = "";

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182"))
                                    tipoCliente = "S"; // Proveedor

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    if (oRSMyTable2.RecordCount != 0)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            if (descEmpresa.ToString().Equals("RURAL"))
                                                receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; //Copia de factura nuevo 24/09/2020
                                            receptor.LugarDestEnt = "";
                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            if (descEmpresa.ToString().Equals("SCHIN"))
                                                receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            try
                                            {
                                                rucDocumento = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }
                                    else
                                    {
                                        // Por defecto carga un valor vacío, para que aparezca el tag en el XML
                                        receptor.DirRecep = "";
                                        receptor.CiudadRecep = "";
                                    }
                                }

                                if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) && !String.IsNullOrEmpty(receptor.PaisRecep))
                                {
                                    if (!receptor.CodPaisRecep.Equals("UY") && (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy")))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando Receptor Remito Exp", e.ToString()); // Guarda log del Proceso
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[objDoc.lineas.Count];

                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                        {
                                            if (!String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural += ", ";

                                            if (!string.IsNullOrEmpty(lineaRec.BaseDocNum) && documentoBaseRural.Contains(lineaRec.BaseDocNum))
                                                documentoBaseRural = documentoBaseRural.Remove(documentoBaseRural.Length - 2);
                                            else
                                                documentoBaseRural += lineaRec.BaseDocNum; // Me guardo el documento Base para el Adenda
                                        }

                                        Item_Rem item = new Item_Rem();
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = lineaRec.DescripcionDocumento;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        decimal precio = lineaRec.Precio;

                                        try
                                        {
                                            item.DscItem = lineaRec.ItemCode; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = lineaRec.VisOrder.ToString() + "- " + item.DscItem + "-" + lineaRec.U_Marca + "-" + item.NomItem;

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = lineaRec.FreeTxt;
                                                else if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.10.14, Implementacion de lotes y unidad de medida.
                                                {
                                                    item.DscItem = lineaRec.LoteBatchNum;
                                                    item.UniMed = lineaRec.UnidadMedida;
                                                }
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = lineaRec.MonedaLinea;
                                            tipoCambioArticulo = lineaRec.TipoCambioLinea;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = lineaRec.CodigoImpuesto; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                            }
                                        }
                                        else
                                        {
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                            }
                                        }

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.IndFactSpecified = false;
                                        }

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        detalle[cont] = item;
                                        cont++;
                                    }
                                }

                                remito.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                //Totales totales = new Totales();
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();
                                totales.TpoMonedaFieldSpecified = false;
                                totales.TpoCambioSpecified = false;
                                totales.MntExpoyAsimSpecified = false;
                                totales.CantLinDet = objDoc.lineas.Count().ToString();
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            remito.Encabezado = encabezado;

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                            if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                string strObsCliente = oRSMyTable.Fields.Item("U_Obcli").Value;
                                string strDirEntrega = oRSMyTable.Fields.Item("Address2").Value;
                                string strContacto = oRSMyTable.Fields.Item("U_CONTACTO").Value;
                                string strTelefono = oRSMyTable.Fields.Item("U_TELEFONO").Value;
                                string strResponsable = obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value);
                                string strTransportista = ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura);
                                string strDocInterno = codigoFactura.ToString();

                                if (!string.IsNullOrEmpty(strObsCliente))
                                    sicfeAdenda += "Obs. Cliente: " + strObsCliente + "SALTOLINEA"; // Observaciones del Cliente 
                                if (!string.IsNullOrEmpty(strDirEntrega))
                                    sicfeAdenda += "Dir Entrega: " + strDirEntrega + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strContacto))
                                    sicfeAdenda += "Contacto: " + strContacto + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTelefono))
                                    sicfeAdenda += "Telefono: " + strTelefono + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strResponsable))
                                    sicfeAdenda += "Responsable: " + strResponsable + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTransportista))
                                    sicfeAdenda += "Transportista: " + strTransportista + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(documentoBaseRural))
                                    sicfeAdenda += "Documento Enlazado: " + documentoBaseRural + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strDocInterno))
                                    sicfeAdenda += "Documento Interno: " + strDocInterno + "SALTOLINEA";
                                string stOrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                if (!string.IsNullOrEmpty(stOrdComp))
                                    sicfeAdenda += "Orden Compra: " + stOrdComp + "SALTOLINEA";
                                sicfeAdenda += "Recibí las mercaderías detalladas y abonaré su pago en el plazo y condiciones pactadas. La firma de este remito aporta conformidad. El no pago de la factura correspondiente a este documento en el plazo estipulado generará el máximo interés legal. SALTOLINEA";
                                sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                sicfeAdenda += "C.I_________________Fecha______________Hora_____. SALTOLINEA";
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, remito);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                            oRSMyTable = null;

                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                        }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }

            return result;
        }

        public String GenerarXmlRemitos(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";

            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;
                bool esContingencia = false;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            //eFact factura = new eFact();

                            CFEDefTypeERem factura = new CFEDefTypeERem();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA") || descEmpresa.Equals("RURAL"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item181; //IdDoc_FactTipoCFE.item;

                                if (pFormFactura.Equals("140") || pFormFactura.Equals("180")) // Si es una Entrega o devolución
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                idDoc.TipoCFE = IdDoc_RemTipoCFE.Item281;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2019-10-10 Condiciones de pago segun criterio, Almacen Rural. 2020-04-27, Condicion de pago sin criterios.
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.09.30 Cambio por nuevo layout.
                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando CfeDefTypeERem Remito", ex.ToString()); // Guarda log del Proceso
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String rucDocumento = "";

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182"))
                                    tipoCliente = "S"; // Proveedor

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    if (oRSMyTable2.RecordCount != 0)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            if (descEmpresa.ToString().Equals("RURAL"))
                                                receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; //Copia de factura nuevo 24/09/2020
                                            receptor.LugarDestEnt = "";
                                            /*if (descEmpresa.ToString().Equals("RURAL"))
                                            {
                                                string hora = DateTime.Now.Hour.ToString();
                                                receptor.InfoAdicional = "Cliente: " + oRSMyTable2.Fields.Item("CardCode").Value + "\r\n" + "Condicion de Pago: " + oRSMyTable2.Fields.Item("GroupNum").Value + "\r\n" + "Moneda: " + oRSMyTable2.Fields.Item("DocCur").Value + "\r\n" + "Hora: " + hora;
                                            }// Le cargo la direccion de correo electronico*/
                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            if (descEmpresa.ToString().Equals("SCHIN"))
                                                receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            try
                                            {
                                                rucDocumento = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }
                                    else
                                    {
                                        // Por defecto carga un valor vacío, para que aparezca el tag en el XML
                                        receptor.DirRecep = "";
                                        receptor.CiudadRecep = "";
                                    }
                                }

                                if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) && !String.IsNullOrEmpty(receptor.PaisRecep))
                                {
                                    if (!receptor.CodPaisRecep.Equals("UY") && (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy")))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando Receptor Remito Exp", e.ToString()); // Guarda log del Proceso
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[oRSMyTable3.RecordCount];

                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                        Item_Rem item = new Item_Rem();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                //else if (descEmpresa.ToString().Equals("RURAL"))
                                                //{
                                                //    string codigoArticulo = oRSMyTable3.Fields.Item("ItemCode").Value.ToString();
                                                //    item.NomItem = codigoArticulo + " - " + item.DscItem;
                                                //}
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            //item.IndFact = Item_RemIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            item.IndFactSpecified = false;
                                        }

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        detalle[cont] = item;
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                //Totales totales = new Totales();
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();
                                totales.TpoMonedaFieldSpecified = false;
                                totales.TpoCambioSpecified = false;
                                totales.MntExpoyAsimSpecified = false;
                                totales.CantLinDet = oRSMyTable3.RecordCount.ToString();
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                            if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                string stOrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                if (!string.IsNullOrEmpty(stOrdComp))
                                    sicfeAdenda += "Orden Compra: " + stOrdComp + "SALTOLINEA";
                                sicfeAdenda += "Recibí las mercaderías detalladas y abonaré su pago en el plazo y condiciones pactadas. La firma de este remito aporta conformidad. El no pago de la factura correspondiente a este documento en el plazo estipulado generará el máximo interés legal. SALTOLINEA";
                                sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                sicfeAdenda += "C.I_________________Fecha______________Hora_____. SALTOLINEA";
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Remito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlRemitosCancelacionesNuevo(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";

            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;
                bool esContingencia = false;
                string documentoBaseRural = "";
                clsObjDocumento objDoc = new clsObjDocumento();

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            CFEDefTypeERem remito = new CFEDefTypeERem();

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                codigoDocEntry = objDoc.DocEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA") || descEmpresa.Equals("RURAL"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            remito.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item181; //IdDoc_FactTipoCFE.item;

                                if (pFormFactura.Equals("140") || pFormFactura.Equals("180")) // Si es una Entrega o devolución
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                idDoc.TipoCFE = IdDoc_RemTipoCFE.Item281;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                //ASPL - 2020.10.29 - Según solicitado, ticket Nº 6105, sacar en impresión del encabezado de e-Remitos la condición de pago.
                                /*string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2019-10-10 Condiciones de pago segun criterio, Almacen Rural. 2020-04-27, Condicion de pago sin criterios.
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.09.30 Cambio por nuevo layout.
                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago;*/

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando Remito", ex.ToString()); // Guarda log del Proceso
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String rucDocumento = "";

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182") || pFormFactura.ToString().Equals("143"))
                                    tipoCliente = "S"; // Proveedor

                                string paisReceptor = "";
                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    if (oRSMyTable2.RecordCount != 0)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            paisReceptor = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, paisReceptor);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            if (descEmpresa.ToString().Equals("RURAL"))
                                                receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; //Copia de factura nuevo 24/09/2020
                                            receptor.LugarDestEnt = "";

                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            try
                                            {
                                                rucDocumento = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }
                                    else
                                    {
                                        receptor.DirRecep = "";
                                        receptor.CiudadRecep = "";
                                    }
                                }

                                if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) && !String.IsNullOrEmpty(receptor.PaisRecep))
                                {
                                    if (!receptor.CodPaisRecep.Equals("UY") && (!paisReceptor.ToString().Equals("Uruguay") && !paisReceptor.ToString().Equals("uruguay") && !paisReceptor.ToString().Equals("UY") && !paisReceptor.ToString().Equals("uy")))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (paisReceptor.ToString().Equals("AR") || paisReceptor.ToString().Equals("Argentina") || paisReceptor.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (paisReceptor.ToString().Equals("BR") || paisReceptor.ToString().Equals("Brasil") || paisReceptor.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (paisReceptor.ToString().Equals("CL") || paisReceptor.ToString().Equals("Chile") || paisReceptor.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(paisReceptor.ToString()))
                                    receptor.PaisRecep = paisReceptor;

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[objDoc.lineas.Count];

                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                        {
                                            if (!String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural += ", ";

                                            if (!string.IsNullOrEmpty(lineaRec.BaseDocNum) && documentoBaseRural.Contains(lineaRec.BaseDocNum))
                                                documentoBaseRural = documentoBaseRural.Remove(documentoBaseRural.Length - 2);
                                            else
                                                documentoBaseRural += lineaRec.BaseDocNum; // Me guardo el documento Base para el Adenda
                                        }

                                        Item_Rem item = new Item_Rem();
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = lineaRec.DescripcionDocumento;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        decimal precio = lineaRec.Precio;

                                        try
                                        {
                                            item.DscItem = lineaRec.ItemCode;
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = lineaRec.VisOrder.ToString() + "- " + item.DscItem + "-" + lineaRec.U_Marca + "-" + item.NomItem;

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = lineaRec.FreeTxt;
                                                else if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.10.14, Implementacion de lotes y unidad de medida.
                                                {
                                                    item.DscItem = lineaRec.LoteBatchNum;
                                                    item.UniMed = lineaRec.UnidadMedida;
                                                }
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = lineaRec.MonedaLinea;
                                            tipoCambioArticulo = lineaRec.TipoCambioLinea;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = lineaRec.CodigoImpuesto; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                            }
                                        }
                                        else
                                        {
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                            }
                                        }

                                        item.IndFact = Item_RemIndFact.Item8; // Remito Cancelacion
                                        item.IndFactSpecified = true;

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        if (item.MontoItem <= 0)
                                            item.PrecioUnitario = 0;

                                        detalle[cont] = item;
                                        cont++;
                                    }
                                }
                                remito.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();
                                totales.TpoMonedaFieldSpecified = false;
                                totales.TpoCambioSpecified = false;
                                totales.MntExpoyAsimSpecified = false;
                                totales.CantLinDet = objDoc.lineas.Count().ToString();
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            remito.Encabezado = encabezado;

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG") || !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 

                            if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                sicfeAdenda += " DEVOLUCION - REMITO " + "SALTOLINEA";
                                string strObsCliente = oRSMyTable.Fields.Item("U_Obcli").Value;
                                string strDirEntrega = oRSMyTable.Fields.Item("Address2").Value;
                                string strContacto = oRSMyTable.Fields.Item("U_CONTACTO").Value;
                                string strTelefono = oRSMyTable.Fields.Item("U_TELEFONO").Value;
                                string strResponsable = obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value);
                                string strTransportista = ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura);
                                string strDocInterno = codigoFactura.ToString();

                                if (!string.IsNullOrEmpty(strObsCliente))
                                    sicfeAdenda += "Obs. Cliente: " + strObsCliente + "SALTOLINEA"; // Observaciones del Cliente 
                                if (!string.IsNullOrEmpty(strDirEntrega))
                                    sicfeAdenda += "Dir Entrega: " + strDirEntrega + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strContacto))
                                    sicfeAdenda += "Contacto: " + strContacto + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTelefono))
                                    sicfeAdenda += "Telefono: " + strTelefono + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strResponsable))
                                    sicfeAdenda += "Responsable: " + strResponsable + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTransportista))
                                    sicfeAdenda += "Transportista: " + strTransportista + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(documentoBaseRural))
                                    sicfeAdenda += "Documento Enlazado: " + documentoBaseRural + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strDocInterno))
                                    sicfeAdenda += "Documento Interno: " + strDocInterno + "SALTOLINEA";
                                string stOrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                if (!string.IsNullOrEmpty(stOrdComp))
                                    sicfeAdenda += "Orden Compra: " + stOrdComp + "SALTOLINEA";
                                sicfeAdenda += "Recibí las mercaderías detalladas y abonaré su pago en el plazo y condiciones pactadas. La firma de este remito aporta conformidad. El no pago de la factura correspondiente a este documento en el plazo estipulado generará el máximo interés legal. SALTOLINEA";
                                sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                sicfeAdenda += "C.I_________________Fecha______________Hora_____. SALTOLINEA";
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, remito);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                            oRSMyTable = null;

                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "Error XML Generado Remito", result.ToString()); // Guarda log del Proceso
                        }
                    }
                }
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }

            return result;
        }

        public String GenerarXmlRemitosCancelaciones(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;
                bool esContingencia = false;
                string documentoBaseRural = "";

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            //eFact factura = new eFact();

                            CFEDefTypeERem factura = new CFEDefTypeERem();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item181; //IdDoc_FactTipoCFE.item;

                                if (pFormFactura.Equals("140") || pFormFactura.Equals("180")) // Si es una Entrega o devolución
                                {
                                    // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                    string indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                    if (indicador.ToString().Equals("01")) // Es contingencia
                                    {
                                        try
                                        {
                                            int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                            string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                            if (folioDocumento != 0)
                                            {
                                                idDoc.Nro = folioDocumento.ToString();
                                                idDoc.Serie = SerieDocumento;
                                                idDoc.TipoCFE = IdDoc_RemTipoCFE.Item281;
                                                esContingencia = true;
                                            }
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                }

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2019-10-10 Condiciones de pago segun criterio, Almacen Rural. 2020-04-27, Condicion de pago sin criterios.
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.09.30 Cambio por nuevo layout.
                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String rucDocumento = "";

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182") || pFormFactura.ToString().Equals("143"))
                                    tipoCliente = "S"; // Proveedor

                                string paisReceptor = "";
                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    if (oRSMyTable2.RecordCount != 0)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            paisReceptor = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, paisReceptor);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            if (descEmpresa.ToString().Equals("RURAL"))
                                                receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; //Copia de factura nuevo 24/09/2020
                                            receptor.LugarDestEnt = "";

                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            try
                                            {
                                                rucDocumento = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }
                                    else
                                    {
                                        receptor.DirRecep = "";
                                        receptor.CiudadRecep = "";
                                    }
                                }

                                if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) && !String.IsNullOrEmpty(receptor.PaisRecep))
                                {
                                    if (!receptor.CodPaisRecep.Equals("UY") && (!paisReceptor.ToString().Equals("Uruguay") && !paisReceptor.ToString().Equals("uruguay") && !paisReceptor.ToString().Equals("UY") && !paisReceptor.ToString().Equals("uy")))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (paisReceptor.ToString().Equals("AR") || paisReceptor.ToString().Equals("Argentina") || paisReceptor.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (paisReceptor.ToString().Equals("BR") || paisReceptor.ToString().Equals("Brasil") || paisReceptor.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (paisReceptor.ToString().Equals("CL") || paisReceptor.ToString().Equals("Chile") || paisReceptor.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(paisReceptor.ToString()))
                                    receptor.PaisRecep = paisReceptor;

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[oRSMyTable3.RecordCount];

                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                        {
                                            string sBaseDocNum = oRSMyTable3.Fields.Item("BaseDocNum").Value;
                                            if (!String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural += ", ";

                                            if (!string.IsNullOrEmpty(sBaseDocNum) && documentoBaseRural.Contains(sBaseDocNum))
                                                documentoBaseRural = documentoBaseRural.Remove(documentoBaseRural.Length - 2);
                                            else
                                                documentoBaseRural += sBaseDocNum; // Me guardo el documento Base para el Adenda
                                        }

                                        Item_Rem item = new Item_Rem();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }

                                        item.IndFact = Item_RemIndFact.Item8; // Remito Cancelacion
                                        item.IndFactSpecified = true;

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            //item.IndFact = Item_RemIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                        }

                                        detalle[cont] = item;
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                //Totales totales = new Totales();
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();
                                totales.TpoMonedaFieldSpecified = false;
                                totales.TpoCambioSpecified = false;
                                totales.MntExpoyAsimSpecified = false;
                                totales.CantLinDet = oRSMyTable3.RecordCount.ToString();
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            /*try
                            {
                                int num = 1;

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaRemitoCancelacion(codigoDocEntry); // Le paso el DocEntry

                                if (oRSMyTableDocRef.RecordCount == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) )
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (oRSMyTableDocRef.RecordCount > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];
                                    if (oRSMyTableDocRef != null)
                                    {
                                        while (!oRSMyTableDocRef.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                            int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                            if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")))
                                                    refe.RazonRef = "Descuentos sobre las facturas del mes";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                {
                                                    refe.TpoDocRef = CFEType.Item111;
                                                }
                                                else if (tipo == 101)
                                                {
                                                    refe.TpoDocRef = CFEType.Item101;
                                                }
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTableDocRef.MoveNext();
                                        }
                                    }

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }*/

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG") || !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 

                            if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                string strObsCliente = oRSMyTable.Fields.Item("U_Obcli").Value;
                                string strDirEntrega = oRSMyTable.Fields.Item("Address2").Value;
                                string strContacto = oRSMyTable.Fields.Item("U_CONTACTO").Value;
                                string strTelefono = oRSMyTable.Fields.Item("U_TELEFONO").Value;
                                string strResponsable = obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value);
                                string strTransportista = ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura);
                                string strDocInterno = codigoFactura.ToString();

                                if (!string.IsNullOrEmpty(strObsCliente))
                                    sicfeAdenda += "Obs. Cliente: " + strObsCliente + "SALTOLINEA"; // Observaciones del Cliente 
                                if (!string.IsNullOrEmpty(strDirEntrega))
                                    sicfeAdenda += "Dir Entrega: " + strDirEntrega + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strContacto))
                                    sicfeAdenda += "Contacto: " + strContacto + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTelefono))
                                    sicfeAdenda += "Telefono: " + strTelefono + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strResponsable))
                                    sicfeAdenda += "Responsable: " + strResponsable + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTransportista))
                                    sicfeAdenda += "Transportista: " + strTransportista + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strDocInterno))
                                    sicfeAdenda += "Documento Interno: " + strDocInterno + "SALTOLINEA";
                                //if (!string.IsNullOrEmpty(documentoBaseRural))
                                //    sicfeAdenda += "Documento Enlazado: " + documentoBaseRural + "SALTOLINEA";
                                string stOrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                if (!string.IsNullOrEmpty(stOrdComp))
                                    sicfeAdenda += "Orden Compra: " + stOrdComp + "SALTOLINEA";
                                sicfeAdenda += "Recibí las mercaderías detalladas y abonaré su pago en el plazo y condiciones pactadas. La firma de este remito aporta conformidad. El no pago de la factura correspondiente a este documento en el plazo estipulado generará el máximo interés legal. SALTOLINEA";
                                sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                sicfeAdenda += "C.I_________________Fecha______________Hora_____. SALTOLINEA";
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Remito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlRemitosCancelacionesExportacion(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            //eFact factura = new eFact();

                            CFEDefTypeERem factura = new CFEDefTypeERem();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item181; //IdDoc_FactTipoCFE.item;

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String rucDocumento = "";

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182") || pFormFactura.ToString().Equals("143"))
                                    tipoCliente = "S"; // Proveedor

                                string paisReceptor = "";
                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    if (oRSMyTable2.RecordCount != 0)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            paisReceptor = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, paisReceptor);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            receptor.LugarDestEnt = "";

                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            try
                                            {
                                                rucDocumento = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }
                                    else
                                    {
                                        receptor.DirRecep = "";
                                        receptor.CiudadRecep = "";
                                    }
                                }

                                if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) && !String.IsNullOrEmpty(receptor.PaisRecep))
                                {
                                    if (!receptor.CodPaisRecep.Equals("UY") && (!paisReceptor.ToString().Equals("Uruguay") && !paisReceptor.ToString().Equals("uruguay") && !paisReceptor.ToString().Equals("UY")))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (paisReceptor.ToString().Equals("AR") || paisReceptor.ToString().Equals("Argentina") || paisReceptor.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (paisReceptor.ToString().Equals("BR") || paisReceptor.ToString().Equals("Brasil") || paisReceptor.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (paisReceptor.ToString().Equals("CL") || paisReceptor.ToString().Equals("Chile") || paisReceptor.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(paisReceptor.ToString()))
                                    receptor.PaisRecep = paisReceptor;

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[oRSMyTable3.RecordCount];

                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Rem item = new Item_Rem();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }

                                        item.IndFact = Item_RemIndFact.Item8; // Remito Cancelacion
                                        item.IndFactSpecified = true;

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        detalle[cont] = item;
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                //Totales totales = new Totales();
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();
                                totales.TpoMonedaFieldSpecified = false;
                                totales.TpoCambioSpecified = false;
                                totales.MntExpoyAsimSpecified = false;
                                totales.CantLinDet = oRSMyTable3.RecordCount.ToString();
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            /*try
                            {
                                int num = 1;

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaRemitoCancelacion(codigoDocEntry); // Le paso el DocEntry

                                if (oRSMyTableDocRef.RecordCount == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) )
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (oRSMyTableDocRef.RecordCount > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];
                                    if (oRSMyTableDocRef != null)
                                    {
                                        while (!oRSMyTableDocRef.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                            int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                            if (String.IsNullOrEmpty(serie) || nro == null || nro == 0)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")))
                                                    refe.RazonRef = "Descuentos sobre las facturas del mes";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                {
                                                    refe.TpoDocRef = CFEType.Item111;
                                                }
                                                else if (tipo == 101)
                                                {
                                                    refe.TpoDocRef = CFEType.Item101;
                                                }
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTableDocRef.MoveNext();
                                        }
                                    }

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }*/

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Remito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlRemitosExportacion(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            //eFact factura = new eFact();

                            CFEDefTypeERem factura = new CFEDefTypeERem();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";
                                idDoc.TipoCFE = IdDoc_RemTipoCFE.Item124; //IdDoc_FactTipoCFE.item;

                                /*String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item124; //IdDoc_FactTipoCFE.item;*/

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;
                                String rucDocumento = "";
                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182"))
                                    tipoCliente = "S"; // Proveedor

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                            receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        else
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        receptor.CodPaisRecep = CodPaisType.UY;
                                        receptor.TipoDocRecep = DocType.Item2;

                                        try
                                        {
                                            rucDocumento = oRSMyTable2.Fields.Item("AddID").Value; // Aca se guarda el RUC del documento
                                            bool rucExtranjero = true;

                                            if (String.IsNullOrEmpty(rucDocumento))
                                            {
                                                rucExtranjero = false;
                                                rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");
                                            }

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando Receptor Remito Exp 0", ex.ToString()); // Guarda log del Proceso
                                        }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (!receptor.CodPaisRecep.Equals("UY") && (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY")))
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando Receptor Remito Exp", e.ToString()); // Guarda log del Proceso
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[oRSMyTable3.RecordCount];

                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Rem item = new Item_Rem();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }

                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);
                                        item.PrecioUnitarioSpecified = true;

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.IndFact = Item_RemIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                            item.IndFactSpecified = true;
                                        }

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo                                       

                                        detalle[cont] = item;
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                //Totales totales = new Totales();
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();

                                totales.CantLinDet = oRSMyTable3.RecordCount.ToString();
                                //decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense
                                else if (moneda.Equals("BRL"))
                                    totales.TpoMoneda = TipMonType.BRL; //Reales Brasilero

                                totales.TpoMonedaFieldSpecified = true;
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                // NUEVO FORMATO DGI
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                totales.MntTotal = totales.MntPagar;
                                totales.MntExpoyAsim = totales.MntTotal;
                                totales.MntExpoyAsimSpecified = true;
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Remito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlRemitosSalidaMercaderia(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                decimal cantPiezas = 0;
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            //eFact factura = new eFact();

                            CFEDefTypeERem factura = new CFEDefTypeERem();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeERemEncabezado encabezado = new CFEDefTypeERemEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Rem idDoc = new IdDoc_Rem();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "CFEDefTypeERem";

                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                    idDoc.TipoCFE = IdDoc_RemTipoCFE.Item181; //IdDoc_FactTipoCFE.item;

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando CfeDefTypeERem Remito", ex.ToString()); // Guarda log del Proceso
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Rem receptor = new Receptor_Rem();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String rucDocumento = "";

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                string tipoCliente = "C";
                                if (pFormFactura.ToString().Equals("182"))
                                    tipoCliente = "S"; // Proveedor

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoCliente.ToString());
                                if (oRSMyTable2 != null)
                                {
                                    if (oRSMyTable2.RecordCount != 0)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            receptor.LugarDestEnt = "";

                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, tipoCliente);
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            try
                                            {
                                                rucDocumento = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }
                                    else
                                    {
                                        // Por defecto carga un valor vacío, para que aparezca el tag en el XML
                                        receptor.DirRecep = "";
                                        receptor.CiudadRecep = "";
                                    }
                                }

                                if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) && !String.IsNullOrEmpty(receptor.PaisRecep))
                                {
                                    if (!receptor.CodPaisRecep.Equals("UY") && (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY")))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;

                                    receptor.Item = rucDocumento;
                                    receptor.TipoDocRecepSpecified = true;
                                    receptor.CodPaisRecepSpecified = true;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "ERROR Cargando Receptor Remito Exp", e.ToString()); // Guarda log del Proceso
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                Item_Rem[] detalle = new Item_Rem[oRSMyTable3.RecordCount];

                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        Item_Rem item = new Item_Rem();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        { }

                                        if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = (decimal)cotizacion;

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                //item.IndFact = Item_RemIndFact.Item2; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                //item.IndFact = Item_RemIndFact.Item3; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item1; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                //item.IndFact = Item_RemIndFact.Item4; //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            }
                                        }

                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            //item.IndFact = Item_RemIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion //ASPL - 2019.09.02, DGI no corresponde enviar indicador.
                                            item.IndFactSpecified = false;
                                        }

                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        item.MontoItem = Math.Round(item.MontoItem, 2); // Redondeo

                                        detalle[cont] = item;
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            { }

                            // Totales
                            try
                            {
                                //Totales totales = new Totales();
                                CFEDefTypeERemEncabezadoTotales totales = new CFEDefTypeERemEncabezadoTotales();
                                totales.TpoMonedaFieldSpecified = false;
                                totales.TpoCambioSpecified = false;
                                totales.MntExpoyAsimSpecified = false;
                                totales.CantLinDet = oRSMyTable3.RecordCount.ToString();
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:        " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones:   " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 

                            if (pFormFactura.Equals("940")) // Si es una Transferencia de Stock
                            {
                                sicfeAdenda += "Almacén Orígen:  " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("Filler").Value) + ".\r\n"; // Almacén Orígen
                                sicfeAdenda += "Almacén Destino: " + obtenerNombreAlmacen(oRSMyTable.Fields.Item("ToWhsCode").Value) + ".\r\n"; // Almacén Destino 
                            }

                            if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeERem));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Remito", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        //public String GenerarXmlResguardos(String pFormFactura)
        //{
        //    XmlDocument xml = new XmlDocument();
        //    String result = "";
        //    try
        //    {
        //        SAPbobsCOM.Recordset oRSMyTable = null;
        //        oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
        //        SAPbobsCOM.Recordset oRSMyTable3 = null;
        //        oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
        //        double descuentoCliente = 0;
        //        double recargoCliente = 0;
        //        string tipoClienteProveedor = "";
        //        sicfeAdenda = "";

        //        if (oRSMyTable != null)
        //        {
        //            while (!oRSMyTable.EoF)
        //            {
        //                try
        //                {
        //                    //eFact factura = new eFact();

        //                    CFEDefTypeEResg factura = new CFEDefTypeEResg();

        //                    try
        //                    {
        //                        int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
        //                        codigoDocEntry = docEntry.ToString();

        //                        int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
        //                        getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal
        //                    }
        //                    catch (Exception ex)
        //                    { }

        //                    // CAE
        //                    CAEDataType cae = new CAEDataType();
        //                    cae.CAE_ID = "";
        //                    cae.DNro = "";
        //                    //cae.FecVenc = new DateTime();
        //                    cae.FecVenc = DateTime.Now;
        //                    cae.HNro = "";

        //                    factura.CAEData = cae;

        //                    //Encabezado
        //                    CFEDefTypeEResgEncabezado encabezado = new CFEDefTypeEResgEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

        //                    // IdDoc
        //                    try
        //                    {
        //                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                        IdDoc_Resg idDoc = new IdDoc_Resg();//   IdDoc_Fact idDoc = new IdDoc_Fact();

        //                        idDoc.Nro = "";
        //                        idDoc.Serie = "";

        //                        // Si es documento Manual le manda Serie y Numero
        //                        if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
        //                        {
        //                            try
        //                            {
        //                                idDoc.Nro = codigoFactura.ToString();
        //                                idDoc.Serie = "A";
        //                                //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
        //                                //idDoc.Serie = serieDoc.ToString();
        //                            }
        //                            catch (Exception ex)
        //                            { }
        //                        }

        //                        ////String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
        //                        ////NroDocumento = doc;
        //                        ////if (String.IsNullOrEmpty(doc))
        //                        ////{
        //                        ////    idDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182; //IdDoc_FactTipoCFE.item;
        //                        ////    tipo = "CFEDefTypeERem";
        //                        ////}

        //                        idDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182; //IdDoc_FactTipoCFE.item;
        //                        tipo = "CFEDefTypeEResg"; // CFEDefTypeEResgEncabezado

        //                        idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

        //                        encabezado.IdDoc = idDoc;
        //                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                    }
        //                    catch (Exception ex)
        //                    { }

        //                    //Emisor
        //                    try
        //                    {
        //                        Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
        //                        encabezado.Emisor = emisor;
        //                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                    }
        //                    catch (Exception ex)
        //                    { }

        //                    //Receptor
        //                    try
        //                    {
        //                        Receptor_Resg receptor = new Receptor_Resg();  //Receptor_Fact receptor = new Receptor_Fact();
        //                        receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
        //                        ////////receptor.CompraID = codigoFactura;
        //                        String codCliente = oRSMyTable.Fields.Item("CardCode").Value;
        //                        if (descEmpresa.ToString().Equals("PURAT"))
        //                            codCliente = codCliente.ToString().Replace("?", "");

        //                        tipoClienteProveedor = oRSMyTable.Fields.Item("DocType").Value;

        //                        SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoClienteProveedor);
        //                        if (oRSMyTable2 != null)
        //                        {
        //                            while (!oRSMyTable2.EoF)
        //                            {
        //                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                                string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
        //                                string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

        //                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")) // Si NO es Bosch
        //                                {
        //                                    if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
        //                                        if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
        //                                        {
        //                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
        //                                            if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
        //                                                nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
        //                                            receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
        //                                        }
        //                                }

        //                                receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
        //                                if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
        //                                    receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
        //                                else
        //                                    receptor.CP = "0";

        //                                receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

        //                                receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
        //                                receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
        //                                receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value);
        //                                receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
        //                                //////receptor.LugarDestEnt = "";
        //                                receptor.DocRecep = oRSMyTable2.Fields.Item("LicTradNum").Value;
        //                                descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
        //                                recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
        //                                receptor.CodPaisRecep = CodPaisType.UY;
        //                                receptor.TipoDocRecep = DocType.Item2;

        //                                if (!String.IsNullOrEmpty(receptor.DocRecep))
        //                                {
        //                                    receptor.CodPaisRecep = CodPaisType.UY;

        //                                    if (receptor.DocRecep.Length == 12)
        //                                        receptor.TipoDocRecep = DocType.Item2;
        //                                    else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
        //                                        receptor.TipoDocRecep = DocType.Item3;
        //                                    else
        //                                        receptor.TipoDocRecep = DocType.Item4;
        //                                }
        //                                else
        //                                {
        //                                    receptor.TipoDocRecep = DocType.Item3;
        //                                    receptor.CodPaisRecep = CodPaisType.UY;
        //                                    receptor.DocRecep = "11111111";
        //                                }

        //                                try
        //                                {
        //                                    // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
        //                                    String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
        //                                    rucDocumento = rucDocumento.ToString().Replace(".", "");
        //                                    rucDocumento = rucDocumento.ToString().Replace("-", "");
        //                                    if (rucDocumento.ToString().Length == 12) // Tiene RUC
        //                                        receptor.TipoDocRecep = DocType.Item2;
        //                                    else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
        //                                        receptor.TipoDocRecep = DocType.Item3;
        //                                    else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
        //                                    {
        //                                        receptor.TipoDocRecep = DocType.Item2;
        //                                        rucDocumento = "0" + rucDocumento;
        //                                    }
        //                                    else
        //                                        receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros


        //                                    receptor.DocRecep = rucDocumento.ToString();

        //                                    if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
        //                                    {
        //                                        receptor.TipoDocRecep = DocType.Item4;
        //                                        receptor.DocRecep = "99";
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                { }

        //                                oRSMyTable2.MoveNext();
        //                            }
        //                        }
        //                        if (receptor.TipoDocRecep == DocType.Item4)
        //                        {
        //                            esDocUruguayo = false; // Indico que el documento no es Uruguayo
        //                            if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
        //                                receptor.CodPaisRecep = CodPaisType.AR;
        //                            else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
        //                                receptor.CodPaisRecep = CodPaisType.BR;
        //                            else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
        //                                receptor.CodPaisRecep = CodPaisType.CL;
        //                        }
        //                        else
        //                            esDocUruguayo = true; // Indico que el documento es Uruguayo

        //                        encabezado.Receptor = receptor;
        //                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                    }
        //                    catch (Exception e)
        //                    {
        //                        if (guardaLog == true)
        //                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR guardado cliente al XML", e.Message.ToString());
        //                    }

        //                    //Detalle
        //                    String moneda = "";
        //                    double cotizacion = 0;
        //                    try
        //                    {
        //                        try
        //                        {
        //                            /*monedaStrSimbolo = ObtenerMonedaLocal(); // Obtengo la moneda Local
        //                            if (monedaStrSimbolo.ToString().Equals("$") || monedaStrSimbolo.ToString().Equals("UYU"))
        //                            {
        //                                monedaStrISO = "UYU"; monedaStrSimbolo = "$";
        //                            }
        //                            else if (monedaStrSimbolo.ToString().Equals("U$S") || monedaStrSimbolo.ToString().Equals("USD"))
        //                            {
        //                                monedaStrISO = "USD"; monedaStrSimbolo = "U$S";
        //                            }
        //                            else if (monedaStrSimbolo.ToString().Equals("CLP") || monedaStrSimbolo.ToString().Equals("CLP"))
        //                            {
        //                                monedaStrISO = "CLP"; monedaStrSimbolo = "CLP";
        //                            }*/

        //                        }
        //                        catch (Exception ex)
        //                        {
        //                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR AL QUERER VERIFICAR MONEDA LOCAL", ex.Message.ToString());
        //                        }

        //                        moneda = oRSMyTable.Fields.Item("DocCurr").Value;
        //                        cotizacion = oRSMyTable.Fields.Item("DocRate").Value;

        //                    }
        //                    catch (Exception e)
        //                    { }

        //                    Totales_Resg totales = new Totales_Resg();
        //                    Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[1];
        //                    RetPerc_Resg[] arrayItemRetPer = new RetPerc_Resg[1];

        //                    try
        //                    {
        //                        if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
        //                        {
        //                            Item_Resg[] detalle = new Item_Resg[oRSMyTable3.RecordCount];

        //                            int cont = 0;
        //                            if (oRSMyTable3 != null)
        //                            {
        //                                ////decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
        //                                decimal descuent = 0;
        //                                {
        //                                    String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
        //                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                                    Item_Resg item = new Item_Resg();
        //                                    ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
        //                                    ////nro++;
        //                                    int nro = cont + 1;
        //                                    item.NroLinDet = nro.ToString();
        //                                    item.IndFact = Item_ResgIndFact.Item9;

        //                                    ////decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
        //                                    decimal precio = 0;

        //                                    try
        //                                    {
        //                                        // Obtengo la moneda y el tipo de cambio del artículo.
        //                                        ////monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
        //                                        monedaArticulo = moneda;
        //                                        //tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
        //                                        tipoCambioArticulo = 1;
        //                                    }
        //                                    catch (Exception ex)
        //                                    { }

        //                                    ////decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
        //                                    ////decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
        //                                    ////decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
        //                                    ////decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
        //                                    ////decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
        //                                    ////decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

        //                                    decimal precioUni = 0; // Precio sin Descuento
        //                                    decimal precioUniConDesc = 0; // Precio con Descuento
        //                                    decimal montoDescUni = 0; // Calculo el Monto de Descuento
        //                                    decimal porcDescUni = 0; // Porcentaje del Descuento
        //                                    decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("SumApplied").Value; // Monto del Item
        //                                    decimal montoImpuestos = 0; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

        //                                    if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
        //                                    {
        //                                        if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
        //                                            tipoCambioArticulo = (decimal)cotizacion;

        //                                        if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
        //                                        {
        //                                            precioUni = precioUni * tipoCambioArticulo;
        //                                            montoDescUni = montoDescUni * tipoCambioArticulo;
        //                                        }
        //                                        else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
        //                                        {
        //                                            precioUni = precioUni / tipoCambioArticulo;
        //                                            montoDescUni = montoDescUni / tipoCambioArticulo;
        //                                        }
        //                                    }

        //                                    decimal montoCalculado = precioUni - montoDescUni;
        //                                    montoCalculado = decimal.Round(montoCalculado, 2);

        //                                    ////if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
        //                                    ////    montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("AppliedFC").Value; // Monto del Item
        //                                    ////else
        //                                    ////    montoCalculado = montoTotalLinea;
        //                                    if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
        //                                        montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("AppliedFC").Value; // Monto del Item
        //                                    else
        //                                        montoCalculado = montoTotalLinea;

        //                                    /*if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
        //                                        if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
        //                                            montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

        //                                    //Calculos Totales
        //                                    ////String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
        //                                    ////decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA7
        //                                    //////String imp = "IVA_EXE"; // Obtengo el codigo del impuesto, osea el codigo del IVA
        //                                    //////decimal iva = 0; // Obtengo el porcentaje de IVA
        //                                    //////if (cotizacion == 0)
        //                                    //////{
        //                                    //////    if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
        //                                    //////    {
        //                                    //////        TotalItemsGravadosIVAMinimo += precio ;
        //                                    //////        TotalIVAMinimo += ((((precio * iva) / 100)) );
        //                                    //////        ivaMinimo = iva;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item2;
        //                                    //////    }
        //                                    //////    else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
        //                                    //////    {
        //                                    //////        TotalItemsGravadosIVABasico += precio;
        //                                    //////        TotalIVABasico += ((((precio * iva) / 100)));
        //                                    //////        ivaBasico = iva;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item3;
        //                                    //////    }
        //                                    //////    else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
        //                                    //////    {
        //                                    //////        TotalItemsNoGravados += precio ;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item1;
        //                                    //////    }
        //                                    //////    else
        //                                    //////    {
        //                                    //////        TotalItemsGravadosIVAOtra += precio;
        //                                    //////        TotalIVAOtra += ((precio * iva) / 100) ;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item4;
        //                                    //////    }
        //                                    //////}
        //                                    //////else
        //                                    //////{
        //                                    //////    //decimal pre = precio / (decimal)cotizacion;
        //                                    //////    decimal pre = precioUniConDesc; // El precio unitario ya viene con el valor que va montoDescuentoLinea
        //                                    //////    if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
        //                                    //////    {
        //                                    //////        TotalItemsGravadosIVAMinimo += pre ;
        //                                    //////        TotalIVAMinimo += ((pre * iva) / 100);
        //                                    //////        ivaMinimo = iva;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item2;
        //                                    //////    }
        //                                    //////    else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
        //                                    //////    {
        //                                    //////        TotalItemsGravadosIVABasico += pre ;
        //                                    //////        TotalIVABasico += ((pre * iva) / 100) ;
        //                                    //////        ivaBasico = iva;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item3;
        //                                    //////    }
        //                                    //////    else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
        //                                    //////    {
        //                                    //////        TotalItemsNoGravados += pre;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item1;
        //                                    //////    }
        //                                    //////    else
        //                                    //////    {
        //                                    //////        TotalItemsGravadosIVAOtra += pre ;
        //                                    //////        TotalIVAOtra += ((pre * iva) / 100) ;
        //                                    //////        item.IndFact = Item_ResgIndFact.Item4;
        //                                    //////    }
        //                                    //////}

        //                                    try
        //                                    {
        //                                        Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
        //                                        //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
        //                                        totRetPerUnidad.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
        //                                        totRetPerUnidad.ValRetPerc = montoTotalLinea;
        //                                        arrayRetPer[cont] = totRetPerUnidad;

        //                                        RetPerc_Resg itemRetPer = new RetPerc_Resg();
        //                                        decimal tasaResguardo = (decimal)oRSMyTable3.Fields.Item("U_TASA_RESG").Value;
        //                                        itemRetPer.CodRet = totRetPerUnidad.CodRet;
        //                                        itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
        //                                        if (tasaResguardo > 0)
        //                                        {
        //                                            itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
        //                                            itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
        //                                        }
        //                                        itemRetPer.Tasa = tasaResguardo;
        //                                        itemRetPer.TasaSpecified = true;
        //                                        itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
        //                                        arrayItemRetPer[cont] = itemRetPer;
        //                                        //item.RetencPercep[0] = itemRetPer;
        //                                        item.RetencPercep = new RetPerc_Resg[oRSMyTable3.RecordCount];
        //                                        item.RetencPercep[0] = arrayItemRetPer[cont];
        //                                    }
        //                                    catch (Exception ex)
        //                                    {
        //                                        if (guardaLog == true)
        //                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
        //                                    }

        //                                    detalle[cont] = item;
        //                                    cont++;
        //                                    oRSMyTable3.MoveNext();
        //                                }
        //                            }
        //                            factura.Detalle = detalle;
        //                        }
        //                        else
        //                        {
        //                            // Entonces no tiene items
        //                            Item_Resg[] detalle = new Item_Resg[1];

        //                            int cont = 0;

        //                            String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
        //                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                            Item_Resg item = new Item_Resg();
        //                            int nro = 1;
        //                            item.NroLinDet = nro.ToString();
        //                            item.IndFact = Item_ResgIndFact.Item9;

        //                            try
        //                            {
        //                                // Obtengo la moneda y el tipo de cambio del artículo.
        //                                monedaArticulo = moneda;
        //                                tipoCambioArticulo = 0;
        //                            }
        //                            catch (Exception ex)
        //                            { }

        //                            decimal precioUni = 0; // Precio sin Descuento
        //                            decimal montoDescUni = 0; // Calculo el Monto de Descuento
        //                            decimal montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotal").Value; // Monto del Item

        //                            /*if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
        //                            {
        //                                if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
        //                                    tipoCambioArticulo = (decimal)cotizacion;

        //                                if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
        //                                {
        //                                    precioUni = precioUni * tipoCambioArticulo;
        //                                    montoDescUni = montoDescUni * tipoCambioArticulo;
        //                                }
        //                                else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
        //                                {
        //                                    precioUni = precioUni / tipoCambioArticulo;
        //                                    montoDescUni = montoDescUni / tipoCambioArticulo;
        //                                }
        //                            }*/

        //                            if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
        //                            {
        //                                if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
        //                                    tipoCambioArticulo = getDecimal(cotizacion.ToString());

        //                                if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
        //                                {
        //                                    precioUni = precioUni * tipoCambioArticulo;
        //                                    montoDescUni = montoDescUni * tipoCambioArticulo;

        //                                    // Nuevas Lineas de Codigo 
        //                                    if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
        //                                        precioUni = montoTotalLinea;
        //                                    else
        //                                    {
        //                                        if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
        //                                        {
        //                                            decimal montoLineTotal = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
        //                                            precioUni = montoLineTotal;
        //                                        }

        //                                    }
        //                                }
        //                                else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
        //                                {
        //                                    precioUni = precioUni / tipoCambioArticulo;
        //                                    montoDescUni = montoDescUni / tipoCambioArticulo;
        //                                }
        //                                else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
        //                                {
        //                                    decimal montoLineaMonedaExtranjera = 0;
        //                                    //if (moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) // Si el documento es en Pesos
        //                                    if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
        //                                        montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value;
        //                                    else
        //                                        montoLineaMonedaExtranjera = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

        //                                    if (montoLineaMonedaExtranjera != 0)
        //                                    {
        //                                        precioUni = montoLineaMonedaExtranjera;
        //                                        precioUni = Math.Round(precioUni, 3);
        //                                    }
        //                                }
        //                            }

        //                            decimal montoCalculado = (precioUni * 1) - (montoDescUni * 1);
        //                            montoCalculado = decimal.Round(montoCalculado, 2);

        //                            //if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
        //                            //    montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value; // Monto del Item
        //                            //else
        //                            //    montoCalculado = montoTotalLinea;
        //                            if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
        //                                montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value; // Monto del Item
        //                            else
        //                                montoCalculado = montoTotalLinea;

        //                            try
        //                            {
        //                                //////Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
        //                                ////////totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
        //                                //////totRetPerUnidad.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
        //                                //////totRetPerUnidad.ValRetPerc = montoTotalLinea;
        //                                //////arrayRetPer[cont] = totRetPerUnidad;

        //                                //////RetPerc_Resg itemRetPer = new RetPerc_Resg();
        //                                //////itemRetPer.CodRet = totRetPerUnidad.CodRet;
        //                                //////itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
        //                                //////itemRetPer.Tasa = 10;
        //                                //////itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
        //                                //////arrayItemRetPer[cont] = itemRetPer;
        //                                ////////item.RetencPercep[0] = itemRetPer;
        //                                //////item.RetencPercep = new RetPerc_Resg[1];
        //                                //////item.RetencPercep[0] = arrayItemRetPer[cont];

        //                                Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
        //                                //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
        //                                totRetPerUnidad.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
        //                                totRetPerUnidad.ValRetPerc = montoTotalLinea;
        //                                arrayRetPer[cont] = totRetPerUnidad;

        //                                RetPerc_Resg itemRetPer = new RetPerc_Resg();
        //                                decimal tasaResguardo = (decimal)oRSMyTable3.Fields.Item("U_TASA_RESG").Value;
        //                                itemRetPer.CodRet = totRetPerUnidad.CodRet;
        //                                itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
        //                                if (tasaResguardo > 0)
        //                                {
        //                                    itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
        //                                    itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
        //                                }
        //                                itemRetPer.Tasa = tasaResguardo;
        //                                itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
        //                                arrayItemRetPer[cont] = itemRetPer;
        //                                //item.RetencPercep[0] = itemRetPer;
        //                                item.RetencPercep = new RetPerc_Resg[1];
        //                                item.RetencPercep[0] = arrayItemRetPer[cont];
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                if (guardaLog == true)
        //                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
        //                            }

        //                            detalle[cont] = item;

        //                            factura.Detalle = detalle;
        //                        }

        //                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                    }
        //                    catch (Exception e)
        //                    {
        //                        if (guardaLog == true)
        //                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR agregando items al XML", e.Message.ToString()); // Guarda log del Proceso
        //                    }

        //                    // Totales
        //                    try
        //                    {
        //                        //decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
        //                        if (moneda.Equals("USD") || moneda.Equals("U$S"))
        //                            totales.TpoMoneda = TipMonType.USD; // Dolares
        //                        else if (moneda.Equals("EUR"))
        //                            totales.TpoMoneda = TipMonType.EUR; // Euros
        //                        else if (moneda.Equals("CLP"))
        //                            totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
        //                        else
        //                            totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

        //                        //totales.RetencPercep = Totales_ResgRetencPercep.Equals("9999001"); // Codigo de Retención

        //                        if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
        //                        {
        //                            totales.MntTotRetenido = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
        //                            totales.MntTotRetenido = decimal.Round(totales.MntTotRetenido, 2);
        //                        }
        //                        else
        //                        {
        //                            totales.MntTotRetenido = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
        //                            totales.MntTotRetenido = decimal.Round(totales.MntTotRetenido, 2);
        //                        }

        //                        totales.CantLinDet = "1";

        //                        /*if (descEmpresa.ToString().Equals("MEDIT") && monedaStrISO.ToString().Equals("USD")) // Si es Meditian y el documento es en Dolares
        //                        {
        //                            cotizacion = 1;
        //                            totales.MntTotCredFisc = 0;
        //                        }*/

        //                        totales.TpoCambio = getDecimal(cotizacion.ToString());
        //                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
        //                        if (totales.TpoCambio != 0)
        //                        {
        //                            totales.TpoCambioSpecified = true;
        //                        }
        //                        else
        //                        {
        //                            totales.TpoCambioSpecified = false;
        //                        }

        //                        encabezado.Totales = totales;
        //                        encabezado.Totales.RetencPercep = arrayRetPer;

        //                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
        //                    }

        //                    //Referencias
        //                    try
        //                    {
        //                        int num = 1;

        //                        SAPbobsCOM.Recordset oRSMyTableDocRef = null;
        //                        oRSMyTableDocRef = obtenerDocumentoReferenciaResguardo(codigoDocEntry, tipoClienteProveedor); // Le paso el DocEntry

        //                        if (oRSMyTableDocRef.RecordCount == 0)
        //                        {
        //                            ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
        //                            ReferenciaReferencia refe = new ReferenciaReferencia();
        //                            refe.NroLinRef = "1";
        //                            refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
        //                            refe.IndGlobalSpecified = true;
        //                            refe.TpoDocRefSpecified = false;
        //                            refe.RazonRef = "Referencia a documento no codificado";
        //                            refe.FechaCFErefSpecified = false;
        //                            referencia[0] = refe;
        //                            factura.Referencia = referencia;
        //                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                        }
        //                        else if (oRSMyTableDocRef.RecordCount > 40)
        //                        {
        //                            ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
        //                            ReferenciaReferencia refe = new ReferenciaReferencia();
        //                            refe.NroLinRef = "1";
        //                            refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
        //                            refe.IndGlobalSpecified = true;
        //                            refe.TpoDocRefSpecified = false;
        //                            refe.RazonRef = "Afecta a mas de 40 CFE";
        //                            refe.FechaCFErefSpecified = false;
        //                            referencia[0] = refe;
        //                            factura.Referencia = referencia;
        //                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
        //                        }
        //                        else
        //                        {
        //                            ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];
        //                            if (oRSMyTableDocRef != null)
        //                            {
        //                                while (!oRSMyTableDocRef.EoF)
        //                                {
        //                                    //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
        //                                    ReferenciaReferencia refe = new ReferenciaReferencia();
        //                                    refe.NroLinRef = num.ToString();
        //                                    String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
        //                                    int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
        //                                    int tipo = 0;
        //                                    try
        //                                    {
        //                                        tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
        //                                    }
        //                                    catch (Exception ex)
        //                                    { }

        //                                    if (tipo == 0)
        //                                    {
        //                                        string tipoCfe = oRSMyTable.Fields.Item("U_TIPOCFE_REFERENCIA").Value; // Obtengo el campo Tipo del documento de Referencia.

        //                                        if (String.IsNullOrEmpty(tipoCfe) || tipoCfe.ToString().Equals("XXX"))
        //                                            tipoCfe = "0"; // Si no es un documento electrónico, le pone el tipo en 0

        //                                        tipo = Convert.ToInt32(tipoCfe.ToString());
        //                                    }

        //                                    if (tipo == 0 || String.IsNullOrEmpty(serie) || nro == 0)
        //                                    {
        //                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
        //                                        refe.IndGlobalSpecified = true;
        //                                        refe.TpoDocRefSpecified = false;
        //                                        refe.RazonRef = "Referencia a documento no electrónico " + serie.ToString() + " " + nro.ToString();
        //                                        refe.FechaCFErefSpecified = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        refe.IndGlobalSpecified = false;
        //                                        refe.TpoDocRefSpecified = true;
        //                                        if (tipo == 111)
        //                                            refe.TpoDocRef = CFEType.Item111;
        //                                        else if (tipo == 101)
        //                                            refe.TpoDocRef = CFEType.Item101;
        //                                        else if (tipo == 102)
        //                                            refe.TpoDocRef = CFEType.Item102;
        //                                        else if (tipo == 103)
        //                                            refe.TpoDocRef = CFEType.Item103;
        //                                        else if (tipo == 112)
        //                                            refe.TpoDocRef = CFEType.Item112;
        //                                        else if (tipo == 113)
        //                                            refe.TpoDocRef = CFEType.Item113;

        //                                        refe.Serie = serie;
        //                                        refe.NroCFERef = nro.ToString();
        //                                        refe.FechaCFErefSpecified = false;
        //                                    }

        //                                    referencia[num - 1] = refe;
        //                                    num++;
        //                                    oRSMyTableDocRef.MoveNext();
        //                                }
        //                            }

        //                            factura.Referencia = referencia;
        //                        }
        //                    }
        //                    catch (Exception ex)
        //                    { }

        //                    factura.Encabezado = encabezado;

        //                    // Armo el adenda
        //                    //sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
        //                    if (!descEmpresa.ToString().Equals("DREG"))
        //                        sicfeAdenda += "Observaciones:    " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
        //                    //sicfeAdenda += "Cond.de pago: " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ".\r\n"; // Forma de Pago 
        //                    sicfeAdenda += "Número Resguardo: " + codigoFactura.ToString() + "\r\n";

        //                    XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeEResg));
        //                    using (var stream = new MemoryStream())
        //                    {
        //                        ser.Serialize(stream, factura);
        //                        stream.Flush();
        //                        stream.Seek(0, SeekOrigin.Begin);
        //                        xml.Load(stream);
        //                        result = xml.InnerXml;
        //                    }

        //                    //if (guardaLog == true)
        //                    //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado Remito", result.ToString()); // Guarda log del Proceso

        //                    oRSMyTable.MoveNext();
        //                }
        //                catch (Exception e)
        //                { }
        //            }
        //        }
        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;
        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
        //        oRSMyTable3 = null;
        //    }
        //    catch (Exception e)
        //    {
        //        if (guardaLog == true)
        //            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
        //    }
        //    return result;
        //}

        public String GenerarXmlResguardos(String pFormFactura, bool pEsCancelacion)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                bool tieneNcReferenciadas = resguardoTieneNcReferencia(codigoFactura);

                double descuentoCliente = 0;
                double recargoCliente = 0;
                string tipoClienteProveedor = "";
                sicfeAdenda = "";

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            CFEDefTypeEResg factura = new CFEDefTypeEResg();

                            try
                            {
                                int docEntry = oRSMyTable.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEResgEncabezado encabezado = new CFEDefTypeEResgEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Resg idDoc = new IdDoc_Resg();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                idDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182; //IdDoc_FactTipoCFE.item;
                                tipo = "CFEDefTypeEResg"; // CFEDefTypeEResgEncabezado

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Resg receptor = new Receptor_Resg();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;
                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                tipoClienteProveedor = oRSMyTable.Fields.Item("DocType").Value;

                                SAPbobsCOM.Recordset oRSMyTable2;
                                if (!tipoClienteProveedor.Equals("A")) // A = Cuenta. 
                                    oRSMyTable2 = ObtenerCliente(codCliente, tipoClienteProveedor);
                                else
                                {
                                    tipoClienteProveedor = "S"; // Proveedor
                                    if (descEmpresa.Equals("MILDA") || descEmpresa.Equals("DEIMI"))
                                        codCliente = oRSMyTable.Fields.Item("U_CARDCODE").Value;
                                    oRSMyTable2 = ObtenerCliente(codCliente, tipoClienteProveedor);
                                }

                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        try
                                        {
                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("TRIGE")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else
                                                receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                            receptor.DocRecep = oRSMyTable2.Fields.Item("LicTradNum").Value;

                                            try
                                            {
                                                if (descEmpresa.Equals("TRIGE"))
                                                    receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value + ";" + codCliente; // ASPL. 2021-04-22, Código de cliente (Ej.: C004) - en el campo "InfoAdicional" concatenerlo al correo ya existente.
                                                else
                                                    receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                                descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                                recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            }
                                            catch (Exception ex)
                                            { { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR recorriendo Cliente log 1", ex.Message.ToString()); } }

                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.TipoDocRecep = DocType.Item2;

                                            if (!String.IsNullOrEmpty(receptor.DocRecep))
                                            {
                                                receptor.CodPaisRecep = CodPaisType.UY;

                                                if (receptor.DocRecep.Length == 12)
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 9)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4;
                                            }
                                            else
                                            {
                                                receptor.TipoDocRecep = DocType.Item3;
                                                receptor.CodPaisRecep = CodPaisType.UY;
                                                receptor.DocRecep = "11111111";
                                            }

                                            try
                                            {
                                                // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                                //String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                                String rucDocumento = receptor.DocRecep;
                                                rucDocumento = rucDocumento.ToString().Replace(".", "");
                                                rucDocumento = rucDocumento.ToString().Replace("-", "");
                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 9)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros


                                                receptor.DocRecep = rucDocumento.ToString();

                                                try
                                                {
                                                    if (!String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                                        if (!receptor.PaisRecep.ToString().Equals("UY"))
                                                            receptor.TipoDocRecep = DocType.Item4;
                                                }
                                                catch (Exception ex)
                                                { { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR recorriendo Cliente log 2", ex.Message.ToString()); } }

                                                receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                                {
                                                    if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                    {
                                                        receptor.TipoDocRecep = DocType.Item4;
                                                        receptor.DocRecep = "99";
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR recorriendo Cliente log 3", ex.Message.ToString()); }

                                            oRSMyTable2.MoveNext();
                                        }
                                        catch (Exception exxx)
                                        { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR recorriendo Cliente armado de XML", exxx.Message.ToString()); }
                                    }
                                }

                                try
                                {
                                    if (String.IsNullOrEmpty(receptor.PaisRecep))
                                        receptor.PaisRecep = "Uruguay";

                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4
                                }
                                catch (Exception ex)
                                { receptor.PaisRecep = "Uruguay"; guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando PaisRecep", ex.Message.ToString()); }

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                    else
                                        receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR guardado cliente al XML", e.Message.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0; decimal montoSumadoItems = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCurr").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            int cantidadItems = oRSMyTable3.RecordCount;
                            if (cantidadItems == 0)
                                cantidadItems = 1;

                            Totales_Resg totales = new Totales_Resg();
                            Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[cantidadItems];
                            RetPerc_Resg[] arrayItemRetPer = new RetPerc_Resg[cantidadItems];

                            try
                            {
                                int cont = 0;

                                Item_Resg[] detalle = new Item_Resg[cantidadItems];

                                if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                {
                                    if (tieneNcReferenciadas == false) // Si no tiene Nc Referenciadas
                                    {
                                        while (!oRSMyTable3.EoF) //if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                        {
                                            if (oRSMyTable3 != null)
                                            {
                                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                                Item_Resg item = new Item_Resg();

                                                int nro = cont + 1;
                                                item.NroLinDet = nro.ToString();

                                                if (pEsCancelacion == true)
                                                {
                                                    item.IndFact = Item_ResgIndFact.Item9;
                                                    item.IndFactSpecified = true;
                                                }

                                                decimal montoTotalLinea = 0;
                                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                                    montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("AppliedFC").Value; // Monto del Item
                                                else
                                                    montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("SumApplied").Value; // Monto del Item

                                                try
                                                {
                                                    RetPerc_Resg itemRetPer = new RetPerc_Resg();

                                                    itemRetPer.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                                    decimal tasaResguardo = obtenerTasa(itemRetPer.CodRet);
                                                    itemRetPer.MntSujetoaRet = montoTotalLinea;
                                                    itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2); // Redondeos
                                                    if (tasaResguardo > 0)
                                                    {
                                                        itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
                                                        itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
                                                    }

                                                    if (descEmpresa.Equals("MILDA") || descEmpresa.Equals("DEIMI")) // Si tiene algo digitado en el campo entonces usa lo que hay allí.
                                                    {
                                                        decimal montoSujetoDigitado = (decimal)oRSMyTable3.Fields.Item("U_MONTO_IMPONIBLE").Value;
                                                        if (montoSujetoDigitado != 0)
                                                            itemRetPer.MntSujetoaRet = montoSujetoDigitado;
                                                    }

                                                    itemRetPer.Tasa = tasaResguardo;
                                                    itemRetPer.TasaSpecified = true;
                                                    itemRetPer.ValRetPerc = montoTotalLinea;
                                                    itemRetPer.ValRetPerc = Math.Round(itemRetPer.ValRetPerc, 2); // Redondeos
                                                    arrayItemRetPer[cont] = itemRetPer;
                                                    //item.RetencPercep[0] = itemRetPer;
                                                    item.RetencPercep = new RetPerc_Resg[oRSMyTable3.RecordCount];
                                                    item.RetencPercep[cont] = arrayItemRetPer[cont];

                                                    montoSumadoItems += itemRetPer.ValRetPerc;
                                                }
                                                catch (Exception ex)
                                                {
                                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep 1 agregando items al XML", ex.Message.ToString());
                                                }

                                                detalle[cont] = item;
                                                cont++;
                                                oRSMyTable3.MoveNext();
                                            }
                                        }
                                        factura.Detalle = detalle;
                                    }
                                    else
                                    {
                                        decimal tasaResguardo = 0;
                                        decimal montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotal").Value; // Monto del Item

                                        cantidadItems = 1; // Cambio la cantidad de líneas a 1

                                        if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                            montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value; // Monto del Item

                                        while (!oRSMyTable3.EoF) //if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                        {
                                            if (oRSMyTable3 != null)
                                            {
                                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                                if (tasaResguardo == 0)
                                                    tasaResguardo = (decimal)oRSMyTable3.Fields.Item("U_TASA_RESG").Value;

                                                oRSMyTable3.MoveNext();
                                            }
                                        }

                                        try
                                        {
                                            Item_Resg item = new Item_Resg();
                                            item.NroLinDet = "1";

                                            if (pEsCancelacion == true)
                                            {
                                                item.IndFact = Item_ResgIndFact.Item9;
                                                item.IndFactSpecified = true;
                                            }

                                            RetPerc_Resg itemRetPer = new RetPerc_Resg();

                                            itemRetPer.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                            itemRetPer.MntSujetoaRet = montoTotalLinea;
                                            itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2); // Redondeos
                                            if (tasaResguardo > 0)
                                            {
                                                itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
                                                itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
                                            }

                                            /*if (descEmpresa.Equals("MILDA") || descEmpresa.Equals("DEIMI")) // Si tiene algo digitado en el campo entonces usa lo que hay allí.
                                            {
                                                decimal montoSujetoDigitado = (decimal)oRSMyTable3.Fields.Item("U_MONTO_IMPONIBLE").Value;
                                                if (montoSujetoDigitado != 0)
                                                    itemRetPer.MntSujetoaRet = montoSujetoDigitado;
                                            }*/

                                            itemRetPer.Tasa = tasaResguardo;
                                            itemRetPer.TasaSpecified = true;
                                            itemRetPer.ValRetPerc = montoTotalLinea;
                                            itemRetPer.ValRetPerc = Math.Round(itemRetPer.ValRetPerc, 2); // Redondeos
                                            arrayItemRetPer[0] = itemRetPer;
                                            //item.RetencPercep[0] = itemRetPer;
                                            item.RetencPercep = new RetPerc_Resg[1];
                                            item.RetencPercep[0] = arrayItemRetPer[0];

                                            montoSumadoItems += itemRetPer.ValRetPerc;

                                            detalle[cont] = item;
                                        }
                                        catch (Exception ex)
                                        {
                                            if (guardaLog == true)
                                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep 2 agregando items al XML", ex.Message.ToString());
                                        }

                                        factura.Detalle = detalle;
                                    }
                                }
                                else
                                {
                                    String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    Item_Resg item = new Item_Resg();

                                    int nro = cont + 1;
                                    item.NroLinDet = nro.ToString();

                                    if (pEsCancelacion == true)
                                    {
                                        item.IndFact = Item_ResgIndFact.Item9;
                                        item.IndFactSpecified = true;
                                    }

                                    try
                                    {
                                        // Obtengo la moneda y el tipo de cambio del artículo.
                                        monedaArticulo = moneda;
                                        tipoCambioArticulo = 1;
                                    }
                                    catch (Exception ex)
                                    { }

                                    decimal montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotal").Value; // Monto del Item

                                    if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                        montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value; // Monto del Item

                                    RetPerc_Resg itemRetPer = new RetPerc_Resg();
                                    decimal tasaResguardo = 0;//(decimal)oRSMyTable.Fields.Item("U_TASA").Value;
                                    itemRetPer.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                    itemRetPer.MntSujetoaRet = montoTotalLinea;
                                    itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2); // Redondeos
                                    if (tasaResguardo > 0)
                                    {
                                        itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
                                        itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
                                    }

                                    itemRetPer.Tasa = tasaResguardo;
                                    itemRetPer.TasaSpecified = true;
                                    itemRetPer.ValRetPerc = montoTotalLinea;
                                    itemRetPer.ValRetPerc = Math.Round(itemRetPer.ValRetPerc, 2); // Redondeos
                                    arrayItemRetPer[cont] = itemRetPer;
                                    //item.RetencPercep[0] = itemRetPer;
                                    item.RetencPercep = new RetPerc_Resg[1];
                                    item.RetencPercep[cont] = arrayItemRetPer[cont];

                                    montoSumadoItems += itemRetPer.ValRetPerc;

                                    detalle[cont] = item;

                                    factura.Detalle = detalle;
                                }

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                if (guardaLog == true)
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR agregando items al XML", e.Message.ToString()); // Guarda log del Proceso
                            }

                            // Totales
                            try
                            {
                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense
                                else if (moneda.Equals("BRL") || moneda.Equals("R$"))
                                    totales.TpoMoneda = TipMonType.BRL; //Reales Brasilero

                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntTotRetenido = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntTotRetenido = decimal.Round(totales.MntTotRetenido, 2);
                                }
                                else
                                {
                                    totales.MntTotRetenido = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntTotRetenido = decimal.Round(totales.MntTotRetenido, 2);
                                }

                                Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                totRetPerUnidad.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                totRetPerUnidad.ValRetPerc = montoSumadoItems;

                                // Linea nueva, por error: No cierra la operación Campo-125 = Suma(Campo-128) : Encabezado (Retención - Percepción)
                                totales.MntTotRetenido = montoSumadoItems;
                                if (pEsCancelacion == true) // Se envían los valores en negativo por ser Cancelacion
                                {
                                    totales.MntTotRetenido = totales.MntTotRetenido * -1;
                                    totRetPerUnidad.ValRetPerc = totRetPerUnidad.ValRetPerc * -1;
                                }

                                arrayRetPer[0] = totRetPerUnidad;

                                totales.CantLinDet = cantidadItems.ToString();

                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                    totales.TpoCambioSpecified = true;
                                else
                                    totales.TpoCambioSpecified = false;

                                if (totales.TpoMoneda != TipMonType.UYU)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                encabezado.Totales = totales;
                                encabezado.Totales.RetencPercep = arrayRetPer;

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            //Referencias
                            try
                            {
                                int num = 1;

                                if (pEsCancelacion == false)
                                {

                                    SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                    oRSMyTableDocRef = obtenerDocumentoReferenciaResguardo(codigoFactura, tipoClienteProveedor); // Le paso el DocEntry

                                    if (oRSMyTableDocRef.RecordCount == 0)
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                        ReferenciaReferencia refe = new ReferenciaReferencia();
                                        refe.NroLinRef = "1";
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                        refe.RazonRef = "Referencia a documento no codificado";
                                        refe.FechaCFErefSpecified = false;
                                        referencia[0] = refe;
                                        factura.Referencia = referencia;
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                    else if (oRSMyTableDocRef.RecordCount > 40)
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                        ReferenciaReferencia refe = new ReferenciaReferencia();
                                        refe.NroLinRef = "1";
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                        refe.RazonRef = "Afecta a mas de 40 CFE";
                                        refe.FechaCFErefSpecified = false;
                                        referencia[0] = refe;
                                        factura.Referencia = referencia;
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                    else
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];
                                        if (oRSMyTableDocRef != null)
                                        {
                                            while (!oRSMyTableDocRef.EoF)
                                            {
                                                //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                                ReferenciaReferencia refe = new ReferenciaReferencia();
                                                refe.NroLinRef = num.ToString();
                                                String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                                int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                                int tipo = 0;
                                                try
                                                {
                                                    tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                                }
                                                catch (Exception ex)
                                                { }

                                                string razonReferencia = "Referencia a documento no electrónico ";
                                                if (tipo == 0)
                                                {
                                                    string tipoCfe = oRSMyTable.Fields.Item("U_TIPOCFE_REFERENCIA").Value; // Obtengo el campo Tipo del documento de Referencia.

                                                    if (String.IsNullOrEmpty(tipoCfe) || tipoCfe.ToString().Equals("XXX"))
                                                    {
                                                        tipoCfe = "0"; // Si no es un documento electrónico, le pone el tipo en 0
                                                        if (oRSMyTable.Fields.Item("U_RAZON_REFERENCIA").IsNull() == BoYesNoEnum.tNO)
                                                            if (!String.IsNullOrEmpty(oRSMyTable.Fields.Item("U_RAZON_REFERENCIA").Value))
                                                                razonReferencia = oRSMyTable.Fields.Item("U_RAZON_REFERENCIA").Value;
                                                    }

                                                    tipo = Convert.ToInt32(tipoCfe.ToString());
                                                }

                                                if (String.IsNullOrEmpty(serie) || nro == 0)
                                                {
                                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                    refe.IndGlobalSpecified = true;
                                                    refe.TpoDocRefSpecified = false;
                                                    refe.RazonRef = razonReferencia + serie.ToString() + " " + nro.ToString();
                                                    refe.FechaCFErefSpecified = false;
                                                }
                                                else
                                                {
                                                    refe.IndGlobalSpecified = false;
                                                    refe.TpoDocRefSpecified = true;

                                                    if (tipo == 111)
                                                        refe.TpoDocRef = CFEType.Item111;
                                                    else if (tipo == 101)
                                                        refe.TpoDocRef = CFEType.Item101;
                                                    else if (tipo == 102)
                                                        refe.TpoDocRef = CFEType.Item102;
                                                    else if (tipo == 103)
                                                        refe.TpoDocRef = CFEType.Item103;
                                                    else if (tipo == 112)
                                                        refe.TpoDocRef = CFEType.Item112;
                                                    else if (tipo == 113)
                                                        refe.TpoDocRef = CFEType.Item113;
                                                    else
                                                    {
                                                        refe.IndGlobalSpecified = true;
                                                        refe.RazonRef = razonReferencia + serie.ToString() + " " + nro.ToString();
                                                        refe.TpoDocRefSpecified = false;
                                                    }

                                                    refe.Serie = serie;
                                                    refe.NroCFERef = nro.ToString();
                                                    refe.FechaCFErefSpecified = false;
                                                }

                                                referencia[num - 1] = refe;
                                                num++;
                                                oRSMyTableDocRef.MoveNext();
                                            }
                                        }

                                        factura.Referencia = referencia;
                                    }
                                }
                                else
                                {
                                    // Cuando es una cancelación
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";

                                    string serieNumero = oRSMyTable.Fields.Item("CounterRef").Value;
                                    if (serieNumero.Length > 3)
                                    {
                                        refe.Serie = serieNumero.Substring(0, 2);
                                        refe.Serie = refe.Serie.ToString().Replace(" ", "");
                                        serieNumero = serieNumero.Substring(2, serieNumero.Length - 2);
                                        serieNumero = serieNumero.ToString().Replace(" ", "");
                                        refe.NroCFERef = serieNumero.ToString();
                                        refe.IndGlobalSpecified = false;
                                        refe.TpoDocRefSpecified = true;
                                        refe.TpoDocRef = CFEType.Item182;
                                    }
                                    else
                                    {
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                    }

                                    refe.FechaCFErefSpecified = false;
                                    refe.RazonRef = "Anulación de eResguardo";
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ENGRW"))
                                sicfeAdenda += "Observaciones:    " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                            sicfeAdenda += "Número Resguardo: " + codigoFactura.ToString() + "\r\n";

                            if (descEmpresa.ToString().Equals("AEG"))
                            {
                                sicfeAdenda += "Referencia: " + oRSMyTable.Fields.Item("NumAtCard").Value + "\r\n";
                                sicfeAdenda += "Fecha: " + oRSMyTable.Fields.Item("TaxDate").Value + "\r\n";
                            }
                            if (descEmpresa.ToString().Equals("ENGRW"))
                            {
                                sicfeAdenda += "Numero de Referencia: " + oRSMyTable.Fields.Item("Comments").Value + "\r\n";
                            }

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeEResg));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlResguardosFITCO(String pFormFactura, bool pEsCancelacion)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                string tipoClienteProveedor = "";
                sicfeAdenda = "";

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            CFEDefTypeEResg factura = new CFEDefTypeEResg();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEResgEncabezado encabezado = new CFEDefTypeEResgEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Resg idDoc = new IdDoc_Resg();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                idDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182; //IdDoc_FactTipoCFE.item;
                                tipo = "CFEDefTypeEResg"; // CFEDefTypeEResgEncabezado

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Resg receptor = new Receptor_Resg();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;
                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                tipoClienteProveedor = oRSMyTable.Fields.Item("DocType").Value;

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoClienteProveedor);
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, tipoClienteProveedor); // Obtengo las direcciones del cliente
                                string freeText = "";
                                string infoAdicionalClienteFitco = "";
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        freeText = oRSMyTable2.Fields.Item("Free_Text").Value;
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        infoAdicionalClienteFitco = "CEP: " + receptor.CP + " ";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal
                                        receptor.CP = "0";

                                        string numeroDireccion = oRSMyTable5.Fields.Item("StreetNo").Value;
                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico

                                        infoAdicionalClienteFitco = receptor.DirRecep + " " + numeroDireccion + " " + oRSMyTable5.Fields.Item("Block").Value + "," + infoAdicionalClienteFitco + " " + receptor.CiudadRecep + " " + receptor.DeptoRecep + " " + receptor.PaisRecep;
                                        receptor.InfoAdicional = infoAdicionalClienteFitco;

                                        receptor.DocRecep = oRSMyTable2.Fields.Item("LicTradNum").Value;
                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        receptor.CodPaisRecep = CodPaisType.UY;
                                        receptor.TipoDocRecep = DocType.Item2;

                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 9)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 9)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros


                                            receptor.DocRecep = rucDocumento.ToString();

                                            try
                                            {
                                                if (!String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                                    if (!receptor.PaisRecep.ToString().Equals("UY"))
                                                        receptor.TipoDocRecep = DocType.Item4;
                                            }
                                            catch (Exception ex)
                                            { }

                                            if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                            {
                                                receptor.TipoDocRecep = DocType.Item4;
                                                receptor.DocRecep = "99";
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                //if (!receptor.CodPaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("URUGUAY") && !receptor.PaisRecep.ToString().Equals("UY"))
                                {
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    encabezado.IdDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182;
                                    tipo = "CFEDefTypeEResg"; // CFEDefTypeEResgEncabezado

                                    string cnpj = "";
                                    try
                                    {
                                        // Si tiene CNPJ en FreeText
                                        if (freeText.Contains("CNPJ"))
                                        {
                                            int inicialChar = freeText.LastIndexOf("CNPJ");
                                            int finalChar = freeText.Length;
                                            string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                            textoReemplazar = textoReemplazar.Substring(0, 24);
                                            cnpj = textoReemplazar.Replace("CNPJ", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                            if (!String.IsNullOrEmpty(cnpj.ToString()))
                                            {
                                                //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                receptor.TipoDocRecep = DocType.Item6; // DNI Documento Arg, Bra, Par o Chi
                                                receptor.DocRecep = cnpj.ToString();
                                                receptor.CodPaisRecep = CodPaisType.BR;
                                            }
                                        }
                                        else
                                        {
                                            // Entonces es Otro
                                            int inicialChar = freeText.LastIndexOf("Otro");
                                            int finalChar = freeText.Length;
                                            string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                                            //textoReemplazar = textoReemplazar.Substring(0, 24);
                                            cnpj = textoReemplazar.Replace("Otro", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");

                                            if (!String.IsNullOrEmpty(cnpj.ToString()))
                                            {
                                                //esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                                receptor.TipoDocRecep = DocType.Item4; // DNI Documento Arg, Bra, Par o Chi
                                                receptor.DocRecep = cnpj.ToString();
                                                receptor.CodPaisRecep = CodPaisType.Item99; // Pais "Otros"
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    { }

                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                }
                                else
                                {
                                    // Con Dirección Uruguay es eFactura
                                    encabezado.IdDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182;
                                    tipo = "CFEDefTypeEResg"; // CFEDefTypeEResgEncabezado

                                    if (receptor.DocRecep.ToString().Length == 12) // Tiene RUC
                                        receptor.TipoDocRecep = DocType.Item2;
                                    else if (receptor.DocRecep.ToString().Length >= 7 && receptor.DocRecep.ToString().Length <= 10)
                                        receptor.TipoDocRecep = DocType.Item3;
                                    else if (receptor.DocRecep.ToString().Length == 11 && ValidarRUC("0" + receptor.DocRecep))
                                    {
                                        receptor.TipoDocRecep = DocType.Item2;
                                        receptor.DocRecep = "0" + receptor.DocRecep;
                                    }
                                    else
                                        receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros
                                }

                                if (receptor.TipoDocRecep == DocType.Item4 || receptor.TipoDocRecep == DocType.Item6)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()) || receptor.CodPaisRecep == CodPaisType.UY)
                                    {
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;
                                    }

                                    /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                    {
                                        if (receptor.CodPaisRecep != CodPaisType.UY)
                                            esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        else
                                            esDocUruguayo = true;
                                    }*/
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                if (guardaLog == true)
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR guardado cliente al XML", e.Message.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0; decimal montoSumadoItems = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCurr").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            int cantidadItems = oRSMyTable3.RecordCount;
                            if (cantidadItems == 0)
                                cantidadItems = 1;

                            Totales_Resg totales = new Totales_Resg();
                            Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[cantidadItems];
                            RetPerc_Resg[] arrayItemRetPer = new RetPerc_Resg[cantidadItems];

                            try
                            {
                                int cont = 0;

                                Item_Resg[] detalle = new Item_Resg[cantidadItems];

                                if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                {
                                    while (!oRSMyTable3.EoF) //if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                    {
                                        if (oRSMyTable3 != null)
                                        {
                                            {
                                                String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                                Item_Resg item = new Item_Resg();

                                                int nro = cont + 1;
                                                item.NroLinDet = nro.ToString();

                                                if (pEsCancelacion == true)
                                                {
                                                    item.IndFact = Item_ResgIndFact.Item9;
                                                    item.IndFactSpecified = true;
                                                }

                                                try
                                                {
                                                    // Obtengo la moneda y el tipo de cambio del artículo.
                                                    monedaArticulo = moneda;
                                                    tipoCambioArticulo = 1;
                                                }
                                                catch (Exception ex)
                                                { }

                                                decimal precioUni = 0; // Precio sin Descuento
                                                decimal montoDescUni = 0; // Calculo el Monto de Descuento
                                                decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("SumApplied").Value; // Monto del Item

                                                if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                                {
                                                    if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                        tipoCambioArticulo = (decimal)cotizacion;

                                                    if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                                    {
                                                        precioUni = precioUni * tipoCambioArticulo;
                                                        montoDescUni = montoDescUni * tipoCambioArticulo;
                                                    }
                                                    else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                                    {
                                                        precioUni = precioUni / tipoCambioArticulo;
                                                        montoDescUni = montoDescUni / tipoCambioArticulo;
                                                    }
                                                }

                                                decimal montoCalculado = precioUni - montoDescUni;
                                                montoCalculado = decimal.Round(montoCalculado, 2);

                                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                                    montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("AppliedFC").Value; // Monto del Item
                                                else
                                                    montoCalculado = montoTotalLinea;

                                                try
                                                {
                                                    /*Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                                    //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                                    totRetPerUnidad.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                                    totRetPerUnidad.ValRetPerc = montoTotalLinea;
                                                    arrayRetPer[cont] = totRetPerUnidad;*/
                                                    ////if (oRSMyTable3.Fields.Item("InvType").Value == "14" || oRSMyTable3.Fields.Item("InvType").Value == "19") // Nuevo para saber si es Una Nc para restar el monto
                                                    ////    montoTotalLinea = montoTotalLinea * -1; // Le cambio el signo

                                                    RetPerc_Resg itemRetPer = new RetPerc_Resg();
                                                    decimal tasaResguardo = (decimal)oRSMyTable3.Fields.Item("U_TASA_RESG").Value;
                                                    itemRetPer.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                                    itemRetPer.MntSujetoaRet = montoTotalLinea;
                                                    if (tasaResguardo > 0)
                                                    {
                                                        itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
                                                        itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
                                                    }

                                                    // Si tiene algo digitado en el campo entonces usa lo que hay allí.
                                                    decimal montoSujetoDigitado = (decimal)oRSMyTable3.Fields.Item("U_MONTO_IMPONIBLE").Value;
                                                    if (montoSujetoDigitado != 0)
                                                        itemRetPer.MntSujetoaRet = montoSujetoDigitado;

                                                    itemRetPer.Tasa = tasaResguardo;
                                                    itemRetPer.TasaSpecified = true;
                                                    itemRetPer.ValRetPerc = montoTotalLinea;
                                                    arrayItemRetPer[cont] = itemRetPer;
                                                    //item.RetencPercep[0] = itemRetPer;
                                                    item.RetencPercep = new RetPerc_Resg[oRSMyTable3.RecordCount];
                                                    item.RetencPercep[cont] = arrayItemRetPer[cont];

                                                    montoSumadoItems += itemRetPer.ValRetPerc;
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                }

                                                detalle[cont] = item;
                                                cont++;
                                                oRSMyTable3.MoveNext();
                                            }
                                        }
                                        factura.Detalle = detalle;
                                    }
                                }
                                else
                                {
                                    String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    Item_Resg item = new Item_Resg();

                                    int nro = cont + 1;
                                    item.NroLinDet = nro.ToString();

                                    if (pEsCancelacion == true)
                                    {
                                        item.IndFact = Item_ResgIndFact.Item9;
                                        item.IndFactSpecified = true;
                                    }

                                    try
                                    {
                                        // Obtengo la moneda y el tipo de cambio del artículo.
                                        monedaArticulo = moneda;
                                        tipoCambioArticulo = 1;
                                    }
                                    catch (Exception ex)
                                    { }

                                    decimal precioUni = 0; // Precio sin Descuento
                                    decimal montoDescUni = 0; // Calculo el Monto de Descuento
                                    decimal montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotal").Value; // Monto del Item

                                    decimal montoCalculado = 0;
                                    if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                        montoTotalLinea = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value; // Monto del Item
                                    else
                                        montoCalculado = montoTotalLinea;

                                    RetPerc_Resg itemRetPer = new RetPerc_Resg();
                                    decimal tasaResguardo = (decimal)oRSMyTable.Fields.Item("U_TASA").Value;
                                    itemRetPer.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                    itemRetPer.MntSujetoaRet = montoTotalLinea;
                                    if (tasaResguardo > 0)
                                    {
                                        itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
                                        itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
                                    }

                                    // Si tiene algo digitado en el campo entonces usa lo que hay allí.
                                    decimal montoSujetoDigitado = (decimal)oRSMyTable3.Fields.Item("U_MONTO_IMPONIBLE").Value;
                                    if (montoSujetoDigitado != 0)
                                        itemRetPer.MntSujetoaRet = montoSujetoDigitado;

                                    itemRetPer.Tasa = tasaResguardo;
                                    itemRetPer.TasaSpecified = true;
                                    itemRetPer.ValRetPerc = montoTotalLinea;
                                    arrayItemRetPer[cont] = itemRetPer;
                                    //item.RetencPercep[0] = itemRetPer;
                                    item.RetencPercep = new RetPerc_Resg[1];
                                    item.RetencPercep[cont] = arrayItemRetPer[cont];

                                    montoSumadoItems += itemRetPer.ValRetPerc;

                                    detalle[cont] = item;

                                    factura.Detalle = detalle;
                                }

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                if (guardaLog == true)
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR agregando items al XML", e.Message.ToString()); // Guarda log del Proceso
                            }

                            // Totales
                            try
                            {
                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntTotRetenido = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntTotRetenido = decimal.Round(totales.MntTotRetenido, 2);
                                }
                                else
                                {
                                    totales.MntTotRetenido = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntTotRetenido = decimal.Round(totales.MntTotRetenido, 2);
                                }

                                Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                totRetPerUnidad.CodRet = (string)oRSMyTable.Fields.Item("U_CODIGODGI").Value;
                                totRetPerUnidad.ValRetPerc = montoSumadoItems;

                                // Linea nueva, por error: No cierra la operación Campo-125 = Suma(Campo-128) : Encabezado (Retención - Percepción)
                                totales.MntTotRetenido = montoSumadoItems;

                                if (pEsCancelacion == true) // Se envían los valores en negativo por ser Cancelacion
                                {
                                    totales.MntTotRetenido = totales.MntTotRetenido * -1;
                                    totRetPerUnidad.ValRetPerc = totRetPerUnidad.ValRetPerc * -1;
                                }

                                arrayRetPer[0] = totRetPerUnidad;

                                totales.CantLinDet = cantidadItems.ToString();

                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                    totales.TpoCambioSpecified = true;
                                else
                                    totales.TpoCambioSpecified = false;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                encabezado.Totales = totales;
                                encabezado.Totales.RetencPercep = arrayRetPer;

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            //Referencias
                            try
                            {
                                int num = 1;

                                if (pEsCancelacion == false)
                                {

                                    SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                    oRSMyTableDocRef = obtenerDocumentoReferenciaResguardo(codigoFactura, tipoClienteProveedor); // Le paso el DocEntry

                                    if (oRSMyTableDocRef.RecordCount == 0)
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                        ReferenciaReferencia refe = new ReferenciaReferencia();
                                        refe.NroLinRef = "1";
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                        refe.RazonRef = "Referencia a documento no codificado";
                                        refe.FechaCFErefSpecified = false;
                                        referencia[0] = refe;
                                        factura.Referencia = referencia;
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                    else if (oRSMyTableDocRef.RecordCount > 40)
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                        ReferenciaReferencia refe = new ReferenciaReferencia();
                                        refe.NroLinRef = "1";
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                        refe.RazonRef = "Afecta a mas de 40 CFE";
                                        refe.FechaCFErefSpecified = false;
                                        referencia[0] = refe;
                                        factura.Referencia = referencia;
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                    else
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];
                                        if (oRSMyTableDocRef != null)
                                        {
                                            while (!oRSMyTableDocRef.EoF)
                                            {
                                                //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                                ReferenciaReferencia refe = new ReferenciaReferencia();
                                                refe.NroLinRef = num.ToString();
                                                String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                                int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                                int tipo = 0;
                                                try
                                                {
                                                    tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                                }
                                                catch (Exception ex)
                                                { }

                                                string razonReferencia = "Referencia a documento no electrónico ";
                                                if (tipo == 0)
                                                {
                                                    string tipoCfe = oRSMyTable.Fields.Item("U_TIPOCFE_REFERENCIA").Value; // Obtengo el campo Tipo del documento de Referencia.

                                                    if (String.IsNullOrEmpty(tipoCfe) || tipoCfe.ToString().Equals("XXX"))
                                                    {
                                                        tipoCfe = "0"; // Si no es un documento electrónico, le pone el tipo en 0
                                                        if (oRSMyTable.Fields.Item("U_RAZON_REFERENCIA").IsNull() == BoYesNoEnum.tNO)
                                                            if (!String.IsNullOrEmpty(oRSMyTable.Fields.Item("U_RAZON_REFERENCIA").Value))
                                                                razonReferencia = oRSMyTable.Fields.Item("U_RAZON_REFERENCIA").Value;
                                                    }

                                                    tipo = Convert.ToInt32(tipoCfe.ToString());
                                                }

                                                if (String.IsNullOrEmpty(serie) || nro == 0)
                                                {
                                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                    refe.IndGlobalSpecified = true;
                                                    refe.TpoDocRefSpecified = false;
                                                    refe.RazonRef = razonReferencia + serie.ToString() + " " + nro.ToString();
                                                    refe.FechaCFErefSpecified = false;
                                                }
                                                else
                                                {
                                                    refe.IndGlobalSpecified = false;
                                                    refe.TpoDocRefSpecified = true;

                                                    if (tipo == 111)
                                                        refe.TpoDocRef = CFEType.Item111;
                                                    else if (tipo == 101)
                                                        refe.TpoDocRef = CFEType.Item101;
                                                    else if (tipo == 102)
                                                        refe.TpoDocRef = CFEType.Item102;
                                                    else if (tipo == 103)
                                                        refe.TpoDocRef = CFEType.Item103;
                                                    else if (tipo == 112)
                                                        refe.TpoDocRef = CFEType.Item112;
                                                    else if (tipo == 113)
                                                        refe.TpoDocRef = CFEType.Item113;
                                                    else
                                                    {
                                                        refe.IndGlobalSpecified = true;
                                                        refe.RazonRef = razonReferencia;
                                                        refe.TpoDocRefSpecified = false;
                                                    }

                                                    refe.Serie = serie;
                                                    refe.NroCFERef = nro.ToString();
                                                    refe.FechaCFErefSpecified = false;
                                                }

                                                referencia[num - 1] = refe;
                                                num++;
                                                oRSMyTableDocRef.MoveNext();
                                            }
                                        }

                                        factura.Referencia = referencia;
                                    }
                                }
                                else
                                {
                                    // Cuando es una cancelación
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";

                                    string serieNumero = oRSMyTable.Fields.Item("CounterRef").Value;
                                    if (serieNumero.Length > 3)
                                    {
                                        refe.Serie = serieNumero.Substring(0, 2);
                                        refe.Serie = refe.Serie.ToString().Replace(" ", "");
                                        serieNumero = serieNumero.Substring(2, serieNumero.Length - 2);
                                        serieNumero = serieNumero.ToString().Replace(" ", "");
                                        refe.NroCFERef = serieNumero.ToString();
                                        refe.IndGlobalSpecified = false;
                                        refe.TpoDocRefSpecified = true;
                                        refe.TpoDocRef = CFEType.Item182;
                                    }
                                    else
                                    {
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                    }

                                    refe.FechaCFErefSpecified = false;
                                    refe.RazonRef = "Anulación de eResguardo";
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            factura.Encabezado = encabezado;

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones:    " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                            sicfeAdenda += "Número Resguardo: " + codigoFactura.ToString() + "\r\n";

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeEResg));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlResguardosPorCompraProveedor(String pFormFactura, bool pEsCancelacion, string pWtCode, string pCodigoCuentaResguardo)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            String strDocumento = "";

            try
            {
                SAPbobsCOM.Recordset oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = obtenerDatosResguardoProveedor(codigoFactura, pWtCode, pCodigoCuentaResguardo, pEsCancelacion);
                string tipoClienteProveedor = "S"; // Es un Proveedor
                sicfeAdenda = "";
                int docEntry = 0;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            CFEDefTypeEResg factura = new CFEDefTypeEResg();

                            try
                            {
                                docEntry = oRSMyTable.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                int idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEResgEncabezado encabezado = new CFEDefTypeEResgEncabezado(); // CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Resg idDoc = new IdDoc_Resg();//   IdDoc_Fact idDoc = new IdDoc_Fact();

                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                idDoc.TipoCFE = IdDoc_ResgTipoCFE.Item182; //IdDoc_FactTipoCFE.item;
                                tipo = "CFEDefTypeEResg"; // CFEDefTypeEResgEncabezado

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            { }

                            //Receptor
                            try
                            {
                                Receptor_Resg receptor = new Receptor_Resg();  //Receptor_Fact receptor = new Receptor_Fact();
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;
                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, tipoClienteProveedor);
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                            receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        else
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        receptor.DocRecep = oRSMyTable2.Fields.Item("LicTradNum").Value;
                                        strDocumento = receptor.DocRecep; //Guardo documento para Adenda
                                        receptor.CodPaisRecep = CodPaisType.UY;
                                        receptor.TipoDocRecep = DocType.Item2;

                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 9)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "");
                                            rucDocumento = rucDocumento.ToString().Replace("-", "");
                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 9)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros


                                            receptor.DocRecep = rucDocumento.ToString();

                                            try
                                            {
                                                if (!String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                                    if (!receptor.PaisRecep.ToString().Equals("UY"))
                                                        receptor.TipoDocRecep = DocType.Item4;
                                            }
                                            catch (Exception ex)
                                            { }

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (receptor.CodPaisRecep == CodPaisType.UY)
                                            {
                                                if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                {
                                                    receptor.TipoDocRecep = DocType.Item4;
                                                    receptor.DocRecep = "99";
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }
                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                if (guardaLog == true)
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR guardado cliente al XML", e.Message.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0; decimal montoSumadoItems = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            int cantidadItems = oRSMyTable3.RecordCount;
                            if (cantidadItems == 0)
                                cantidadItems = 1;

                            Totales_Resg totales = new Totales_Resg();
                            Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[cantidadItems];
                            RetPerc_Resg[] arrayItemRetPer = new RetPerc_Resg[cantidadItems];

                            decimal montoRetencion = 0;
                            if (descEmpresa.ToString().Equals("ENGRW")) //ASPL - 2019.04.15 - Cambio por moneda local en USD, se debe obtener de moneda del sistema UYU.
                                montoRetencion = (decimal)oRSMyTable3.Fields.Item("WTAmnt").Value; // Monto del Item
                            else
                                montoRetencion = (decimal)oRSMyTable3.Fields.Item("WTAmnt").Value; // Monto del Item

                            decimal montoSujetoRetencion = 0;
                            montoSujetoRetencion = (decimal)oRSMyTable3.Fields.Item("TaxbleAmnt").Value; // Monto del Item

                            //if (descEmpresa.Equals("AEG")) //ASPL - 2019.10.11 - Monto total de la linea. Comentado 2019.10.29
                            //    montoSujetoRetencion = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; //Importe Base

                            decimal tasaResguardo = (decimal)oRSMyTable3.Fields.Item("PrctBsAmnt").Value; // Rate estaba mal
                            string codigoCuentaDGI = (string)oRSMyTable3.Fields.Item("U_COD_DGI").Value;

                            if (descEmpresa.ToString().Equals("OBRIN")) // Si es Obrinel
                                tasaResguardo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;

                            try
                            {
                                int cont = 0;

                                Item_Resg[] detalle = new Item_Resg[cantidadItems];

                                if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                {
                                    while (!oRSMyTable3.EoF) //if (oRSMyTable3 != null && oRSMyTable3.RecordCount >= 1)
                                    {
                                        if (oRSMyTable3 != null)
                                        {
                                            {
                                                String monedaArticulo = "";
                                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                                Item_Resg item = new Item_Resg();

                                                int nro = cont + 1;
                                                item.NroLinDet = nro.ToString();

                                                if (pEsCancelacion == true)
                                                {
                                                    item.IndFact = Item_ResgIndFact.Item9;
                                                    item.IndFactSpecified = true;
                                                }

                                                monedaArticulo = moneda; // Obtengo la moneda y el tipo de cambio del artículo.

                                                if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("OBRIN")) // Granja Pocha envía siempre en Pesos los eResguardos
                                                {
                                                    if (!moneda.Equals(monedaStrISO) && !moneda.Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion cotizacion != 0 && cotizacion != 1 && 
                                                    {
                                                        montoRetencion = (decimal)oRSMyTable3.Fields.Item("WTAmntFC").Value; // Monto del Item
                                                        montoSujetoRetencion = (decimal)oRSMyTable3.Fields.Item("TxblAmntFC").Value; // Monto del Item
                                                    }
                                                }

                                                try
                                                {
                                                    RetPerc_Resg itemRetPer = new RetPerc_Resg();
                                                    itemRetPer.MntSujetoaRet = (decimal)oRSMyTable3.Fields.Item("TaxbleAmnt").Value;
                                                    itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2); // Redondeos
                                                    itemRetPer.CodRet = (string)oRSMyTable3.Fields.Item("U_COD_DGI").Value;

                                                    /*if (tasaResguardo > 0)
                                                    {
                                                        itemRetPer.MntSujetoaRet = (100 * itemRetPer.MntSujetoaRet) / tasaResguardo;
                                                        itemRetPer.MntSujetoaRet = Math.Round(itemRetPer.MntSujetoaRet, 2);
                                                    }*/

                                                    itemRetPer.Tasa = (decimal)oRSMyTable3.Fields.Item("PrctBsAmnt").Value;
                                                    itemRetPer.Tasa = Math.Round(itemRetPer.Tasa, 2);
                                                    itemRetPer.TasaSpecified = true;
                                                    itemRetPer.ValRetPerc = (decimal)oRSMyTable3.Fields.Item("WTAmnt").Value;
                                                    itemRetPer.ValRetPerc = Math.Round(itemRetPer.ValRetPerc, 2); // Redondeos
                                                    arrayItemRetPer[cont] = itemRetPer;
                                                    //item.RetencPercep[0] = itemRetPer;
                                                    item.RetencPercep = new RetPerc_Resg[oRSMyTable3.RecordCount];
                                                    item.RetencPercep[cont] = arrayItemRetPer[cont];

                                                    montoSumadoItems += itemRetPer.ValRetPerc;

                                                    Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                                    totRetPerUnidad.CodRet = (string)oRSMyTable3.Fields.Item("U_COD_DGI").Value;
                                                    totRetPerUnidad.ValRetPerc = (decimal)oRSMyTable3.Fields.Item("WTAmnt").Value;
                                                    totRetPerUnidad.ValRetPerc = Math.Round(totRetPerUnidad.ValRetPerc, 2);
                                                    arrayRetPer[cont] = totRetPerUnidad;
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                }

                                                detalle[cont] = item;
                                                cont++;
                                                oRSMyTable3.MoveNext();
                                            }
                                        }
                                        factura.Detalle = detalle;
                                    }
                                }

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                if (guardaLog == true)
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR agregando items al XML", e.Message.ToString()); // Guarda log del Proceso
                            }

                            // Totales
                            try
                            {
                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                if (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("OBRIN")) // Granja Pocha envía siempre en Pesos los eResguardos
                                    totales.TpoMoneda = TipMonType.UYU;

                                totales.MntTotRetenido = montoSujetoRetencion;

                                Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                totRetPerUnidad.CodRet = codigoCuentaDGI;
                                totRetPerUnidad.ValRetPerc = montoSumadoItems;

                                // Linea nueva, por error: No cierra la operación Campo-125 = Suma(Campo-128) : Encabezado (Retención - Percepción)
                                totales.MntTotRetenido = montoSumadoItems;

                                if (pEsCancelacion == true) // Se envían los valores en negativo por ser Cancelacion
                                {
                                    try
                                    {
                                        totales.MntTotRetenido = totales.MntTotRetenido * -1;
                                        totRetPerUnidad.ValRetPerc = totRetPerUnidad.ValRetPerc * -1;
                                    }
                                    catch (Exception exxx)
                                    {
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "Error Calculando totales de Cancelacion", exxx.Message.ToString());
                                    }
                                }

                                //arrayRetPer[0] = totRetPerUnidad;

                                totales.CantLinDet = cantidadItems.ToString();

                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                    totales.TpoCambioSpecified = true;
                                else
                                    totales.TpoCambioSpecified = false;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }


                                totales.MntTotRetenido = Math.Round(totales.MntTotRetenido, 2); // Redondeos

                                encabezado.Totales = totales;
                                encabezado.Totales.RetencPercep = arrayRetPer;

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "Error Cargando Encabezado", ex.Message.ToString());
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            //Referencias
                            try
                            {
                                int num = 1;

                                if (pEsCancelacion == false)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTable.RecordCount];
                                    if (oRSMyTable != null)
                                    {
                                        while (!oRSMyTable.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTable.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTable.Fields.Item("FolioNum").Value);
                                            int tipo = 0;
                                            try
                                            {
                                                tipo = Convert.ToInt32(oRSMyTable.Fields.Item(campoReferencia).Value);
                                            }
                                            catch (Exception ex)
                                            { }

                                            string razonReferencia = "Referencia a documento no electrónico ";

                                            if (tipo == 0)
                                                razonReferencia = oRSMyTable3.Fields.Item("WTName").Value; // Obtengo el campo Tipo del documento de Referencia.

                                            if (tipo == 0 || String.IsNullOrEmpty(serie) || nro == 0)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = razonReferencia + " " + serie.ToString() + " " + nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                if (tipo == 111)
                                                    refe.TpoDocRef = CFEType.Item111;
                                                else if (tipo == 101)
                                                    refe.TpoDocRef = CFEType.Item101;
                                                else if (tipo == 102)
                                                    refe.TpoDocRef = CFEType.Item102;
                                                else if (tipo == 103)
                                                    refe.TpoDocRef = CFEType.Item103;
                                                else if (tipo == 112)
                                                    refe.TpoDocRef = CFEType.Item112;
                                                else if (tipo == 113)
                                                    refe.TpoDocRef = CFEType.Item113;
                                                else
                                                {
                                                    refe.IndGlobalSpecified = true;
                                                    refe.RazonRef = razonReferencia;
                                                    refe.TpoDocRefSpecified = false;
                                                }

                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTable.MoveNext();
                                        }
                                    }

                                    factura.Referencia = referencia;
                                }
                                else
                                {
                                    // Cuando es una cancelación
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";

                                    SAPbobsCOM.Recordset oRSMyTableReferenciaCancelacion = obtenerReferenciaResguardoProveedor(codigoFactura, docEntry.ToString(), pCodigoCuentaResguardo);

                                    if (oRSMyTableReferenciaCancelacion != null)
                                    {
                                        while (!oRSMyTableReferenciaCancelacion.EoF)
                                        {
                                            refe.Serie = oRSMyTableReferenciaCancelacion.Fields.Item("FOLIOPREF").Value;
                                            string numeroFolio = Convert.ToString(oRSMyTableReferenciaCancelacion.Fields.Item("FOLIONUMERO").Value);
                                            refe.NroCFERef = numeroFolio;
                                            refe.IndGlobalSpecified = false;
                                            refe.TpoDocRefSpecified = true;
                                            refe.TpoDocRef = CFEType.Item182;
                                            refe.FechaCFErefSpecified = false;
                                            refe.RazonRef = "Anulación de eResguardo";
                                            referencia[0] = refe;

                                            oRSMyTableReferenciaCancelacion.MoveNext();
                                        }
                                    }

                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "Error Cargando Referencias", ex.Message.ToString());
                            }

                            factura.Encabezado = encabezado;

                            sicfeAdenda += "Observaciones:    " + oRSMyTable.Fields.Item("Comments").Value + "<br>"; // ObservacionesFijas 

                            if (descEmpresa.ToString().Equals("OBRIN")) // Si es Obrinel
                            {
                                DateTime fechaTaxDate = Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value.ToString());
                                sicfeAdenda += "Número de Factura: " + oRSMyTable.Fields.Item("NumAtCard").Value.ToString() + ". Fecha: " + fechaTaxDate.ToShortDateString() + "<br>";
                            }
                            else
                                sicfeAdenda += "Número Resguardo: " + codigoFactura.ToString() + "<br>";

                            if (descEmpresa.Equals("AEG"))
                                sicfeAdenda += "Número Documento: " + strDocumento + "<br>";

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeEResg));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "Error realizando el Serializer", e.Message.ToString()); }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
            }
            return result;
        }

        public String GenerarXmlFacturaExportacion(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";

            if (descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("RURAL"))
                result = GenerarXmlFacturaExportacionNuevo(pFormFactura);
            else
            {
                try
                {
                    SAPbobsCOM.Recordset oRSMyTable = null;
                    oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                    SAPbobsCOM.Recordset oRSMyTable3 = null;
                    oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                    double descuentoCliente = 0;
                    double recargoCliente = 0; double saldoCliente = 0;
                    decimal TotalItemsNoGravados = 0;
                    decimal TotalItemsGravadosIVAMinimo = 0;
                    decimal TotalItemsGravadosIVABasico = 0;
                    decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                    decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                    decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                    int idUserDoc = 0; decimal cantPiezas = 0;
                    decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos 
                    decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                    decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                    List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                    bool ocultoDescuento = true;

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            try
                            {

                                eFact factura = new eFact();

                                try
                                {
                                    int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                    codigoDocEntry = docEntry.ToString();

                                    idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                    getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                    if (sucursalesActivadas == true)
                                    {
                                        idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                        if (descEmpresa.Equals("CIMSA"))
                                            idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    SBO_Application.MessageBox("CARTEL ERROR al obtener el DocEntry");
                                }

                                // CAE
                                CAEDataType cae = new CAEDataType();
                                cae.CAE_ID = "";
                                cae.DNro = "";
                                //cae.FecVenc = new DateTime();
                                cae.FecVenc = DateTime.Now;
                                cae.HNro = "";

                                factura.CAEData = cae;

                                //Encabezado
                                CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                                // IdDoc
                                try
                                {
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                    IdDoc_Fact idDoc = new IdDoc_Fact();
                                    idDoc.Nro = "";
                                    idDoc.Serie = "";

                                    // Si es documento Manual le manda Serie y Numero
                                    if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                    {
                                        try
                                        {
                                            idDoc.Nro = codigoFactura.ToString();
                                            idDoc.Serie = "A";
                                            //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                            //idDoc.Serie = serieDoc.ToString();
                                        }
                                        catch (Exception ex)
                                        { }
                                    }

                                    tipo = "eFact_Exp";
                                    idDoc.TipoCFE = IdDoc_FactTipoCFE.Item121;

                                    idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                    idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                    idDoc.FchVencSpecified = false;
                                    //if (idDoc.FchVenc == null)
                                    //{
                                    //    idDoc.FchVencSpecified = false;
                                    //}
                                    //else
                                    //{
                                    //    idDoc.FchVencSpecified = true;
                                    //}
                                    // Se asigna la fecha que solicita Signature. 
                                    idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                    idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                    idDoc.PeriodoDesdeSpecified = false;
                                    idDoc.PeriodoHastaSpecified = false;

                                    idDoc.MntBrutoSpecified = false;

                                    //try
                                    //{
                                    //    // Modalidad de Venta. 1- Regimen General. 2- Consignacion. 3- Precio Revisable. 4- Bienes Propios a exclaves aduaneros
                                    //    idDoc.ModVenta = 1;
                                    //    idDoc.ModVentaSpecified = true;

                                    //    // Via de Transporte. 1- Maritimo. 2- Aereo. 3- Terrestre. 8- N/A. 9- Otro
                                    //    idDoc.ViaTransp = 1;
                                    //}
                                    //catch (Exception ex)
                                    //{ }

                                    int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                    if (EsContado(formaPago))
                                    {
                                        idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                    }
                                    else
                                    {
                                        idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                    }

                                    encabezado.IdDoc = idDoc;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                catch (Exception ex)
                                {
                                    SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                                }

                                //Emisor
                                try
                                {
                                    Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                    encabezado.Emisor = emisor;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                catch (Exception ex)
                                {
                                    SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                                }

                                //Receptor
                                try
                                {
                                    Receptor_Fact receptor = new Receptor_Fact();
                                    receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                    receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                    receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                    receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                    string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                    receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                    {
                                        if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                        {
                                            String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                            receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                        }
                                    }

                                    String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                    if (descEmpresa.ToString().Equals("PURAT"))
                                        codCliente = codCliente.ToString().Replace("?", "");

                                    SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                    if (oRSMyTable2 != null)
                                    {
                                        while (!oRSMyTable2.EoF)
                                        {
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                            string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                            {
                                                if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                    if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                    {
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                        if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                            nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                        receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                    }
                                            }

                                            receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                            /*if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                                receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                            else*/
                                            receptor.CP = "0";

                                            receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                            receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                            receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                            if (descEmpresa.ToString().Equals("RURAL"))
                                                receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value;
                                            if (descEmpresa.ToString().Equals("TECHM"))
                                                receptor.InfoAdicional = "";
                                            receptor.LugarDestEnt = "";

                                            if (descEmpresa.ToString().Equals("MAVIN"))
                                                receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                                receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                            if (descEmpresa.ToString().Equals("ETARE"))
                                                saldoCliente = oRSMyTable2.Fields.Item("Balance").Value;

                                            descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                            recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                            if (!String.IsNullOrEmpty(receptor.DocRecep))
                                            {
                                                receptor.CodPaisRecep = CodPaisType.UY;

                                                if (receptor.DocRecep.Length == 12)
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4;
                                            }
                                            else
                                            {
                                                receptor.TipoDocRecep = DocType.Item3;
                                                receptor.CodPaisRecep = CodPaisType.UY;
                                                receptor.DocRecep = "11111111";
                                            }

                                            try
                                            {
                                                // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                                String rucDocumento = oRSMyTable2.Fields.Item("AddID").Value; // Aca se guarda el RUC del documento
                                                bool rucExtranjero = true;

                                                if (String.IsNullOrEmpty(rucDocumento))
                                                {
                                                    rucExtranjero = false;
                                                    rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                                }

                                                if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                    receptor.TipoDocRecep = DocType.Item3;
                                                else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                                {
                                                    //encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                    //tipo = "eFact";
                                                    receptor.TipoDocRecep = DocType.Item2;
                                                    rucDocumento = "0" + rucDocumento;
                                                }
                                                else
                                                    receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                                receptor.DocRecep = rucDocumento.ToString();

                                                receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                                if (rucExtranjero == false)
                                                {
                                                    if (receptor.CodPaisRecep == CodPaisType.UY)
                                                    {
                                                        if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                        {
                                                            receptor.TipoDocRecep = DocType.Item4;
                                                            receptor.DocRecep = "99";
                                                        }
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            { }

                                            oRSMyTable2.MoveNext();
                                        }
                                    }

                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    if (receptor.TipoDocRecep == DocType.Item4)
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo

                                    if (receptor.DirRecep.ToString().Length > 70)
                                        receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                    if (receptor.CiudadRecep.ToString().Length > 70)
                                        receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                    if (receptor.DeptoRecep.ToString().Length > 30)
                                        receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                    if (receptor.PaisRecep.ToString().Length > 30)
                                        receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                    if (receptor.LugarDestEnt.ToString().Length > 100)
                                        receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                    if (receptor.RznSocRecep.ToString().Length > 150)
                                        receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);
                                    if (receptor.DocRecep.ToString().Length > 20)
                                        receptor.DocRecep = receptor.DocRecep.ToString().Substring(0, 20);

                                    encabezado.Receptor = receptor;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                catch (Exception e)
                                {
                                    SBO_Application.MessageBox("ERROR CARGO RECPETOR " + e.ToString());
                                }

                                //Detalle
                                String moneda = "";
                                double cotizacion = 0;
                                try
                                {
                                    moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                    cotizacion = oRSMyTable.Fields.Item("DocRate").Value;

                                    //ASPL. 2019-07-03, SCIFE no permite ocultar descuentos en Fact.Exp., se cambio valor de variable a false.
                                    if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                        ocultoDescuento = false;
                                }
                                catch (Exception e)
                                { }

                                int cantLineasDocumento = oRSMyTable3.RecordCount;
                                try
                                {
                                    SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                    // Verifica si hay Gastos Adicionales (INV3) 
                                    if (descEmpresa.ToString().Equals("PROND"))
                                    {
                                        oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                        if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                        {
                                            cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                            hayGastosAdicionales = true;
                                        }
                                    }

                                    Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                    int cont = 0;
                                    if (oRSMyTable3 != null)
                                    {
                                        decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        while (!oRSMyTable3.EoF)
                                        {
                                            String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                            SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                            //Item_Det_Fact item = new Item_Det_Fact();
                                            Item_Det_Fact item = new Item_Det_Fact();
                                            ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                            ////nro++;
                                            int nro = cont + 1;
                                            item.NroLinDet = nro.ToString();
                                            item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                            item.IndAgenteRespSpecified = false;
                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                            item.UniMed = "N/A";
                                            decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                            item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.PrecioUnitarioSpecified = true;

                                            try
                                            {
                                                //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                                item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                                if (!descEmpresa.ToString().Equals("ANCAL"))
                                                {
                                                    string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                    string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                    if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                        unidadMedida = uomCode;

                                                    if (!String.IsNullOrEmpty(unidadMedida))
                                                        item.UniMed = unidadMedida;
                                                }

                                                if (concatenoCodNomArt)
                                                {
                                                    // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                    if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA"))
                                                        item.NomItem = item.DscItem + " - " + item.NomItem;
                                                    else if (descEmpresa.ToString().Equals("PORTV"))
                                                    {
                                                        int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                        nroLinea++;
                                                        item.NomItem = nroLinea.ToString() + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("MILDA"))
                                                    {
                                                        try
                                                        {
                                                            item.NomItem = item.NomItem + " " + oRSMyTable3.Fields.Item("U_Marca").Value + " " + oRSMyTable3.Fields.Item("U_Campana").Value + " " + oRSMyTable3.Fields.Item("U_UBICACION").Value;
                                                            DateTime fechaInicioM = oRSMyTable3.Fields.Item("U_Inicio").Value;
                                                            DateTime fechaFinM = oRSMyTable3.Fields.Item("U_Fin").Value;
                                                            if (fechaInicioM.Year > 2000) // Si tiene una Fecha correcta
                                                                item.NomItem = item.NomItem + " " + fechaInicioM.ToShortDateString() + "-" + fechaFinM.ToShortDateString();
                                                        }
                                                        catch (Exception exM)
                                                        { }
                                                    }

                                                    if (item.NomItem.Length > 80)
                                                        item.NomItem = item.NomItem.Substring(0, 80);

                                                    if (descEmpresa.ToString().Equals("SCHIN"))
                                                        item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                    else
                                                        item.DscItem = "";
                                                }

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);

                                                // Obtengo la moneda y el tipo de cambio del artículo.
                                                monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                                tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                            }
                                            catch (Exception ex)
                                            {
                                                if (!String.IsNullOrEmpty(item.UniMed) && item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                            {
                                                item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);
                                            }

                                            decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                            decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                            decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                            decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                            decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                            decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                            if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                            {
                                                if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                    tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                                if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                                {
                                                    precioUni = precioUni * tipoCambioArticulo;
                                                    montoDescUni = montoDescUni * tipoCambioArticulo;
                                                }
                                                else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                                {
                                                    precioUni = precioUni / tipoCambioArticulo;
                                                    montoDescUni = montoDescUni / tipoCambioArticulo;
                                                }
                                            }

                                            if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                                cantPiezas += item.Cantidad;

                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            if (montoTotalLinea == 0)
                                                montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; //Total de la linea

                                            decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                            montoCalculado = decimal.Round(montoCalculado, 2);

                                            // NUEVO. PARA CONTROLAR PRECIOS Y DESCUENTOS
                                            // Validaciones Dreghal y Ancal
                                            bool imprimeDescuento = false;
                                            decimal montoItemSinDto = 0;
                                            bool yaCalculoDescuento = false;

                                            // NUEVO CONTROL PARA BOSCH
                                            if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                            {
                                                item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                                item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                            }

                                            if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                            {
                                                yaCalculoDescuento = true;
                                                try
                                                {
                                                    if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                    {
                                                        if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                        {
                                                            if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                                imprimeDescuento = true;
                                                        }
                                                        else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                        {
                                                            // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                            item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                                item.Cantidad = 1;
                                                        }
                                                        else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) // Solo si es ANCAL
                                                        {
                                                            if (ocultoDescuento == true)
                                                                imprimeDescuento = false;
                                                            else
                                                                imprimeDescuento = true;
                                                        }
                                                        else
                                                            imprimeDescuento = true; // Almena y Puratos

                                                        montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                        if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                            montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                                        if (descuent != 0) // Si tiene solo descuento Global
                                                        {
                                                            item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = 0;
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                        else
                                                            item.MontoItem = montoItemSinDto;

                                                        if (porcDescUni != 0) // Si tiene descuento de Línea
                                                        {
                                                            if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                            {
                                                                if (descuent != 0)
                                                                    item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                                item.MontoItem = Math.Round(item.MontoItem, 2);

                                                                precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                                                if (descuent != 0)
                                                                    precioUni = precioUni * (1 - descuent / 100);
                                                                item.PrecioUnitario = Math.Round(precioUni, 2);

                                                                item.DescuentoPct = porcDescUni;
                                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                                item.DescuentoPctSpecified = true;
                                                                item.DescuentoMontoSpecified = true;
                                                            }
                                                            else
                                                            {
                                                                if (descuent != 0)
                                                                    item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                                item.MontoItem = Math.Round(item.MontoItem, 2);

                                                                item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                                item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                                item.DescuentoPct = 0;
                                                                item.DescuentoMonto = 0;
                                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                                item.DescuentoPctSpecified = false;
                                                                item.DescuentoMontoSpecified = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }

                                                }
                                                catch (Exception ex)
                                                { }
                                            }

                                            if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                            {
                                                if (descuent > 0)
                                                {
                                                    if (sumaDescuentos == true) // Si suma los descuentos
                                                    {
                                                        //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                        item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                                        item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                    }
                                                }
                                                if (item.DescuentoPct != 0 && descuent == 0)
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoMontoSpecified = true;*/

                                                    // 3 lineas nuevas
                                                    item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                                else if (item.DescuentoPct == 0 && descuent == 0)
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }
                                                else if (item.DescuentoPct != 0 && descuent > 0)
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                    if (sumaDescuentos == true) // Si suma los descuentos
                                                    {
                                                        item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                        item.DescuentoPct += descuent;
                                                    }
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                                else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct += descuent;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                                else
                                                {
                                                    if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("CIMSA") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("MAVIN"))
                                                    {
                                                        item.DescuentoPctSpecified = true;
                                                        item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = descuent;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoMontoSpecified = true;
                                                    }
                                                }
                                            }

                                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("TECHM"))
                                            {
                                                if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if ((!descEmpresa.ToString().Equals("BOSCH") && descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                    {
                                                        decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                        if (resultadoResta > 0)
                                                        {
                                                            item.DescuentoMonto = resultadoResta;
                                                            item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                                            if (item.DescuentoPct != 0 && descuent <= 0)
                                                                item.DescuentoMontoSpecified = true;
                                                        }
                                                    }
                                                }
                                            }

                                            // NUEVA VALIDACION PARA DREGAL
                                            if (descEmpresa.ToString().Equals("DREG"))
                                            {
                                                if (item.DescuentoMonto == 0)
                                                {
                                                    try
                                                    {
                                                        decimal montoCalculadoPrecio = (item.MontoItem / item.Cantidad) - item.DescuentoMonto;
                                                        if (Math.Round(item.PrecioUnitario, 2, MidpointRounding.ToEven) != Math.Round(montoCalculadoPrecio, 2, MidpointRounding.ToEven)) // Si el Monto de la Linea y el Monto del Item son distintos
                                                            if (((item.PrecioUnitario - montoCalculadoPrecio) < 1 && (item.PrecioUnitario - montoCalculadoPrecio) > -1) || ((montoCalculadoPrecio - item.PrecioUnitario) < 1 && (montoCalculadoPrecio - item.PrecioUnitario) > -1)) // Si la diferencia es de centésimos
                                                                item.PrecioUnitario = Math.Round(montoCalculadoPrecio, 3, MidpointRounding.ToEven);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        if (guardaLog == true)
                                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al recalcular montoItem Dreghal", ex.Message.ToString()); // Guarda log del Proceso
                                                    }
                                                }

                                                //item.PrecioUnitario = item.MontoItem; // Solo para un documento especial
                                            }

                                            if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA"))
                                            {
                                                // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                                if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                                    if (item.MontoItem != item.PrecioUnitario)
                                                        item.PrecioUnitario = item.MontoItem;
                                            }
                                            // FINAL. 



                                            /*decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                            montoCalculado = decimal.Round(montoCalculado, 2);
                                            if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                                if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                    montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

                                            item.DescuentoMonto = montoDescUni;
                                            item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                            item.PrecioUnitario = decimal.Round(precioUni, 3);

                                            //////////if (descuent > 0)
                                            //////////{
                                            //////////    if (sumaDescuentos == true) // Si suma los descuentos
                                            //////////    {
                                            //////////        //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                            //////////        item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                            //////////        item.MontoItem = decimal.Round(item.MontoItem, 2);
                                            //////////    }
                                            //////////}
                                            //////////if (item.DescuentoPct != 0 && descuent == 0)
                                            //////////{
                                            //////////    item.DescuentoPctSpecified = true;
                                            //////////    /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                            //////////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            //////////    item.DescuentoMontoSpecified = true;*/

                                            //////////    // 3 lineas nuevas
                                            //////////    item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                            //////////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            //////////    item.DescuentoMontoSpecified = true;
                                            //////////}
                                            //////////else if (item.DescuentoPct == 0 && descuent == 0)
                                            //////////{
                                            //////////    item.DescuentoPctSpecified = false;
                                            //////////    item.DescuentoMontoSpecified = false;
                                            //////////}
                                            //////////else if (item.DescuentoPct != 0 && descuent > 0)
                                            //////////{
                                            //////////    item.DescuentoPctSpecified = true;
                                            //////////    item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            //////////    if (sumaDescuentos == true) // Si suma los descuentos
                                            //////////    {
                                            //////////        item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                            //////////        item.DescuentoPct += descuent;
                                            //////////    }
                                            //////////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            //////////    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            //////////    item.DescuentoMontoSpecified = true;
                                            //////////}
                                            //////////else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            //////////{
                                            //////////    item.DescuentoPctSpecified = true;
                                            //////////    item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            //////////    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                            //////////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            //////////    item.DescuentoPct += descuent;
                                            //////////    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            //////////    item.DescuentoMontoSpecified = true;
                                            //////////}
                                            //////////else
                                            //////////{
                                            //////////    if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN"))
                                            //////////    {
                                            //////////        item.DescuentoPctSpecified = true;
                                            //////////        item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                            //////////        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            //////////        item.DescuentoPct = descuent;
                                            //////////        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            //////////        item.DescuentoMontoSpecified = true;
                                            //////////    }
                                            //////////}


                                            //////////if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN"))
                                            //////////{
                                            //////////    if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            //////////    {
                                            //////////        decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                            //////////        if (resultadoResta > 0)
                                            //////////        {
                                            //////////            item.DescuentoMonto = resultadoResta;
                                            //////////            item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                            //////////        }
                                            //////////    }
                                            //////////}

                                            try
                                            {   // Verifica si hay líneas de Texto
                                                int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                                string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc.ToString());
                                            }
                                            catch (Exception ex)
                                            { }

                                            // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                            montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                            montoCalculado = decimal.Round(montoCalculado, 2);

                                            if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                                item.DescuentoMonto = 0;

                                            //Calculos Totales
                                            String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                            decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                            if (cotizacion == 0)
                                            {
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                    TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                    TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    TotalItemsNoGravados += (precio * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                    TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }
                                            }
                                            else
                                            {
                                                //decimal pre = precio / (decimal)cotizacion;
                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                        //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                        //TotalItemsGravadosIVABasico += item.MontoItem;
                                                        //TotalIVABasico += item.MontoItem * (iva / 100);
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                        //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }
                                            }


                                            /*// Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                            montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                            montoCalculado = decimal.Round(montoCalculado, 2);
                                            if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                                if ((item.MontoItem - montoCalculado <= 1) || (montoCalculado - item.MontoItem <= 1)) // Si la diferencia es de centésimos
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

                                            if (descEmpresa.ToString().Equals("TRIAL"))
                                                item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                            if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                            {
                                                // Error con el porcentaje de descuento
                                                item.DescuentoPct = 0;
                                                item.PrecioUnitarioSpecified = true;
                                            }

                                            item.IndFact = Item_Det_FactIndFact.Item10; // Indicador de facturacion para exportaciones

                                            // Verificacion para cuando son Donaciones
                                            if (item.MontoItem <= 0)
                                                item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                            item.Cantidad = Math.Round(item.Cantidad, 3);

                                            detalle[cont] = item;

                                            montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                            if (!listaIndFact.Contains(item.IndFact))
                                                listaIndFact.Add(item.IndFact);

                                            if (item.IndFact == Item_Det_FactIndFact.Item1 || item.IndFact == Item_Det_FactIndFact.Item10)
                                                montoDscRcgGlobalIVAEXE += item.MontoItem;
                                            else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                montoDscRcgGlobalIVAMIN += item.MontoItem;
                                            else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                montoDscRcgGlobalIVA += item.MontoItem;
                                            else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                            cont++;
                                            oRSMyTable3.MoveNext();
                                        }
                                    }

                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0; decimal descuent = 0;
                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.IndFact = Item_Det_FactIndFact.Item10; // Indicador de facturacion para exportaciones
                                                item.Cantidad = Math.Round(item.Cantidad, 3);
                                                detalle[cont] = item;

                                                montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                if (item.IndFact == Item_Det_FactIndFact.Item1 || item.IndFact == Item_Det_FactIndFact.Item10)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    factura.Detalle = detalle;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                catch (Exception e)
                                {
                                    SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                                }

                                // Totales
                                try
                                {
                                    Totales totales = new Totales();

                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                    totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                    if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                        totales.TpoMoneda = TipMonType.USD; // Dolares
                                    else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                        totales.TpoMoneda = TipMonType.EUR; // Euros
                                    else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                        totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                    else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                        totales.TpoMoneda = TipMonType.GBP; // Libra
                                    else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                        totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                    else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                        totales.TpoMoneda = TipMonType.JPY; // Yen
                                    else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                        totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                    totales.CantLinDet = cantLineasDocumento.ToString();
                                    totales.TpoCambio = getDecimal(cotizacion.ToString());
                                    totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                    if (totales.TpoCambio != 0)
                                    {
                                        totales.TpoCambioSpecified = true;
                                    }
                                    else
                                    {
                                        totales.TpoCambioSpecified = false;
                                    }

                                    if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                        descuent = 0;

                                    totales.MntNoGrv = TotalItemsNoGravados;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                    if (descuent > 0) // Si tiene descuento global
                                    {
                                        totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                        totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                    }

                                    totales.MntNoGrvSpecified = false;

                                    if (descuent > 0)
                                    {
                                        totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                    }
                                    else
                                    {
                                        totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                        totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                    }

                                    if (totales.MntNetoIvaTasaMin == 0)
                                    {
                                        totales.MntNetoIvaTasaMinSpecified = false;
                                    }
                                    else
                                    {
                                        totales.MntNetoIvaTasaMinSpecified = true;
                                    }

                                    if (descuent > 0)
                                    {
                                        totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                        totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                        totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                    }

                                    if (totales.MntNetoIVATasaBasica == 0)
                                    {
                                        totales.MntNetoIVATasaBasicaSpecified = false;
                                    }
                                    else
                                    {
                                        totales.MntNetoIVATasaBasicaSpecified = true;
                                    }

                                    if (descuent > 0)
                                    {
                                        totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                        totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                    }
                                    else
                                    {
                                        totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                        totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                    }

                                    if (totales.MntNetoIVAOtra == 0)
                                    {
                                        totales.MntNetoIVAOtraSpecified = false;
                                    }
                                    else
                                    {
                                        totales.MntNetoIVAOtraSpecified = true;
                                    }

                                    if (descuent > 0)
                                    {
                                        totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }
                                    else
                                    {
                                        totales.MntIVATasaMin = TotalIVAMinimo;
                                        totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                    }

                                    if (totales.MntIVATasaMin == 0)
                                    {
                                        totales.MntIVATasaMinSpecified = false;
                                    }
                                    else
                                    {
                                        totales.MntIVATasaMinSpecified = true;
                                    }

                                    if (descuent > 0)
                                    {
                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                        {
                                            totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                            totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                        }
                                        else
                                        {
                                            decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")))// Si el documento es en Pesos
                                                montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                            totales.MntIVATasaBasica = montoImpuestoDocumento;
                                            totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                        }
                                    }
                                    else
                                    {
                                        totales.MntIVATasaBasica = TotalIVABasico;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }

                                    if (totales.MntIVATasaBasica == 0)
                                    {
                                        totales.MntIVATasaBasicaSpecified = false;
                                    }
                                    else
                                    {
                                        totales.MntIVATasaBasicaSpecified = true;
                                    }

                                    if (descuent > 0)
                                    {
                                        totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                        totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                    }
                                    else
                                    {
                                        totales.MntIVAOtra = TotalIVAOtra;
                                        totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                    }

                                    if (totales.MntIVAOtra == 0)
                                    {
                                        totales.MntIVAOtraSpecified = false;
                                    }
                                    else
                                    {
                                        totales.MntIVAOtraSpecified = true;
                                    }

                                    //totales.MntTotal = TotalItemsGravadosIVAOtra + TotalItemsGravadosIVABasico + TotalItemsGravadosIVAMinimo + TotalItemsNoGravados + TotalIVAOtra + TotalIVABasico + TotalIVAMinimo; // TotalIVAOtra + TotalIVABasico + TotalIVAMinimo +
                                    totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                    //totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 2);

                                    // NUEVO FORMATO DGI
                                    if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                    {
                                        totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                        totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                    }
                                    else
                                    {
                                        totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                        totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                    }

                                    if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                    {
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - totales.MntTotal;
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                                totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        }
                                    }

                                    ////if (montoTotalRetenciones != 0)
                                    ////    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                    if (totales.TpoMoneda == TipMonType.USD)
                                    {
                                        if (totales.TpoCambio < 2) // 
                                        {
                                            // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                            totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                            totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                            if (totales.TpoCambio != 0)
                                                totales.TpoCambioSpecified = true;
                                            else
                                                totales.TpoCambioSpecified = false;
                                        }
                                    }
                                    else if (totales.TpoMoneda == TipMonType.UYU)
                                    {
                                        totales.TpoCambio = 1;
                                        totales.TpoCambioSpecified = true;
                                    }

                                    totales.MntExpoyAsim = totales.MntTotal;
                                    /*if (totales.MntTotal != 0)
                                        totales.MntExpoyAsim = totales.MntTotal;
                                    else
                                        totales.MntExpoyAsim = montoTotalItemsSubTotal;*/

                                    // REDONDEOS
                                    totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                    totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                    totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                    totales.MntExpoyAsimSpecified = true;
                                    totales.MontoNF = 0;
                                    totales.MontoNFSpecified = true;

                                    // VALIDACION MNTPAGAR
                                    try
                                    {
                                        decimal diferenciaError = totales.MntPagar - (totales.MntTotal + totales.MntTotRetenido + totales.MontoNF);
                                        if (diferenciaError != 0 && diferenciaError < 1 && diferenciaError > -1)
                                        {
                                            if (diferenciaError <= Convert.ToDecimal(0.01) && diferenciaError >= Convert.ToDecimal(-0.01))
                                            {
                                                if (totales.MntTotal == totales.MntExpoyAsim && totales.MontoNF == 0) // Si el Monto Total = al Monto Exportacion y no tiene redondeo
                                                    totales.MntPagar = totales.MntTotal;
                                            }
                                            else
                                            {
                                                if (totales.MntNoGrv != 0)// Si tiene monto no gravado
                                                {
                                                    if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                    {
                                                        totales.MntNoGrv = totales.MntNoGrv - diferenciaError;
                                                        totales.MntTotal = totales.MntTotal - diferenciaError;
                                                    }
                                                    else
                                                    {
                                                        totales.MntNoGrv = totales.MntNoGrv + diferenciaError;
                                                        totales.MntTotal = totales.MntTotal + diferenciaError;
                                                    }
                                                }
                                                else if (totales.MntExpoyAsim != 0)// Si tiene monto no gravado
                                                {
                                                    if (diferenciaError > 0) // Si el Mnt a pagar es menor a la suma
                                                    {
                                                        totales.MntExpoyAsim = totales.MntExpoyAsim - diferenciaError;
                                                        totales.MntTotal = totales.MntTotal - diferenciaError;
                                                    }
                                                    else
                                                    {
                                                        totales.MntExpoyAsim = totales.MntExpoyAsim + diferenciaError;
                                                        totales.MntTotal = totales.MntTotal + diferenciaError;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    { }
                                    // FINAL VALIDACION

                                    encabezado.Totales = totales;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                catch (Exception ex)
                                {
                                    SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                                }

                                factura.Encabezado = encabezado;

                                //Descuentos y Recargos
                                ////try
                                ////{
                                ////    DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                                ////    DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                                ////    descuento.NroLinDR = "1";
                                ////    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                ////    descuento.TpoDR = TipoDRType.Item2;
                                ////    descuento.TpoDRSpecified = true;
                                ////    decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                ////    descuento.ValorDR = Math.Round(valorDR, 2);
                                ////    if (descuento.ValorDR > 0)
                                ////    {
                                ////        descuentosRecargos[0] = descuento;
                                ////        factura.DscRcgGlobal = descuentosRecargos;
                                ////    }
                                ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                ////}
                                ////catch (Exception e)
                                ////{ }
                                try
                                {

                                    if (!esNuevaVersionDGI || sumaDescuentos == false)
                                    {
                                        // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                        int nroLineaDR = 1;

                                        if (listaIndFact.Count != 0)
                                        {
                                            decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                            if (valorDR > 0)
                                            {
                                                DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                                foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                                {
                                                    DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                        montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                    decimal montoDscRcgGlobal = 0;

                                                    if (itemIndFac == Item_Det_FactIndFact.Item10)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                    else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                        montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                    if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                        montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                    else
                                                    {
                                                        montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                        montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);
                                                    }

                                                    descuento.NroLinDR = nroLineaDR.ToString();
                                                    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                    descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                    descuento.TpoDRSpecified = true;
                                                    descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                    descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                    DscRcgGlobalDRG_ItemIndFactDR dscIndFactManual = new DscRcgGlobalDRG_ItemIndFactDR();
                                                    dscIndFactManual = DscRcgGlobalDRG_ItemIndFactDR.Item10;
                                                    descuento.IndFactDR = dscIndFactManual; //(DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                    descuento.IndFactDRSpecified = true;

                                                    if (descuento.ValorDR > 0)
                                                    {
                                                        descuentosRecargos[nroLineaDR - 1] = descuento;
                                                        factura.DscRcgGlobal = descuentosRecargos;
                                                        nroLineaDR++;
                                                    }
                                                }
                                            }
                                        }

                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                }
                                catch (Exception e)
                                { }

                                // Armo el adenda
                                sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "<br>";// Vendedor 
                                if (!descEmpresa.ToString().Equals("DREG"))
                                    sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "<br>"; // ObservacionesFijas 
                                if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL"))
                                    sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                                else if (descEmpresa.ToString().Equals("TRIAL"))
                                {
                                    sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ".<br>"; // Forma de Pago 
                                    sicfeAdenda += "Contribuyente amparado a la Ley 15.921" + "<br>"; //ASPL. 2019-06-18, Nueva leyenda.
                                }
                                if (descEmpresa.ToString().Equals("DREG")) // Si es Dreghal
                                {
                                    // Armo el adenda desde 0

                                    int numeroPedido = 0; string monedaLetras = "Pesos Uruguayos"; string ordenCompra = "";
                                    try
                                    {
                                        SAPbobsCOM.Recordset oRSMyTableAdenda = ObtenerDatosPreviosDocumento(codigoFactura, pFormFactura);
                                        if (oRSMyTableAdenda != null)
                                        {
                                            while (!oRSMyTableAdenda.EoF)
                                            {
                                                numeroPedido = oRSMyTableAdenda.Fields.Item("Num_Pedido").Value;
                                                oRSMyTableAdenda.MoveNext();
                                            }
                                        }

                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableAdenda);
                                        oRSMyTableAdenda = null;

                                        if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                            monedaLetras = "Dólares Americanos";
                                        else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                            monedaLetras = "Euros";
                                        else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                            monedaLetras = "Pesos Chilenos";

                                        try
                                        {
                                            ordenCompra = oRSMyTable.Fields.Item("U_ORDEN_COMPRA").Value;
                                        }
                                        catch (Exception ex)
                                        { }
                                    }
                                    catch (Exception ex)
                                    { }

                                    //sicfeAdenda = "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                                    sicfeAdenda += "Forma.de pago: " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "\r\n"; // Forma de Pago 
                                    sicfeAdenda += "Número de pedido: " + numeroPedido + "\r\n";
                                    sicfeAdenda += "Usuario: " + obtenerUsuarioCreadorDocumento(idUserDoc) + "\r\n"; // Usuario que creo el documento 
                                    sicfeAdenda += "Orden de compra: " + ordenCompra.ToString() + "\r\n";
                                    sicfeAdenda += "Moneda: " + monedaLetras.ToString() + "\r\n";
                                    sicfeAdenda += "Forma de envío: " + obtenerFormaEnvio(oRSMyTable.Fields.Item("TrnspCode").Value) + "\r\n"; // Forma de Envio 
                                    sicfeAdenda += "Vendedor: " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                                    sicfeAdenda += "Comentarios: " + oRSMyTable.Fields.Item("Header").Value + "\r\n"; // Comentarios Iniciales
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                                {
                                    sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                                }
                                else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                                {
                                    sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                    sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                    sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                                }
                                else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                                {
                                    sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                    sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                }
                                else if (descEmpresa.ToString().Equals("FRUTI"))
                                {
                                    sicfeAdenda = "Proforma: " + oRSMyTable.Fields.Item("U_PROFORMA").Value;
                                    sicfeAdenda = "Transporte: " + obtenerFormaEnvio(oRSMyTable.Fields.Item("TrnspCode").Value) + "\r\n"; // Forma de Envio 
                                    sicfeAdenda += "Puerto/Lugar de Embarque: " + obtenerPuerto(oRSMyTable.Fields.Item("U_PUERTOEMBARQUE").Value) + "\r\n"; // Origen 
                                    sicfeAdenda += "Puerto/Lugar de Destino:  " + obtenerPuerto(oRSMyTable.Fields.Item("U_PUERTODESTINO").Value) + "\r\n"; // Destino 
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "PAYMENT TRANSFER TO: " + oRSMyTable.Fields.Item("Header").Value + "\r\n"; // Comentarios Iniciales
                                }
                                else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                                {
                                    if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                    {
                                        sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                        sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                        sicfeAdenda += "Nombre : ______________________________________ <br>";
                                        sicfeAdenda += "C.I.: _________________________________________ <br>";
                                        sicfeAdenda += "Firma: ________________________________________ <br>";
                                        sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                    }
                                    else
                                    {
                                        //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                        //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                        sicfeAdenda += "Cambio 30 días <br>";
                                        sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                    sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                                else if (descEmpresa.ToString().Equals("ETARE"))
                                    sicfeAdenda += "Saldo: UYU " + saldoCliente + "<br>";
                                else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                    sicfeAdenda += obtenerRemarks(13) + "\r\n";
                                else if (descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("WELLS")) //ASPL - 2019.Ene.21 - DGI Resolución Nº 231/2019, empresas de Zona Franca deberán indicar la leyenda.
                                    sicfeAdenda += "Contribuyente amparado a la Ley N° 15.921";

                                if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                                {
                                    // Entonces es Credito
                                    esContado = false;
                                    if (descEmpresa.ToString().Equals("TENTA")) // Si es La Tentacion
                                    {
                                        sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                        sicfeAdenda += "\r\n";
                                        sicfeAdenda += "Nombre:\r\n";
                                        sicfeAdenda += "\r\n";
                                        sicfeAdenda += "C.I:\r\n";
                                        sicfeAdenda += "\r\n";
                                        sicfeAdenda += "Firma:\r\n";
                                    }
                                }
                                else
                                    esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                                XmlSerializer ser = new XmlSerializer(typeof(eFact));
                                using (var stream = new MemoryStream())
                                {
                                    ser.Serialize(stream, factura);
                                    stream.Flush();
                                    stream.Seek(0, SeekOrigin.Begin);
                                    xml.Load(stream);
                                    result = xml.InnerXml;
                                }

                                //if (guardaLog == true)
                                //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                                oRSMyTable.MoveNext();
                            }
                            catch (Exception e)
                            {
                                if (guardaLog == true)
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                                SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                            }
                        }
                    }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                    oRSMyTable = null;
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                    oRSMyTable3 = null;
                }
                catch (Exception e)
                {
                    if (guardaLog == true)
                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                    SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
                }
            }
            return result;
        }

        public String GenerarXmlFacturaExportacionNuevo(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                int cantLineasDocumento = 0;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                decimal TotalItemsNoGravados = 0;
                double recargoCliente = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = ""; string textoAdendaTrigue = "";
                int idUserDoc = 0; decimal cantPiezas = 0;
                decimal montoDscRcgGlobalIVA = 0; decimal montoDscRcgGlobalIVAMIN = 0; decimal montoDscRcgGlobalIVAEXE = 0; decimal montoDscRcgGlobalIVAOTRO = 0;
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                clsObjDocumento objDoc = new clsObjDocumento();
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            eFact factura = new eFact();

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                cantLineasDocumento = objDoc.lineas.Count; // Cantidad de líneas del documento
                                getIdSucursal(objDoc.UserSign); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }

                                oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry, pFormFactura); // Obtengo las Retenciones del documento
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "eFact_Exp";
                                idDoc.TipoCFE = IdDoc_FactTipoCFE.Item121;

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                idDoc.FchVencSpecified = false;
                                //if (idDoc.FchVenc == null)
                                //{
                                //    idDoc.FchVencSpecified = false;
                                //}
                                //else
                                //{
                                //    idDoc.FchVencSpecified = true;
                                //}
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;

                                if (descEmpresa.ToString().Equals("RURAL")) //ASPL - 2020.04.27 Nuevo layout de SCIFE.
                                {
                                    string strCondPago = obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value); //2020-04-27 Condiciones de pago sin criterio, Almacen Rural.
                                    string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);

                                    if (horaDocumento.ToString().Length == 4)
                                        horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                    else if (horaDocumento.ToString().Length == 3)
                                        horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);

                                    idDoc.InfoAdicionalDoc = horaDocumento + ";" + strCondPago;
                                }

                                idDoc.MntBrutoSpecified = false;

                                //try
                                //{
                                //    // Modalidad de Venta. 1- Regimen General. 2- Consignacion. 3- Precio Revisable. 4- Bienes Propios a exclaves aduaneros
                                //    idDoc.ModVenta = 1;
                                //    idDoc.ModVentaSpecified = true;

                                //    // Via de Transporte. 1- Maritimo. 2- Aereo. 3- Terrestre. 8- N/A. 9- Otro
                                //    idDoc.ViaTransp = 1;
                                //}
                                //catch (Exception ex)
                                //{ }

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                }
                                else
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                }

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada
                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                        }

                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        /*if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                            receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        else*/
                                        receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value;
                                        if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";

                                        if (descEmpresa.Equals("TRIGE") || descEmpresa.Equals("POCHA"))
                                            receptor.LugarDestEnt = oRSMyTable2.Fields.Item("GlblLocNum").Value;
                                        else if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + objDoc.DireccionEntrega;
                                        else
                                            receptor.LugarDestEnt = "";

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable2.Fields.Item("AddID").Value; // Aca se guarda el RUC del documento
                                            bool rucExtranjero = true;

                                            if (String.IsNullOrEmpty(rucDocumento))
                                            {
                                                rucExtranjero = false;
                                                rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            }

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                //encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                //tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (rucExtranjero == false)
                                            {
                                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                                {
                                                    if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                    {
                                                        receptor.TipoDocRecep = DocType.Item4;
                                                        receptor.DocRecep = "99";
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);
                                if (receptor.DocRecep.ToString().Length > 20)
                                    receptor.DocRecep = receptor.DocRecep.ToString().Substring(0, 20);

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGO RECPETOR " + e.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        Item_Det_Fact item = new Item_Det_Fact();
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = lineaRec.DescripcionDocumento;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        //decimal precio = lineaRec.Precio;
                                        item.DescuentoPct = lineaRec.DescuentoPorcentaje;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = lineaRec.ItemCode;
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = lineaRec.VisOrder.ToString() + "- " + item.DscItem + "-" + lineaRec.U_Marca + "-" + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("MILDA"))
                                                {
                                                    try
                                                    {
                                                        item.NomItem = item.NomItem + " " + lineaRec.U_Marca + " " + lineaRec.U_Campana + " " + lineaRec.U_Ubicacion;
                                                        if (lineaRec.U_Inicio.Year > 2000) // Si tiene una Fecha correcta
                                                            item.NomItem = item.NomItem + " " + lineaRec.U_Inicio.ToShortDateString() + "-" + lineaRec.U_Fin.ToShortDateString();
                                                    }
                                                    catch (Exception exM)
                                                    { }
                                                }
                                                else if (descEmpresa.ToString().Equals("TECHM"))
                                                    item.UniMed = "Uni";

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = lineaRec.FreeTxt;
                                                else if (descEmpresa.ToString().Equals("RURAL"))
                                                {
                                                    item.DscItem = lineaRec.LoteBatchNum;
                                                    item.UniMed = lineaRec.UnidadMedida; //ASPL - 2019.11.04, Especificacion de unidad de medida.
                                                }
                                                else
                                                    item.DscItem = "";
                                            }

                                            string codigoEan = ""; string tipoCodigo = "EAN"; int cantLineasCodigo = 1;

                                            if (descEmpresa.ToString().Equals("POCHA"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras)) //ASPL - 2020.03.12 - Cambio de campo
                                                {
                                                    tipoCodigo = "EAN13";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++;  //ASPL - 2020.03.12 - Cambio de campo por CodigoBarras, si tiene un Código de Rondanet
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("TRIGE"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString(); // lineaRec.CantidadCajas.ToString(); 
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("ENGRW"))
                                            {
                                                item.NomItem = lineaRec.LoteBatchNum;
                                                item.DscItem = lineaRec.U_FeDescripcion;
                                            }
                                            else if (descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string dscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                if (dscItem.Length == 0)
                                                    dscItem = "[000CS]";
                                                else if (dscItem.Length == 1)
                                                    dscItem = "[00" + dscItem + "CS]";
                                                else if (dscItem.Length == 2)
                                                    dscItem = "[0" + dscItem + "CS]";
                                                else if (dscItem.Length == 3)
                                                    dscItem = "[" + dscItem + "CS]";

                                                item.DscItem = dscItem.ToString(); // lineaRec.CantidadCajas.ToString(); 
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }

                                                //if (cantLineasCodigo > 1)
                                                //{
                                                if (!String.IsNullOrEmpty(item.UniMed))
                                                {
                                                    if (item.UniMed.Contains("K") || item.UniMed.Contains("k"))
                                                        item.UniMed = "KGM"; // Kilogramo
                                                    else if (item.UniMed.Contains("Ca") || item.UniMed.Contains("ca") || item.UniMed.Contains("CA"))
                                                        item.UniMed = "CS"; // Caja
                                                    else if (item.UniMed.Contains("litro") || item.UniMed.Contains("Litro"))
                                                        item.UniMed = "LTR"; // Litro
                                                    else
                                                        item.UniMed = "EA"; // Unidad
                                                }
                                                //}
                                            }

                                            try
                                            {
                                                Item_Det_FactCodItem[] itemDetCodeArray = new Item_Det_FactCodItem[cantLineasCodigo];
                                                Item_Det_FactCodItem itemDetCode = new Item_Det_FactCodItem();
                                                itemDetCode.TpoCod = "INT1";
                                                itemDetCode.Cod = lineaRec.ItemCode;
                                                itemDetCodeArray[0] = itemDetCode;

                                                if (cantLineasCodigo > 1)
                                                {
                                                    itemDetCode = new Item_Det_FactCodItem();
                                                    itemDetCode.TpoCod = tipoCodigo;
                                                    itemDetCode.Cod = codigoEan;
                                                    itemDetCodeArray[1] = itemDetCode;
                                                }

                                                item.CodItem = itemDetCodeArray;
                                                //item.DscItem = "";
                                            }
                                            catch (Exception ex)
                                            { }

                                            if (descEmpresa.ToString().Equals("GENIA"))
                                            {
                                                try
                                                {   // Verifica si hay líneas de Texto
                                                    string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                                    item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), lineaRec.LineNum.ToString(), objTypeDoc.ToString());
                                                }
                                                catch (Exception ex)
                                                { }
                                            }

                                            if (item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);
                                        }
                                        catch (Exception ex)
                                        { }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = lineaRec.TotalIVA; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!lineaRec.MonedaLinea.Equals(moneda) && !String.IsNullOrEmpty(lineaRec.MonedaLinea.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (lineaRec.TipoCambioLinea <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                lineaRec.TipoCambioLinea = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (lineaRec.MonedaLinea.ToString().Equals("USD") || lineaRec.MonedaLinea.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni * lineaRec.TipoCambioLinea;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (objDoc.DescuentoDocPorcentaje == 0 || (descEmpresa.ToString().Equals("BOSCH") && objDoc.DescuentoDocPorcentaje != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = lineaRec.TotalLinea; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((lineaRec.MonedaLinea.ToString().Equals("UYU") || lineaRec.MonedaLinea.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni / lineaRec.TipoCambioLinea;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLinea;
                                                else
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLineaME; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = lineaRec.CantidadInventario;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = lineaRec.TotalLinea; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = lineaRec.TotalLinea; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2, MidpointRounding.ToEven);

                                            if (moneda.ToString().Equals(lineaRec.MonedaLinea)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3, MidpointRounding.ToEven);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3, MidpointRounding.ToEven);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3, MidpointRounding.ToEven);
                                        }

                                        if (objDoc.DescuentoDocPorcentaje > 0)
                                        {
                                            if (sumaDescuentos == true) // Si suma los descuentos
                                            {
                                                //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                item.MontoItem = (item.MontoItem * (100 - objDoc.DescuentoDocPorcentaje)) / 100;
                                                item.MontoItem = decimal.Round(item.MontoItem, 2);
                                            }
                                        }
                                        if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje == 0)
                                        {
                                            item.DescuentoPctSpecified = true;
                                            /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoMontoSpecified = true;*/

                                            // 3 lineas nuevas
                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else if (item.DescuentoPct == 0 && objDoc.DescuentoDocPorcentaje == 0)
                                        {
                                            item.DescuentoPctSpecified = false;
                                            item.DescuentoMontoSpecified = false;
                                        }
                                        else if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje > 0)
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            if (sumaDescuentos == true) // Si suma los descuentos
                                            {
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                            }
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else if (item.DescuentoPct != 0 && (objDoc.DescuentoDocPorcentaje < 1 && objDoc.DescuentoDocPorcentaje > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                        {
                                            item.DescuentoPctSpecified = true;
                                            item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                            item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                            item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                            item.DescuentoMontoSpecified = true;
                                        }
                                        else
                                        {
                                            if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN"))
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * objDoc.DescuentoDocPorcentaje) / 100) * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = objDoc.DescuentoDocPorcentaje;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN"))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                if (resultadoResta > 0)
                                                {
                                                    item.DescuentoMonto = resultadoResta;
                                                    item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                                }
                                            }
                                        }

                                        ////try
                                        ////{   // Verifica si hay líneas de Texto
                                        ////    int nroLinea = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////    string objTypeDoc = oRSMyTable.Fields.Item("ObjType").Value;
                                        ////    item.DscItem = obtenerLineaTextoFitco(codigoDocEntry.ToString(), nroLinea.ToString(), objTypeDoc.ToString());
                                        ////}
                                        ////catch (Exception ex)
                                        ////{ }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        //Calculos Totales
                                        decimal iva = ObtenerImpuesto(lineaRec.CodigoImpuesto); // Obtengo el porcentaje de IVA
                                        decimal precio = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || lineaRec.CodigoImpuesto.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            if (esNuevaVersionDGI)
                                                montoDescUni = item.DescuentoMonto / item.Cantidad;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    //TotalIVAMinimo += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                    TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || lineaRec.CodigoImpuesto.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVABasico += item.MontoItem;
                                                    //TotalIVABasico += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN"))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || lineaRec.CodigoImpuesto.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                    //TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    //TotalIVAOtra += item.MontoItem * (iva / 100);
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }


                                        /*// Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1) || (montoCalculado - item.MontoItem <= 1)) // Si la diferencia es de centésimos
                                                item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado*/

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        item.IndFact = Item_Det_FactIndFact.Item10; // Indicador de facturacion para exportaciones

                                        // Verificacion para cuando son Donaciones
                                        if (item.MontoItem <= 0)
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion
                                        item.Cantidad = Math.Round(item.Cantidad, 3);

                                        try
                                        {
                                            if (descEmpresa.Equals("TRIGE"))
                                                textoAdendaTrigue += lineaRec.U_NumeroNCM + ";" + lineaRec.Volumen.ToString() + ";" + lineaRec.U_KgsBrutos.ToString() + ";" + lineaRec.U_NroDeclaracion.ToString() + ";" + item.MontoItem.ToString() + "<br>";
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al guardar texto Exp Trigueña", ex.Message.ToString()); }

                                        detalle[cont] = item;

                                        montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        if (item.IndFact == Item_Det_FactIndFact.Item1 || item.IndFact == Item_Det_FactIndFact.Item10)
                                            montoDscRcgGlobalIVAEXE += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                            montoDscRcgGlobalIVAMIN += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                            montoDscRcgGlobalIVA += item.MontoItem;
                                        else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                            montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                        cont++;
                                    }
                                }

                                try
                                {
                                    if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                    {
                                        while (!oRSMyTableGastosAdicionales.EoF)
                                        {
                                            // Agrego el item de redondeo
                                            Item_Det_Fact item = new Item_Det_Fact();
                                            int nroLinea = cont + 1;
                                            item.NroLinDet = nroLinea.ToString();
                                            item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                            item.DscItem = "";
                                            item.DescuentoMontoSpecified = false;
                                            item.DescuentoPctSpecified = false;
                                            item.IndAgenteRespSpecified = false;
                                            item.RecargoMntSpecified = false;
                                            item.RecargoPctSpecified = false;

                                            decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                            if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                            item.MontoItem = montoTotalLinea;
                                            item.Cantidad = 1;
                                            item.PrecioUnitario = item.MontoItem;
                                            item.PrecioUnitarioSpecified = true;
                                            item.UniMed = "N/A";

                                            decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                            if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                            decimal montoDescUni = 0; decimal porcDescUni = 0; decimal descuent = 0;
                                            String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                            String imp = "IVA_EXE";
                                            if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                imp = impGasto;

                                            decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                            if (montoImpuestos == 0)
                                            { // Si no tiene Impuestos entonces lo pongo como Exento
                                                imp = "IVA_EXE";
                                                iva = 0;
                                            }

                                            if (esNuevaVersionDGI)
                                                montoDescUni = item.DescuentoMonto / item.Cantidad;
                                            decimal montoIVALineaArticulo = 0;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                    TotalIVAMinimo += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                    TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVABasico += item.MontoItem;
                                                    TotalIVABasico += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN"))
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                        TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                }
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    TotalItemsNoGravados += item.MontoItem;
                                                else
                                                    TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                {
                                                    montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                    if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                        montoIVALineaArticulo = montoImpuestos;
                                                    TotalItemsGravadosIVAOtra += item.MontoItem;
                                                    TotalIVAOtra += montoIVALineaArticulo;
                                                }
                                                else
                                                {
                                                    TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                    TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                }
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }

                                            item.IndFact = Item_Det_FactIndFact.Item10; // Indicador de facturacion para exportaciones
                                            item.Cantidad = Math.Round(item.Cantidad, 3);
                                            detalle[cont] = item;

                                            montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                            if (!listaIndFact.Contains(item.IndFact))
                                                listaIndFact.Add(item.IndFact);

                                            if (item.IndFact == Item_Det_FactIndFact.Item1 || item.IndFact == Item_Det_FactIndFact.Item10)
                                                montoDscRcgGlobalIVAEXE += item.MontoItem;
                                            else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                montoDscRcgGlobalIVAMIN += item.MontoItem;
                                            else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                montoDscRcgGlobalIVA += item.MontoItem;
                                            else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                montoDscRcgGlobalIVAOTRO += item.MontoItem;

                                            cont++;

                                            oRSMyTableGastosAdicionales.MoveNext();
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    if (guardaLog == true)
                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                totales.MntNoGrvSpecified = false;

                                if (descuent > 0)
                                {
                                    totales.MntNetoIvaTasaMin = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMin = TotalItemsGravadosIVAMinimo;
                                    totales.MntNetoIvaTasaMin = decimal.Round(totales.MntNetoIvaTasaMin, 2);
                                }

                                if (totales.MntNetoIvaTasaMin == 0)
                                {
                                    totales.MntNetoIvaTasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIvaTasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVATasaBasica = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasica = TotalItemsGravadosIVABasico;
                                    totales.MntNetoIVATasaBasica = decimal.Round(totales.MntNetoIVATasaBasica, 2);
                                }

                                if (totales.MntNetoIVATasaBasica == 0)
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntNetoIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntNetoIVAOtra = TotalItemsGravadosIVAOtra;
                                    totales.MntNetoIVAOtra = decimal.Round(totales.MntNetoIVAOtra, 2);
                                }

                                if (totales.MntNetoIVAOtra == 0)
                                {
                                    totales.MntNetoIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntNetoIVAOtraSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntIVATasaMin = (TotalIVAMinimo * (100 - descuent)) / 100;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }
                                else
                                {
                                    totales.MntIVATasaMin = TotalIVAMinimo;
                                    totales.MntIVATasaMin = decimal.Round(totales.MntIVATasaMin, 2);
                                }

                                if (totales.MntIVATasaMin == 0)
                                {
                                    totales.MntIVATasaMinSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaMinSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                    {
                                        totales.MntIVATasaBasica = (TotalIVABasico * (100 - descuent)) / 100;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                    else
                                    {
                                        decimal montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSumFC").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")))// Si el documento es en Pesos
                                            montoImpuestoDocumento = (decimal)oRSMyTable.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        totales.MntIVATasaBasica = montoImpuestoDocumento;
                                        totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                    }
                                }
                                else
                                {
                                    totales.MntIVATasaBasica = TotalIVABasico;
                                    totales.MntIVATasaBasica = decimal.Round(totales.MntIVATasaBasica, 2);
                                }

                                if (totales.MntIVATasaBasica == 0)
                                {
                                    totales.MntIVATasaBasicaSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVATasaBasicaSpecified = true;
                                }

                                if (descuent > 0)
                                {
                                    totales.MntIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }
                                else
                                {
                                    totales.MntIVAOtra = TotalIVAOtra;
                                    totales.MntIVAOtra = decimal.Round(totales.MntIVAOtra, 2);
                                }

                                if (totales.MntIVAOtra == 0)
                                {
                                    totales.MntIVAOtraSpecified = false;
                                }
                                else
                                {
                                    totales.MntIVAOtraSpecified = true;
                                }

                                //totales.MntTotal = TotalItemsGravadosIVAOtra + TotalItemsGravadosIVABasico + TotalItemsGravadosIVAMinimo + TotalItemsNoGravados + TotalIVAOtra + TotalIVABasico + TotalIVAMinimo; // TotalIVAOtra + TotalIVABasico + TotalIVAMinimo +
                                totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv; // + redondeoDocumento
                                //totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);

                                // NUEVO FORMATO DGI
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        decimal diferenciaDoc = totales.MntPagar - totales.MntTotal;
                                        if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                    }
                                }

                                ////if (montoTotalRetenciones != 0)
                                ////    totales.MntPagar = totales.MntTotal + montoTotalRetenciones;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                totales.MntExpoyAsim = totales.MntTotal;
                                /*if (totales.MntTotal != 0)
                                    totales.MntExpoyAsim = totales.MntTotal;
                                else
                                    totales.MntExpoyAsim = montoTotalItemsSubTotal;*/

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                totales.MntExpoyAsimSpecified = true;
                                totales.MontoNF = 0;
                                totales.MontoNFSpecified = true;
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////    DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////    descuento.NroLinDR = "1";
                            ////    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////    descuento.TpoDR = TipoDRType.Item2;
                            ////    descuento.TpoDRSpecified = true;
                            ////    decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////    descuento.ValorDR = Math.Round(valorDR, 2);
                            ////    if (descuento.ValorDR > 0)
                            ////    {
                            ////        descuentosRecargos[0] = descuento;
                            ////        factura.DscRcgGlobal = descuentosRecargos;
                            ////    }
                            ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////}
                            ////catch (Exception e)
                            ////{ }
                            try
                            {

                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                                if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                                    montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                                decimal montoDscRcgGlobal = 0;

                                                if (itemIndFac == Item_Det_FactIndFact.Item10)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                                else if (itemIndFac == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                                else if (itemIndFac == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                                else if (itemIndFac == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;

                                                if (listaIndFact.Count == 1 && itemIndFac == Item_Det_FactIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                                    montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                                else
                                                {
                                                    montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                                    montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);
                                                }

                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                                DscRcgGlobalDRG_ItemIndFactDR dscIndFactManual = new DscRcgGlobalDRG_ItemIndFactDR();
                                                dscIndFactManual = DscRcgGlobalDRG_ItemIndFactDR.Item10;
                                                descuento.IndFactDR = dscIndFactManual; //(DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            // Armo el adenda
                            if (!descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "<br>";// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "<br>"; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL") && !descEmpresa.ToString().Equals("RURAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                            {
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ".<br>"; // Forma de Pago
                                sicfeAdenda += "Contribuyente amparado a la Ley 15.921" + "<br>"; //ASPL. 2019-06-12, Nueva leyenda.
                            }
                            if (descEmpresa.ToString().Equals("DREG")) // Si es Dreghal
                            {
                                // Armo el adenda desde 0

                                int numeroPedido = 0; string monedaLetras = "Pesos Uruguayos"; string ordenCompra = "";
                                try
                                {
                                    SAPbobsCOM.Recordset oRSMyTableAdenda = ObtenerDatosPreviosDocumento(codigoFactura, pFormFactura);
                                    if (oRSMyTableAdenda != null)
                                    {
                                        while (!oRSMyTableAdenda.EoF)
                                        {
                                            numeroPedido = oRSMyTableAdenda.Fields.Item("Num_Pedido").Value;
                                            oRSMyTableAdenda.MoveNext();
                                        }
                                    }

                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableAdenda);
                                    oRSMyTableAdenda = null;

                                    if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                        monedaLetras = "Dólares Americanos";
                                    else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                        monedaLetras = "Euros";
                                    else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                        monedaLetras = "Pesos Chilenos";

                                    try
                                    {
                                        ordenCompra = oRSMyTable.Fields.Item("U_ORDEN_COMPRA").Value;
                                    }
                                    catch (Exception ex)
                                    { }
                                }
                                catch (Exception ex)
                                { }

                                //sicfeAdenda = "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                                sicfeAdenda += "Forma.de pago: " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "\r\n"; // Forma de Pago 
                                sicfeAdenda += "Número de pedido: " + numeroPedido + "\r\n";
                                sicfeAdenda += "Usuario: " + obtenerUsuarioCreadorDocumento(idUserDoc) + "\r\n"; // Usuario que creo el documento 
                                sicfeAdenda += "Orden de compra: " + ordenCompra.ToString() + "\r\n";
                                sicfeAdenda += "Moneda: " + monedaLetras.ToString() + "\r\n";
                                sicfeAdenda += "Forma de envío: " + obtenerFormaEnvio(oRSMyTable.Fields.Item("TrnspCode").Value) + "\r\n"; // Forma de Envio 
                                sicfeAdenda += "Vendedor: " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                                sicfeAdenda += "Comentarios: " + oRSMyTable.Fields.Item("Header").Value + "\r\n"; // Comentarios Iniciales
                            }
                            else if (descEmpresa.ToString().Equals("RURAL")) // Si es Almacen Rural
                            {
                                sicfeAdenda = "";
                                string strVencimientos = obtenerVencimientos(codigoDocEntry);
                                string strObsCliente = oRSMyTable.Fields.Item("U_Obcli").Value;
                                string strDirEntrega = oRSMyTable.Fields.Item("Address2").Value;
                                string strContacto = oRSMyTable.Fields.Item("U_CONTACTO").Value;
                                string strTelefono = oRSMyTable.Fields.Item("U_TELEFONO").Value;
                                string strResponsable = obtenerCorreoVendedor(oRSMyTable.Fields.Item("SlpCode").Value);
                                string strTransportista = ObtenerViaTransporteDocumentoAlmacenRural(codigoFactura, pFormFactura);
                                string strDocInterno = codigoFactura.ToString();

                                if (!string.IsNullOrEmpty(strVencimientos))
                                    sicfeAdenda += "Vencimientos: " + strVencimientos + "SALTOLINEA"; // Vencimientos - 2019.10.31
                                if (!string.IsNullOrEmpty(strObsCliente))
                                    sicfeAdenda += "Obs. Cliente: " + strObsCliente + "SALTOLINEA"; // Observaciones del Cliente 
                                if (!string.IsNullOrEmpty(strDirEntrega))
                                    sicfeAdenda += "Dir Entrega: " + strDirEntrega + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strContacto))
                                    sicfeAdenda += "Contacto: " + strContacto + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTelefono))
                                    sicfeAdenda += "Telefono: " + strTelefono + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strResponsable))
                                    sicfeAdenda += "Responsable: " + strResponsable + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strTransportista))
                                    sicfeAdenda += "Transportista: " + strTransportista + "SALTOLINEA";
                                if (!string.IsNullOrEmpty(strDocInterno))
                                    sicfeAdenda += "Documento Interno: " + strDocInterno + "SALTOLINEA";

                                if (esContado == false)
                                {
                                    string OrdComp = oRSMyTable.Fields.Item("U_ORDCOMPRA").Value;
                                    if (!string.IsNullOrEmpty(OrdComp))
                                        sicfeAdenda += "Orden Compra: " + OrdComp + "SALTOLINEA";
                                    sicfeAdenda += "Firmo factura dando conformidad a mercadería y precios detallados y abonaré en el plazo y condiciones pactadas. SALTOLINEA";
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. El no pago del precio en el plazo estipulado, generará el máximo interés legal permitido por la ley. SALTOLINEA";
                                    sicfeAdenda += "Firma___________________________________________. SALTOLINEA";
                                    sicfeAdenda += "Aclaración______________________________________. SALTOLINEA";
                                    sicfeAdenda += "C.I______________________Fecha__________________. SALTOLINEA";
                                }
                                else
                                    sicfeAdenda += "El pago de esta factura no cancela adeudos anteriores. SALTOLINEA";
                            }
                            else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                            {
                                sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                            {
                                sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    sicfeAdenda += "Cambio 30 días <br>";
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";
                            else if (descEmpresa.ToString().Equals("TRIGE")) // Si es Trigueña
                            {
                                sicfeAdenda += "Consignar al pie de esta factura: Esta operación de exportación se realiza dentro de las regulaciones dictadas por el Acuerdo de Complementación Económica N°" + objDoc.U_NumeroAcuerdo.ToString() + ".<br>" +
                                "Declaramos bajo juramento que los datos que contiene esta factura son el fiel reflejo de la realidad, que los precios aquí consignados son los corrientes en el mercado de exportación a cualquier país.<br>" +
                                "Sello, firma y aclaración de firma del Exportador.<br>";
                                sicfeAdenda += textoAdendaTrigue;
                            }

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA")) // Si es La Tentacion
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            return result;
        }

        public String GenerarXmlNotaCreditoExportacion(String pFormFactura)
        {
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTable3 = null;
                oRSMyTable3 = ObtenerArticulos(codigoFactura, pFormFactura);
                double descuentoCliente = 0;
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsGravadosIVAMinimo = 0;
                decimal TotalItemsGravadosIVABasico = 0;
                decimal TotalIVAMinimo = 0; decimal TotalIVABasico = 0;
                decimal TotalItemsGravadosIVAOtra = 0; decimal TotalIVAOtra = 0;
                decimal ivaMinimo = 10; decimal ivaBasico = 22; sicfeAdenda = "";
                int idUserDoc = 0; decimal cantPiezas = 0;
                List<Item_Det_FactIndFact> listaIndFact = new List<Item_Det_FactIndFact>();
                bool ocultoDescuento = true;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {

                            eFact factura = new eFact();

                            try
                            {
                                int docEntry = oRSMyTable3.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                                codigoDocEntry = docEntry.ToString();

                                idUserDoc = Convert.ToInt32(oRSMyTable.Fields.Item("UserSign").Value); // Me guardo el Usuario que creo el documento
                                getIdSucursal(idUserDoc); // Actualizo el id de la Sucursal

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("CARTEL ERROR al obtener el DocEntry");
                            }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEFactEncabezado encabezado = new CFEDefTypeEFactEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);

                                IdDoc_Fact idDoc = new IdDoc_Fact();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                tipo = "eFact_Exp";
                                idDoc.TipoCFE = IdDoc_FactTipoCFE.Item122;

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                idDoc.FchVencSpecified = false;
                                //if (idDoc.FchVenc == null)
                                //{
                                //    idDoc.FchVencSpecified = false;
                                //}
                                //else
                                //{
                                //    idDoc.FchVencSpecified = true;
                                //}
                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;

                                idDoc.MntBrutoSpecified = false;

                                //try
                                //{
                                //    // Modalidad de Venta. 1- Regimen General. 2- Consignacion. 3- Precio Revisable. 4- Bienes Propios a exclaves aduaneros
                                //    idDoc.ModVenta = 1;
                                //    idDoc.ModVentaSpecified = true;

                                //    // Via de Transporte. 1- Maritimo. 2- Aereo. 3- Terrestre. 8- N/A. 9- Otro
                                //    idDoc.ViaTransp = 1;
                                //}
                                //catch (Exception ex)
                                //{ }

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item1;
                                }
                                else
                                {
                                    idDoc.FmaPago = IdDoc_FactFmaPago.Item2;
                                }

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Fact receptor = new Receptor_Fact();
                                receptor.DocRecep = oRSMyTable.Fields.Item("NumAtCard").Value;
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace(".", "");
                                receptor.DocRecep = receptor.DocRecep.ToString().Replace("-", "");
                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;
                                receptor.CompraID = codigoFactura;
                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                    codCliente = codCliente.ToString().Replace("?", "");

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "C");
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("TECHM")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                        }

                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (oRSMyTable2.Fields.Item("ZipCode").Value != "")
                                            receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        else
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        if (descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.LugarDestEnt = obtenerDireccionEntregaMavin(codCliente, "C");
                                        else if (descEmpresa.ToString().Equals("ANCAL"))
                                            receptor.LugarDestEnt = obtenerGLNEntrega(codigoDocEntry) + " " + oRSMyTable.Fields.Item("Address2").Value;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;
                                        if (!String.IsNullOrEmpty(receptor.DocRecep))
                                        {
                                            receptor.CodPaisRecep = CodPaisType.UY;

                                            if (receptor.DocRecep.Length == 12)
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (receptor.DocRecep.Length >= 7 && receptor.DocRecep.Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else
                                                receptor.TipoDocRecep = DocType.Item4;
                                        }
                                        else
                                        {
                                            receptor.TipoDocRecep = DocType.Item3;
                                            receptor.CodPaisRecep = CodPaisType.UY;
                                            receptor.DocRecep = "11111111";
                                        }

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            String rucDocumento = oRSMyTable2.Fields.Item("AddID").Value; // Aca se guarda el RUC del documento
                                            bool rucExtranjero = true;

                                            if (String.IsNullOrEmpty(rucDocumento))
                                            {
                                                rucExtranjero = false;
                                                rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            }

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 10)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                //encabezado.IdDoc.TipoCFE = IdDoc_FactTipoCFE.Item111;
                                                //tipo = "eFact";
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.DocRecep = rucDocumento.ToString();

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais

                                            if (rucExtranjero == false)
                                            {
                                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                                {
                                                    if (Char.IsNumber(receptor.DocRecep, 0) == false) // Si el RUT o CI no es numero entonces le manda un 999
                                                    {
                                                        receptor.TipoDocRecep = DocType.Item4;
                                                        receptor.DocRecep = "99";
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                if (!receptor.CodPaisRecep.Equals("UY") && (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY")))
                                    receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                if (receptor.TipoDocRecep == DocType.Item4)
                                {
                                    esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                    if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                        receptor.CodPaisRecep = CodPaisType.AR;
                                    else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                        receptor.CodPaisRecep = CodPaisType.BR;
                                    else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                        receptor.CodPaisRecep = CodPaisType.CL;
                                }
                                else
                                    esDocUruguayo = true; // Indico que el documento es Uruguayo

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 70)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);


                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGO RECPETOR " + e.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;

                                //ASPL. 2019-07-03, SCIFE no permite ocultar el descuento, se cambia valor a false.
                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = false;
                            }
                            catch (Exception e)
                            { }

                            int cantLineasDocumento = oRSMyTable3.RecordCount;
                            try
                            {
                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                Item_Det_Fact[] detalle = new Item_Det_Fact[cantLineasDocumento];
                                int cont = 0;
                                if (oRSMyTable3 != null)
                                {
                                    decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    while (!oRSMyTable3.EoF)
                                    {
                                        String monedaArticulo = ""; decimal tipoCambioArticulo = 0; // Variables usadas por Gonza
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        //Item_Det_Fact item = new Item_Det_Fact();
                                        Item_Det_Fact item = new Item_Det_Fact();
                                        ////int nro = oRSMyTable3.Fields.Item("LineNum").Value;
                                        ////nro++;
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        item.NomItem = oRSMyTable3.Fields.Item("Dscription").Value;
                                        item.IndAgenteRespSpecified = false;
                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("Quantity").Value;
                                        item.UniMed = "N/A";
                                        decimal precio = (decimal)oRSMyTable3.Fields.Item("Price").Value;
                                        item.DescuentoPct = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        item.PrecioUnitarioSpecified = true;

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = oRSMyTable3.Fields.Item("unitMsr").Value; // Agregado para Signature

                                                string uomCode = oRSMyTable3.Fields.Item("UomCode").Value;
                                                if (String.IsNullOrEmpty(unidadMedida) && !String.IsNullOrEmpty(uomCode))
                                                    unidadMedida = uomCode;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("MILDA"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                {
                                                    int nroLinea = oRSMyTable3.Fields.Item("VisOrder").Value;
                                                    nroLinea++;
                                                    item.NomItem = nroLinea + "- " + item.DscItem + "-" + obtenerMarcaArtPortvan(oRSMyTable3.Fields.Item("ItemCode").Value) + "-" + item.NomItem;
                                                }
                                                else if (descEmpresa.ToString().Equals("MILDA"))
                                                {
                                                    try
                                                    {
                                                        item.NomItem = item.NomItem + " " + oRSMyTable3.Fields.Item("U_Marca").Value + " " + oRSMyTable3.Fields.Item("U_Campana").Value + " " + oRSMyTable3.Fields.Item("U_UBICACION").Value;
                                                        DateTime fechaInicioM = oRSMyTable3.Fields.Item("U_Inicio").Value;
                                                        DateTime fechaFinM = oRSMyTable3.Fields.Item("U_Fin").Value;
                                                        if (fechaInicioM.Year > 2000) // Si tiene una Fecha correcta
                                                            item.NomItem = item.NomItem + " " + fechaInicioM.ToShortDateString() + "-" + fechaFinM.ToShortDateString();
                                                    }
                                                    catch (Exception exM)
                                                    { }
                                                }

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = oRSMyTable3.Fields.Item("FreeTxt").Value;
                                                else
                                                    item.DscItem = "";
                                            }

                                            if (item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);

                                            // Obtengo la moneda y el tipo de cambio del artículo.
                                            monedaArticulo = oRSMyTable3.Fields.Item("Currency").Value;
                                            tipoCambioArticulo = (decimal)oRSMyTable3.Fields.Item("Rate").Value;
                                        }
                                        catch (Exception ex)
                                        {
                                            if (!String.IsNullOrEmpty(item.UniMed) && item.UniMed.Length > 4)
                                                item.UniMed = item.UniMed.Substring(0, 4);
                                        }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                        decimal precioUniConDesc = (decimal)oRSMyTable3.Fields.Item("Price").Value; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = (decimal)oRSMyTable3.Fields.Item("DiscPrcnt").Value; // Porcentaje del Descuento
                                        decimal montoTotalLinea = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // Monto del Item
                                        decimal montoImpuestos = (decimal)oRSMyTable3.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (!monedaArticulo.Equals(moneda) && !String.IsNullOrEmpty(monedaArticulo.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (tipoCambioArticulo <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                tipoCambioArticulo = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (monedaArticulo.ToString().Equals("USD") || monedaArticulo.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * tipoCambioArticulo;
                                                montoDescUni = montoDescUni * tipoCambioArticulo;
                                            }
                                            else if ((monedaArticulo.ToString().Equals("UYU") || monedaArticulo.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / tipoCambioArticulo;
                                                montoDescUni = montoDescUni / tipoCambioArticulo;
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("PORTV") && articuloInventario(oRSMyTable3.Fields.Item("ItemCode").Value) == true) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        decimal montoCalculado = (precioUni * item.Cantidad) - (montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (montoTotalLinea != montoCalculado) // Si el Monto de la Linea y el Monto calculado son distintos
                                            if ((montoTotalLinea - montoCalculado <= 1) || (montoCalculado - montoTotalLinea <= 1)) // Si la diferencia es de centésimos
                                                montoTotalLinea = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);

                                        // NUEVA VALIDACION
                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false)) // || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = (decimal)oRSMyTable3.Fields.Item("InvQty").Value;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH")) // Solo si es ANCAL
                                                        imprimeDescuento = false;
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("LineTotal").Value; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = (decimal)oRSMyTable3.Fields.Item("TotalFrgn").Value; // TotalFrgn de la linea

                                                    if (descuent != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            precioUni = (decimal)oRSMyTable3.Fields.Item("PriceBefDi").Value; // Precio sin Descuento
                                                            if (descuent != 0)
                                                                precioUni = precioUni * (1 - descuent / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (descuent != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - descuent / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (descuent > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && descuent == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && descuent != 0) // ANTES if (item.DescuentoPct != 0 && descuent > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                    item.DescuentoPct += descuent;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                if (descEmpresa.ToString().Equals("RURAL"))
                                                {
                                                    item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                }
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (descuent < 1 && descuent > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct += descuent;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("CIMSA") && !descEmpresa.ToString().Equals("TECHM") && !descEmpresa.ToString().Equals("MAVIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = descuent;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("TECHM"))
                                        {
                                            if (descuent != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                                        if (item.DescuentoPct != 0 && descuent <= 0)
                                                            item.DescuentoMontoSpecified = true;
                                                    }
                                                }
                                            }
                                        }

                                        // FIN

                                        ////if (descuent > 0)
                                        ////{
                                        ////    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                        ////    item.MontoItem = (item.MontoItem * (100 - descuent)) / 100;
                                        ////    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                        ////}
                                        ////if (item.DescuentoPct != 0 && descuent == 0)
                                        ////{
                                        ////    item.DescuentoPctSpecified = true;
                                        ////    //item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad; // VA o NO?
                                        ////    item.DescuentoMonto = montoDescUni * item.Cantidad;
                                        ////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                        ////    item.DescuentoMontoSpecified = true;
                                        ////}
                                        ////else if (item.DescuentoPct == 0 && descuent == 0)
                                        ////{
                                        ////    item.DescuentoPctSpecified = false;
                                        ////    item.DescuentoMontoSpecified = false;
                                        ////}
                                        ////else if (item.DescuentoPct != 0 && descuent > 0)
                                        ////{
                                        ////    item.DescuentoPctSpecified = true;
                                        ////    item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                        ////    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * descuent) / 100);
                                        ////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                        ////    item.DescuentoPct += descuent;
                                        ////    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        ////    item.DescuentoMontoSpecified = true;
                                        ////}
                                        ////else
                                        ////{
                                        ////    item.DescuentoPctSpecified = true;
                                        ////    item.DescuentoMonto = ((item.PrecioUnitario * descuent) / 100) * item.Cantidad;
                                        ////    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                        ////    item.DescuentoPct = descuent;
                                        ////    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                        ////    item.DescuentoMontoSpecified = true;
                                        ////}

                                        //Calculos Totales
                                        String imp = oRSMyTable3.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                        decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA
                                        if (cotizacion == 0)
                                        {
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (precio * item.Cantidad);
                                                TotalIVAMinimo += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (precio) * item.Cantidad;
                                                TotalIVABasico += ((((precio * iva) / 100)) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (precio * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (precio * item.Cantidad);
                                                TotalIVAOtra += (((precio * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }
                                        else
                                        {
                                            //decimal pre = precio / (decimal)cotizacion;
                                            decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                            if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                            {
                                                TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                ivaMinimo = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item2;
                                            }
                                            else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                            {
                                                TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                ivaBasico = iva;
                                                item.IndFact = Item_Det_FactIndFact.Item3;
                                            }
                                            else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                            {
                                                TotalItemsNoGravados += (pre * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item1;
                                            }
                                            else
                                            {
                                                TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                item.IndFact = Item_Det_FactIndFact.Item4;
                                            }
                                        }


                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1) || (montoCalculado - item.MontoItem <= 1)) // Si la diferencia es de centésimos
                                                item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                        {
                                            // Error con el porcentaje de descuento
                                            item.DescuentoPct = 0;
                                            item.PrecioUnitarioSpecified = true;
                                        }

                                        // Verificacion para cuando son Donaciones
                                        if (item.MontoItem <= 0)
                                            item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        item.IndFact = Item_Det_FactIndFact.Item10; // Indicador de facturacion para exportaciones
                                        item.Cantidad = Math.Round(item.Cantidad, 3);
                                        detalle[cont] = item;
                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);
                                        cont++;
                                        oRSMyTable3.MoveNext();
                                    }
                                    #region "GastosAdicionales"
                                    try
                                    {
                                        if (hayGastosAdicionales == true) // Si hay Gastos adicionales en el documento
                                        {
                                            while (!oRSMyTableGastosAdicionales.EoF)
                                            {
                                                // Agrego el item de redondeo
                                                Item_Det_Fact item = new Item_Det_Fact();
                                                int nroLinea = cont + 1;
                                                item.NroLinDet = nroLinea.ToString();
                                                item.NomItem = oRSMyTableGastosAdicionales.Fields.Item("Comments").Value;
                                                item.DscItem = "";
                                                item.DescuentoMontoSpecified = false;
                                                item.DescuentoPctSpecified = false;
                                                item.IndAgenteRespSpecified = false;
                                                item.RecargoMntSpecified = false;
                                                item.RecargoPctSpecified = false;

                                                decimal montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("TotalFrgn").Value; // Monto del Item
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoTotalLinea = (decimal)oRSMyTableGastosAdicionales.Fields.Item("LineTotal").Value; // LineTotal de la linea

                                                item.MontoItem = montoTotalLinea;
                                                item.Cantidad = 1;
                                                item.PrecioUnitario = item.MontoItem;
                                                item.PrecioUnitarioSpecified = true;
                                                item.UniMed = "N/A";

                                                decimal montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSumFrgn").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)
                                                if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                                    montoImpuestos = (decimal)oRSMyTableGastosAdicionales.Fields.Item("VatSum").Value; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                                decimal montoDescUni = 0; decimal porcDescUni = 0;

                                                String impGasto = oRSMyTableGastosAdicionales.Fields.Item("TaxCode").Value; // Obtengo el codigo del impuesto, osea el codigo del IVA
                                                String imp = "IVA_EXE";
                                                if (!String.IsNullOrEmpty(impGasto.ToString()))
                                                    imp = impGasto;

                                                decimal iva = ObtenerImpuesto(imp); // Obtengo el porcentaje de IVA

                                                if (montoImpuestos == 0)
                                                { // Si no tiene Impuestos entonces lo pongo como Exento
                                                    imp = "IVA_EXE";
                                                    iva = 0;
                                                }

                                                if (esNuevaVersionDGI)
                                                    montoDescUni = item.DescuentoMonto / item.Cantidad;
                                                decimal montoIVALineaArticulo = 0;
                                                decimal pre = item.PrecioUnitario - montoDescUni; // El precio unitario ya viene con el valor que va montoDescuentoLinea
                                                if (iva == 10 || imp.ToString().Equals("IVA_MIN")) // Si es tasa 10 o tiene como codigo IVA_MIN
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAMinimo += item.MontoItem;
                                                        TotalIVAMinimo += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAMinimo += (pre * item.Cantidad);
                                                        TotalIVAMinimo += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    ivaMinimo = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item2;
                                                }
                                                else if (iva == 22 || imp.ToString().Equals("IVA")) // Si es tasa 22 o tiene como codigo IVA
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if (!descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVABasico += item.MontoItem;
                                                        TotalIVABasico += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN"))
                                                        {
                                                            montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                            if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                                montoIVALineaArticulo = montoImpuestos;
                                                            TotalItemsGravadosIVABasico += item.MontoItem;
                                                            TotalIVABasico += montoIVALineaArticulo;
                                                        }
                                                        else
                                                        {
                                                            TotalItemsGravadosIVABasico += (pre * item.Cantidad);
                                                            TotalIVABasico += (((pre * iva) / 100) * item.Cantidad);
                                                        }
                                                    }
                                                    ivaBasico = iva;
                                                    item.IndFact = Item_Det_FactIndFact.Item3;
                                                }
                                                else if (iva == 0 || imp.ToString().Equals("IVA_EXE")) // Si es tasa 0 o tiene como codigo IVA_EXE
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                        TotalItemsNoGravados += item.MontoItem;
                                                    else
                                                        TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);
                                                    item.IndFact = Item_Det_FactIndFact.Item1;
                                                }
                                                else
                                                {
                                                    if ((descuent != 0 || item.DescuentoPct != 0 || descEmpresa.ToString().Equals("ANCAL") || porcDescUni != 0) && esNuevaVersionDGI)
                                                    {
                                                        montoIVALineaArticulo = item.MontoItem * (iva / 100);
                                                        if ((montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1) || (montoIVALineaArticulo - montoImpuestos <= 1 && montoIVALineaArticulo - montoImpuestos >= -1)) // Si la diferencia es de centésimos
                                                            montoIVALineaArticulo = montoImpuestos;
                                                        TotalItemsGravadosIVAOtra += item.MontoItem;
                                                        TotalIVAOtra += montoIVALineaArticulo;
                                                    }
                                                    else
                                                    {
                                                        TotalItemsGravadosIVAOtra += (pre * item.Cantidad);
                                                        TotalIVAOtra += (((pre * iva) / 100) * item.Cantidad);
                                                    }
                                                    item.IndFact = Item_Det_FactIndFact.Item4;
                                                }

                                                item.IndFact = Item_Det_FactIndFact.Item10; // Indicador de facturacion para exportaciones
                                                item.Cantidad = Math.Round(item.Cantidad, 3);
                                                detalle[cont] = item;

                                                //montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                                if (!listaIndFact.Contains(item.IndFact))
                                                    listaIndFact.Add(item.IndFact);

                                                /*if (item.IndFact == Item_Det_FactIndFact.Item1)
                                                    montoDscRcgGlobalIVAEXE += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item2)
                                                    montoDscRcgGlobalIVAMIN += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item3)
                                                    montoDscRcgGlobalIVA += item.MontoItem;
                                                else if (item.IndFact == Item_Det_FactIndFact.Item4)
                                                    montoDscRcgGlobalIVAOTRO += item.MontoItem;*/

                                                cont++;

                                                oRSMyTableGastosAdicionales.MoveNext();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Ingresar Gasto Adicional", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                    #endregion
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                            }

                            // Totales
                            try
                            {
                                Totales totales = new Totales();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = cantLineasDocumento.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (descuent > 0)
                                {
                                    TotalItemsGravadosIVAMinimo = (TotalItemsGravadosIVAMinimo * (100 - descuent)) / 100;
                                    TotalItemsGravadosIVAMinimo = decimal.Round(TotalItemsGravadosIVAMinimo, 2);
                                }
                                else
                                {
                                    TotalItemsGravadosIVAMinimo = decimal.Round(TotalItemsGravadosIVAMinimo, 2);
                                }

                                if (descuent > 0)
                                {
                                    TotalItemsGravadosIVABasico = (TotalItemsGravadosIVABasico * (100 - descuent)) / 100;
                                    TotalItemsGravadosIVABasico = decimal.Round(TotalItemsGravadosIVABasico, 2);
                                }
                                else
                                {
                                    TotalItemsGravadosIVABasico = decimal.Round(TotalItemsGravadosIVABasico, 2);
                                }

                                if (descuent > 0)
                                {
                                    TotalItemsGravadosIVAOtra = (TotalItemsGravadosIVAOtra * (100 - descuent)) / 100;
                                    TotalItemsGravadosIVAOtra = decimal.Round(TotalItemsGravadosIVAOtra, 2);
                                }
                                else
                                {
                                    TotalItemsGravadosIVAOtra = decimal.Round(TotalItemsGravadosIVAOtra, 2);
                                }

                                if (descuent > 0)
                                {
                                    TotalIVAMinimo = (TotalIVAMinimo * (100 - descuent)) / 100;
                                    TotalIVAMinimo = decimal.Round(TotalIVAMinimo, 2);
                                }
                                else
                                {
                                    TotalIVAMinimo = decimal.Round(TotalIVAMinimo, 2);
                                }

                                if (descuent > 0)
                                {
                                    TotalIVABasico = (TotalIVABasico * (100 - descuent)) / 100;
                                    TotalIVABasico = decimal.Round(TotalIVABasico, 2);
                                }
                                else
                                {
                                    TotalIVABasico = decimal.Round(TotalIVABasico, 2);
                                }

                                if (descuent > 0)
                                {
                                    TotalIVAOtra = (TotalIVAOtra * (100 - descuent)) / 100;
                                    TotalIVAOtra = decimal.Round(TotalIVAOtra, 2);
                                }
                                else
                                {
                                    TotalIVAOtra = decimal.Round(TotalIVAOtra, 2);
                                }

                                totales.MntTotal = TotalItemsGravadosIVAOtra + TotalItemsGravadosIVABasico + TotalItemsGravadosIVAMinimo + TotalItemsNoGravados + TotalIVAOtra + TotalIVABasico + TotalIVAMinimo; // TotalIVAOtra + TotalIVABasico + TotalIVAMinimo +
                                //totales.MntTotal = totales.MntNetoIVAOtra + totales.MntNetoIVATasaBasica + totales.MntNetoIvaTasaMin + totales.MntIVAOtra + totales.MntIVATasaBasica + totales.MntIVATasaMin + totales.MntNoGrv;
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);

                                // NUEVO FORMATO DGI
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        if (totales.TpoCambio != 0)
                                            totales.TpoCambioSpecified = true;
                                        else
                                            totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // NUEVO FORMATO DGI
                                if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    //totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    //totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    //if (totales.MntPagar != totales.MntTotal)
                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                        totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                totales.MntExpoyAsim = totales.MntTotal;
                                totales.MntExpoyAsimSpecified = true;
                                totales.MontoNF = 0;
                                totales.MontoNFSpecified = true;
                                encabezado.Totales = totales;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////    DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////    descuento.NroLinDR = "1";
                            ////    descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////    descuento.TpoDR = TipoDRType.Item2;
                            ////    descuento.TpoDRSpecified = true;
                            ////    decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////    descuento.ValorDR = Math.Round(valorDR, 2);
                            ////    if (descuento.ValorDR > 0)
                            ////    {
                            ////        descuentosRecargos[0] = descuento;
                            ////        factura.DscRcgGlobal = descuentosRecargos;
                            ////    }
                            ////    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    if (listaIndFact.Count != 0)
                                    {
                                        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                        if (valorDR > 0)
                                        {
                                            DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                            foreach (Item_Det_FactIndFact itemIndFac in listaIndFact.ToList())
                                            {
                                                DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                                                descuento.NroLinDR = nroLineaDR.ToString();
                                                descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                                descuento.TpoDR = TipoDRType.Item2;
                                                descuento.TpoDRSpecified = true;
                                                descuento.ValorDR = Math.Round(valorDR, 2);
                                                descuento.GlosaDR = "";
                                                descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                                descuento.IndFactDRSpecified = true;

                                                if (descuento.ValorDR > 0)
                                                {
                                                    descuentosRecargos[nroLineaDR - 1] = descuento;
                                                    factura.DscRcgGlobal = descuentosRecargos;
                                                    nroLineaDR++;
                                                }
                                            }
                                        }
                                    }

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                int num = 1;

                                SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                oRSMyTableDocRef = obtenerDocumentoReferenciaNotaCredito(codigoDocEntry); // Le paso el DocEntry

                                bool notaCredGlobal = false;
                                if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                    if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                        notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                if (oRSMyTableDocRef.RecordCount == 0)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Referencia a documento no codificado";
                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else if (oRSMyTableDocRef.RecordCount > 40)
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                    ReferenciaReferencia refe = new ReferenciaReferencia();
                                    refe.NroLinRef = "1";
                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                    refe.IndGlobalSpecified = true;
                                    refe.TpoDocRefSpecified = false;
                                    refe.RazonRef = "Afecta a mas de 40 CFE";
                                    refe.FechaCFErefSpecified = false;
                                    referencia[0] = refe;
                                    factura.Referencia = referencia;
                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                                else
                                {
                                    ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];

                                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                        if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                            notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    if (oRSMyTableDocRef != null)
                                    {
                                        while (!oRSMyTableDocRef.EoF)
                                        {
                                            //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                            ReferenciaReferencia refe = new ReferenciaReferencia();
                                            refe.NroLinRef = num.ToString();
                                            String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                            int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                            int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                            if (String.IsNullOrEmpty(serie) || nro == null || nro == 0 || notaCredGlobal == true)
                                            {
                                                refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                refe.IndGlobalSpecified = true;
                                                refe.TpoDocRefSpecified = false;
                                                refe.RazonRef = "Referencia a documento no codificado";
                                                if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                                    refe.RazonRef = "Descuentos sobre las facturas del mes";
                                                refe.FechaCFErefSpecified = false;
                                            }
                                            else
                                            {
                                                refe.IndGlobalSpecified = false;
                                                refe.TpoDocRefSpecified = true;
                                                refe.TpoDocRef = CFEType.Item121;
                                                refe.Serie = serie;
                                                refe.NroCFERef = nro.ToString();
                                                refe.FechaCFErefSpecified = false;
                                            }

                                            referencia[num - 1] = refe;
                                            num++;
                                            oRSMyTableDocRef.MoveNext();
                                        }
                                    }

                                    factura.Referencia = referencia;
                                }
                            }
                            catch (Exception ex)
                            { }

                            // Armo el adenda
                            sicfeAdenda += "Vendedor:      " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "<br>";// Vendedor 
                            if (!descEmpresa.ToString().Equals("DREG"))
                                sicfeAdenda += "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "<br>"; // ObservacionesFijas 
                            if (!descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("WYST") && !descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ".<br>"; // Forma de Pago 

                            if (descEmpresa.ToString().Equals("DREG")) // Si es Dreghal
                            {
                                // Armo el adenda desde 0

                                int numeroPedido = 0; string monedaLetras = "Pesos Uruguayos"; string ordenCompra = "";
                                try
                                {
                                    SAPbobsCOM.Recordset oRSMyTableAdenda = ObtenerDatosPreviosDocumento(codigoFactura, pFormFactura);
                                    if (oRSMyTableAdenda != null)
                                    {
                                        while (!oRSMyTableAdenda.EoF)
                                        {
                                            numeroPedido = oRSMyTableAdenda.Fields.Item("Num_Pedido").Value;
                                            oRSMyTableAdenda.MoveNext();
                                        }
                                    }

                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTableAdenda);
                                    oRSMyTableAdenda = null;

                                    if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                        monedaLetras = "Dólares Americanos";
                                    else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                        monedaLetras = "Euros";
                                    else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                        monedaLetras = "Pesos Chilenos";

                                    try
                                    {
                                        ordenCompra = oRSMyTable.Fields.Item("U_ORDEN_COMPRA").Value;
                                    }
                                    catch (Exception ex)
                                    { }
                                }
                                catch (Exception ex)
                                { }

                                //sicfeAdenda = "Observaciones: " + oRSMyTable.Fields.Item("Comments").Value + "\r\n"; // ObservacionesFijas 
                                sicfeAdenda += "Forma.de pago: " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "\r\n"; // Forma de Pago 
                                sicfeAdenda += "Número de pedido: " + numeroPedido + "\r\n";
                                sicfeAdenda += "Usuario: " + obtenerUsuarioCreadorDocumento(idUserDoc) + "\r\n"; // Usuario que creo el documento 
                                sicfeAdenda += "Orden de compra: " + ordenCompra.ToString() + "\r\n";
                                sicfeAdenda += "Moneda: " + monedaLetras.ToString() + "\r\n";
                                sicfeAdenda += "Forma de envío: " + obtenerFormaEnvio(oRSMyTable.Fields.Item("TrnspCode").Value) + "\r\n"; // Forma de Envio 
                                sicfeAdenda += "Vendedor: " + obtenerVendedor(oRSMyTable.Fields.Item("SlpCode").Value) + "\r\n"; // Vendedor 
                                sicfeAdenda += "Comentarios: " + oRSMyTable.Fields.Item("Header").Value + "\r\n"; // Comentarios Iniciales
                            }
                            else if (descEmpresa.ToString().Equals("SCHIN")) // Si es Schindler
                            {
                                sicfeAdenda = oRSMyTable.Fields.Item("Comments").Value; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("OLDSO")) // Si es Oldson
                            {
                                sicfeAdenda = obtenerPersonaContacto(Convert.ToInt32(oRSMyTable.Fields.Item("CntctCode").Value)) + "<br>"; // Persona de Contacto
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                                sicfeAdenda += "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + ". " + obtenerDetalleCuotas(codigoFactura, pFormFactura, moneda) + "<br>"; // Forma de Pago 
                            }
                            else if (descEmpresa.ToString().Equals("HENDE")) // Si es Henderson
                            {
                                sicfeAdenda = "Cond.de pago:  " + obtenerFormaPago(oRSMyTable.Fields.Item("GroupNum").Value) + "<br>"; // Forma de Pago 
                                sicfeAdenda += oRSMyTable.Fields.Item("Comments").Value + "<br>"; // Observaciones del Cliente 
                            }
                            else if (descEmpresa.ToString().Equals("MEDIT")) // Si es MEDIT
                            {
                                if (idSucursalUsuario < 0 || idSucursalUsuario == 3) // Si es la sucursal de Meditian o Lamy
                                {
                                    sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    sicfeAdenda += "Recibo hoy según se detalla en la factura, habiendo controlado que la cantidad y producto están correctos, <br>";
                                    sicfeAdenda += "Nombre : ______________________________________ <br>";
                                    sicfeAdenda += "C.I.: _________________________________________ <br>";
                                    sicfeAdenda += "Firma: ________________________________________ <br>";
                                    sicfeAdenda += "Cumplidas las 48 hs. no se aceptaran reclamos por defectos de funcionamiento";
                                }
                                else
                                {
                                    //sicfeAdenda += "EMPRESA ADHERIDA AL CLEARING DE INFORMES <br>";
                                    //sicfeAdenda += "SE RECIBE RECLAMOS HASTA 48 HS DE RECIBIDO EL PEDIDO<br>"; // Forma de Pago
                                    sicfeAdenda += "Cambio 30 días <br>";
                                    sicfeAdenda += "No se hacen devoluciones de dinero<br>"; // Forma de Pago
                                }
                            }
                            else if (descEmpresa.ToString().Equals("PORTV")) // Si es PORTVAN
                                sicfeAdenda += "Total de Piezas " + cantPiezas + "<br>";

                            if (encabezado.IdDoc.FmaPago != IdDoc_FactFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA")) // Si es La Tentacion
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            XmlSerializer ser = new XmlSerializer(typeof(eFact));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable3);
                oRSMyTable3 = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            return result;
        }

        public String generarXmlBoletaEntrada(String pFormFactura, bool pEsCancelacion)
        {
            //decimal h = obtenerTasa("2142111");
            XmlDocument xml = new XmlDocument();
            String result = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = ObtenerFactura(codigoFactura, pFormFactura);
                SAPbobsCOM.Recordset oRSMyTableRetenciones = null;
                int cantLineasDocumento = 0;
                double descuentoCliente = 0; decimal montoTotalDescuentoBD = 0; // Monto Total de descuento traído desde la Base de datos
                decimal montoTotalItemsSubTotal = 0; // Suma de MontoItem para enviar el SubTotal 
                double recargoCliente = 0;
                decimal TotalItemsNoGravados = 0;
                decimal TotalItemsIvaSuspens = 0;
                decimal TotalItemsExportyAsis = 0;
                string indicador = "";
                decimal redondeoDocumento = 0; decimal montoTotalRetenciones = 0; bool hayItemRedondeo = false;
                sicfeAdenda = "";
                bool esContingencia = false; string documentoBaseRural = "";
                List<Item_Det_BoletaIndFact> listaIndFact = new List<Item_Det_BoletaIndFact>();
                clsObjDocumento objDoc = new clsObjDocumento();
                decimal montoDscRcgGlobalIvaSuspens = 0; decimal montoDscRcgGlobalExportyAsis = 0;
                decimal cantPiezas = 0;
                bool ocultoDescuento = true;
                string contribuyente = ""; // N-> No contribuyente. M-> Contribuyente Monotributo. I-> Contribuyente Imeba
                Totales_BoletaRetencPercep[] arrayRetPer = null;
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            CFEDefTypeEBoleta factura = new CFEDefTypeEBoleta();

                            try
                            {
                                objDoc = obtenerObjetoDocumento(0, Convert.ToInt32(codigoFactura), pFormFactura, false);
                                cantLineasDocumento = objDoc.lineas.Count; // Cantidad de líneas del documento
                                getIdSucursal(objDoc.UserSign); // Actualizo el id de la Sucursal
                                codigoDocEntry = objDoc.DocEntry.ToString();

                                if (sucursalesActivadas == true)
                                {
                                    idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("BPLId").Value); // Saco el Id de Sucursal desde otro campo
                                    if (descEmpresa.Equals("CIMSA"))
                                        idSucursalUsuario = obtenerSucursalPorSerie(oRSMyTable.Fields.Item("Series").Value);
                                }
                                oRSMyTableRetenciones = ObtenerRetencionesDocumento(objDoc.DocEntry.ToString(), pFormFactura); // Obtengo las Retenciones del documento
                                arrayRetPer = new Totales_BoletaRetencPercep[oRSMyTableRetenciones.RecordCount];
                            }
                            catch (Exception ex)
                            { }

                            // CAE
                            CAEDataType cae = new CAEDataType();
                            cae.CAE_ID = "";
                            cae.DNro = "";
                            //cae.FecVenc = new DateTime();
                            cae.FecVenc = DateTime.Now;
                            cae.HNro = "";

                            factura.CAEData = cae;

                            //Encabezado
                            CFEDefTypeEBoletaEncabezado encabezado = new CFEDefTypeEBoletaEncabezado();

                            // IdDoc
                            try
                            {
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                IdDoc_Boleta idDoc = new IdDoc_Boleta();
                                idDoc.Nro = "";
                                idDoc.Serie = "";

                                // Si es documento Manual le manda Serie y Numero
                                if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                                {
                                    try
                                    {
                                        idDoc.Nro = codigoFactura.ToString();
                                        idDoc.Serie = "A";
                                        //String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        //idDoc.Serie = serieDoc.ToString();
                                    }
                                    catch (Exception ex)
                                    { }
                                }

                                // Para los demas clientes se define por el campo Indicator, y toma los datos de los campos de usuarios ContPref y ContFolio
                                indicador = oRSMyTable.Fields.Item("Indicator").Value;

                                if (indicador.ToString().Equals("01")) // Es contingencia
                                {
                                    try
                                    {
                                        int folioDocumento = oRSMyTable.Fields.Item("U_ContFolio").Value;
                                        string SerieDocumento = oRSMyTable.Fields.Item("U_ContPref").Value;
                                        if (folioDocumento != 0)
                                        {
                                            idDoc.Nro = folioDocumento.ToString();
                                            idDoc.Serie = SerieDocumento;
                                            esContingencia = true;
                                        }
                                    }
                                    catch (Exception ex)
                                    { }
                                }
                                String doc = oRSMyTable.Fields.Item("NumAtCard").Value;
                                NroDocumento = doc;
                                if (String.IsNullOrEmpty(doc))
                                {
                                    idDoc.TipoCFE = IdDoc_BoletaTipoCFE.Item151;
                                    tipo = "eBoleta";
                                }

                                if (pEsCancelacion == true || pFormFactura.Equals("181"))
                                    idDoc.TipoCFE = IdDoc_BoletaTipoCFE.Item152;

                                idDoc.FchEmis = oRSMyTable.Fields.Item("TaxDate").Value;
                                idDoc.FchVenc = oRSMyTable.Fields.Item("DocDueDate").Value;
                                if (idDoc.FchVenc == null)
                                    idDoc.FchVencSpecified = false;
                                else
                                    idDoc.FchVencSpecified = true;

                                // Se asigna la fecha que solicita Signature. 
                                idDoc.PeriodoDesde = Convert.ToDateTime("01-01-2000");
                                idDoc.PeriodoHasta = Convert.ToDateTime("01-01-2050");
                                idDoc.PeriodoDesdeSpecified = false;
                                idDoc.PeriodoHastaSpecified = false;
                                string horaDocumento = Convert.ToString(oRSMyTable.Fields.Item("DocTime").Value);
                                if (horaDocumento.ToString().Length == 4)
                                    horaDocumento = horaDocumento.Substring(0, 2) + ":" + horaDocumento.Substring(2, 2);
                                else if (horaDocumento.ToString().Length == 3)
                                    horaDocumento = horaDocumento.Substring(0, 1) + ":" + horaDocumento.Substring(1, 2);
                                idDoc.InfoAdicionalDoc = horaDocumento;
                                idDoc.MntBrutoSpecified = true;
                                idDoc.MntBruto = IdDoc_BoletaMntBruto.Item2;

                                int formaPago = oRSMyTable.Fields.Item("GroupNum").Value;
                                if (EsContado(formaPago))
                                {
                                    idDoc.FmaPago = IdDoc_BoletaFmaPago.Item1;
                                }
                                else
                                {
                                    idDoc.FmaPago = IdDoc_BoletaFmaPago.Item2;
                                }

                                if (esContingencia == true)
                                {
                                    idDoc.TipoCFE = IdDoc_BoletaTipoCFE.Item251;
                                    if (pEsCancelacion == true)
                                        idDoc.TipoCFE = IdDoc_BoletaTipoCFE.Item252;
                                }

                                encabezado.IdDoc = idDoc;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR al cargar idDoc" + ex.ToString());
                            }

                            //Emisor
                            try
                            {
                                Emisor emisor = cargarEmisor(); // Ejecuto la funcion que me carga los datos de quien emite el CFE
                                encabezado.Emisor = emisor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGO EMISOR" + ex.ToString());
                            }

                            //Receptor
                            try
                            {
                                Receptor_Boleta receptor = new Receptor_Boleta();

                                string rucDocumento = oRSMyTable.Fields.Item("NumAtCard").Value;
                                rucDocumento = rucDocumento.ToString().Replace(".", "").Replace("-", "");

                                receptor.RznSocRecep = oRSMyTable.Fields.Item("CardName").Value;

                                string compraIDSAP = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;

                                receptor.CompraID = compraIDSAP; // Se cambió para que nunca vaya el número Primario. El ID Compra o nada

                                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) // Si es Bosch
                                {
                                    if (String.IsNullOrEmpty(compraIDSAP.ToString())) // Si no tiene un CompraId
                                    {
                                        String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                        receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                    }
                                }
                                else if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ANCAL"))
                                {
                                    String serieDoc = Convert.ToString(oRSMyTable.Fields.Item("Series").Value);
                                    receptor.CompraID = obtenerNombreSerie(serieDoc) + "- " + codigoFactura;
                                }

                                String codCliente = oRSMyTable.Fields.Item("CardCode").Value;

                                if (descEmpresa.ToString().Equals("PURAT"))
                                {
                                    codCliente = codCliente.ToString().Replace("?", "");
                                    if (codCliente.ToString().Length > 6)
                                        codCliente = codCliente.Substring(1, 6);
                                }

                                bool agregoCeroRUT = false; // Indica si le agrega un 0 adelante al RUT

                                SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(codCliente, "S");
                                SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(codCliente, "S"); // Obtengo las direcciones del cliente
                                if (oRSMyTable2 != null)
                                {
                                    while (!oRSMyTable2.EoF)
                                    {
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                        string nombreCompletoCliente = oRSMyTable2.Fields.Item("CardName").Value;
                                        receptor.DirRecep = oRSMyTable2.Fields.Item("Address").Value;
                                        if (String.IsNullOrEmpty(receptor.DirRecep.ToString()))
                                            receptor.DirRecep = oRSMyTable5.Fields.Item("Street").Value;
                                        receptor.CP = oRSMyTable2.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = oRSMyTable5.Fields.Item("ZipCode").Value;
                                        if (String.IsNullOrEmpty(receptor.CP.ToString()))
                                            receptor.CP = "0";

                                        receptor.CP = Regex.Replace(receptor.CP, @"[^\d]", ""); // Me quedo solo con los números del Código postal

                                        receptor.CiudadRecep = oRSMyTable2.Fields.Item("City").Value;
                                        if (String.IsNullOrEmpty(receptor.CiudadRecep.ToString()))
                                            receptor.CiudadRecep = oRSMyTable5.Fields.Item("City").Value;
                                        receptor.PaisRecep = oRSMyTable5.Fields.Item("Country").Value;
                                        if (String.IsNullOrEmpty(receptor.PaisRecep.ToString()))
                                            receptor.PaisRecep = oRSMyTable2.Fields.Item("Country").Value;
                                        receptor.DeptoRecep = obtenerDepartamento(oRSMyTable2.Fields.Item("State1").Value, receptor.PaisRecep);
                                        if (String.IsNullOrEmpty(receptor.DeptoRecep.ToString()) && tipoConexionBaseDatos.Equals("SQL"))
                                            receptor.DeptoRecep = oRSMyTable5.Fields.Item("Name").Value;
                                        receptor.InfoAdicional = oRSMyTable2.Fields.Item("E_Mail").Value; // Le cargo la direccion de correo electronico
                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            receptor.InfoAdicional = oRSMyTable2.Fields.Item("CardCode").Value + " - " + oRSMyTable2.Fields.Item("Phone1").Value; // Le cargo la direccion de correo electronico
                                        else if (descEmpresa.ToString().Equals("SCHIN"))
                                            receptor.InfoAdicional += "\r\n" + oRSMyTable5.Fields.Item("Address2").Value; // Le cargo la direccion de entrega
                                        else if (descEmpresa.ToString().Equals("TECHM"))
                                            receptor.InfoAdicional = "";
                                        receptor.LugarDestEnt = "";

                                        string nombreExtranjeroCliente = oRSMyTable2.Fields.Item("CardFName").Value;

                                        if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("PROND") && !descEmpresa.ToString().Equals("TRIGE") && !descEmpresa.ToString().Equals("RURAL")) // Si NO es Bosch
                                        {
                                            if (!String.IsNullOrEmpty(nombreExtranjeroCliente.ToString().Trim())) // Si tiene algo en el campo Apellido, ó Nombre Extranjero
                                            {
                                                if (!nombreCompletoCliente.ToString().Trim().Equals(nombreExtranjeroCliente.ToString().Trim())) // Si el nombre es != a Nombre Extranjero
                                                {
                                                    nombreCompletoCliente = nombreCompletoCliente.ToString().Trim() + " " + nombreExtranjeroCliente.ToString().Trim(); // Entonces lo concateno
                                                    if (nombreCompletoCliente.ToString().Length > 150) // Si es mayor a 150 caracteres lo corta
                                                        nombreCompletoCliente = nombreCompletoCliente.ToString().Trim().Substring(0, 150);
                                                    receptor.RznSocRecep = nombreCompletoCliente.ToString().Trim();
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("MAVIN"))
                                            receptor.RznSocRecep = codCliente.ToString() + " " + receptor.RznSocRecep;

                                        descuentoCliente = oRSMyTable2.Fields.Item("Discount").Value;
                                        recargoCliente = oRSMyTable2.Fields.Item("IntrstRate").Value;

                                        try
                                        {
                                            // Se agregó este bloque de código para sacar el Ruc desde la ficha del Cliente, ya que lo sacaba de la factura y la misma estaba vacia
                                            rucDocumento = oRSMyTable.Fields.Item("LicTradNum").Value; // Aca se guarda el RUC del documento
                                            rucDocumento = rucDocumento.ToString().Replace(".", "").Replace("-", "");
                                            rucDocumento = "0"; //Seteo para prueba Nicolas Pecoy
                                            //encabezado.IdDoc.TipoCFE = IdDoc_BoletaTipoCFE.Item151;

                                            if (rucDocumento.ToString().Length == 12) // Tiene RUC
                                                receptor.TipoDocRecep = DocType.Item2;
                                            else if (rucDocumento.ToString().Length >= 7 && rucDocumento.ToString().Length <= 8)
                                                receptor.TipoDocRecep = DocType.Item3;
                                            else if (rucDocumento.ToString().Length == 11 && ValidarRUC("0" + rucDocumento))
                                            {
                                                receptor.TipoDocRecep = DocType.Item2;
                                                rucDocumento = "0" + rucDocumento;
                                                agregoCeroRUT = true;
                                            }
                                            else
                                                receptor.TipoDocRecep = DocType.Item4; // Si TipoDocRecep tiene valor 4, según el formato CFE, es obligatorio de que exista el campo C62.1 N° Documento Receptor Extranjero/Otros

                                            receptor.CodPaisRecep = getCodPais(receptor.PaisRecep); // Obtiene el CodPais
                                        }
                                        catch (Exception ex)
                                        { }

                                        oRSMyTable2.MoveNext();
                                    }
                                }

                                try
                                {
                                    if (!receptor.PaisRecep.ToString().Equals("Uruguay") && !receptor.PaisRecep.ToString().Equals("uruguay") && !receptor.PaisRecep.ToString().Equals("UY") && !receptor.PaisRecep.ToString().Equals("uy"))
                                        receptor.TipoDocRecep = DocType.Item4; // Si el cliente no es de Uruguay, entonces el tipo de documento es 4

                                    if (receptor.TipoDocRecep == DocType.Item4)
                                    {
                                        esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                        if (receptor.PaisRecep.ToString().Equals("AR") || receptor.PaisRecep.ToString().Equals("Argentina") || receptor.PaisRecep.ToString().Equals("argentina"))
                                            receptor.CodPaisRecep = CodPaisType.AR;
                                        else if (receptor.PaisRecep.ToString().Equals("BR") || receptor.PaisRecep.ToString().Equals("Brasil") || receptor.PaisRecep.ToString().Equals("brasil"))
                                            receptor.CodPaisRecep = CodPaisType.BR;
                                        else if (receptor.PaisRecep.ToString().Equals("CL") || receptor.PaisRecep.ToString().Equals("Chile") || receptor.PaisRecep.ToString().Equals("chile"))
                                            receptor.CodPaisRecep = CodPaisType.CL;

                                        /*if (!String.IsNullOrEmpty(receptor.CodPaisRecep.ToString()))
                                        {
                                            if (receptor.CodPaisRecep != CodPaisType.UY)
                                                esDocUruguayo = false; // Indico que el documento no es Uruguayo
                                            else
                                                esDocUruguayo = true;
                                        }*/
                                    }
                                    else
                                        esDocUruguayo = true; // Indico que el documento es Uruguayo
                                }
                                catch (Exception e)
                                {
                                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Verificando Cliente Ext", e.Message.ToString()); // Guarda log del Proceso
                                }

                                if (!String.IsNullOrEmpty(rucDocumento.ToString()))
                                {
                                    if (esDocUruguayo == true)
                                        receptor.ItemElementName = ItemChoiceType1.DocRecep;
                                    else
                                        receptor.ItemElementName = ItemChoiceType1.DocRecepExt;
                                }
                                receptor.Item = rucDocumento;

                                if (receptor.DirRecep.ToString().Length > 70)
                                    receptor.DirRecep = receptor.DirRecep.ToString().Substring(0, 70);
                                if (receptor.CiudadRecep.ToString().Length > 30)
                                    receptor.CiudadRecep = receptor.CiudadRecep.ToString().Substring(0, 30);
                                if (receptor.DeptoRecep.ToString().Length > 30)
                                    receptor.DeptoRecep = receptor.DeptoRecep.ToString().Substring(0, 30);
                                if (receptor.PaisRecep.ToString().Length > 30)
                                    receptor.PaisRecep = receptor.PaisRecep.ToString().Substring(0, 30);
                                if (receptor.LugarDestEnt.ToString().Length > 100)
                                    receptor.LugarDestEnt = receptor.LugarDestEnt.ToString().Substring(0, 30);
                                if (receptor.RznSocRecep.ToString().Length > 150)
                                    receptor.RznSocRecep = receptor.RznSocRecep.ToString().Substring(0, 150);

                                /*// Nueva validación porque en algunos casos quedaba UY y con DocRecepExt
                                if (receptor.CodPaisRecep == CodPaisType.UY)
                                    esDocUruguayo = true;
                                else
                                    esDocUruguayo = false;
                                */

                                if (esContingencia == true) // Vuelve a Verificar si es Cotingencia
                                    encabezado.IdDoc.TipoCFE = IdDoc_BoletaTipoCFE.Item251;

                                if (objDoc != null)
                                {
                                    receptor.CompraID = objDoc.U_IdCompra;
                                    receptor.LugarDestEnt = objDoc.DireccionEntrega;
                                }

                                encabezado.Receptor = receptor;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGO RECPETOR " + e.ToString());
                            }

                            //Detalle
                            String moneda = "";
                            double cotizacion = 0;
                            double montoDescuentoGlobal = 0; double montoDescuentoGlobalME = 0;
                            try
                            {
                                moneda = oRSMyTable.Fields.Item("DocCur").Value;
                                cotizacion = oRSMyTable.Fields.Item("DocRate").Value;
                                montoDescuentoGlobal = oRSMyTable.Fields.Item("DiscSum").Value;
                                montoDescuentoGlobalME = oRSMyTable.Fields.Item("DiscSumFC").Value;

                                if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0) // Si es la sucursal de Meditian
                                    ocultoDescuento = true;

                                if (descEmpresa.ToString().Equals("BOSCH"))
                                {
                                    string ocultoDescBosch = oRSMyTable.Fields.Item("U_ImprimirDtoLinea").Value;
                                    if (ocultoDescBosch.ToString().Equals("S"))
                                        ocultoDescuento = false; // Muestra el descuento de la línea
                                    else
                                    {
                                        sumaDescuentos = true;
                                        muestraDescuentoGlobal = false;
                                    }
                                }
                            }
                            catch (Exception e)
                            { }

                            try
                            {
                                string rounding = (string)oRSMyTable.Fields.Item("Rounding").Value; // Check de Redondeo del documento
                                if (rounding.ToString().Equals("Y") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("TECHM"))
                                {
                                    // Bloque de codigo para controlar el Redondeo del documento
                                    redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDif").Value; // RoundDif del documento
                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                        redondeoDocumento = (decimal)oRSMyTable.Fields.Item("RoundDifFC").Value; // RoundDifFC del documento

                                    if (Math.Round(redondeoDocumento, 2) == 0)
                                        redondeoDocumento = 0;
                                }

                                if (descEmpresa.ToString().Equals("TENTA")) // En La Tentación las NC con redondeo dan error
                                {
                                    if (redondeoDocumento != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                    {
                                        redondeoDocumento = 0;
                                    }
                                }

                                if (oRSMyTableRetenciones != null)
                                    if (oRSMyTableRetenciones.RecordCount != 0)
                                        redondeoDocumento = 0; // Si tiene Retenciones entonces no uso redondeo

                                if (redondeoDocumento != 0) // Si el documento tiene redondeo
                                    cantLineasDocumento += 1; // Le agrego un item mas que es para el redondeo

                                SAPbobsCOM.Recordset oRSMyTableGastosAdicionales = null; bool hayGastosAdicionales = false;
                                // Verifica si hay Gastos Adicionales (INV3) 
                                if (descEmpresa.ToString().Equals("PROND"))
                                {
                                    oRSMyTableGastosAdicionales = obtenerGastosAdicionalesINV3(codigoFactura, pFormFactura);
                                    if (oRSMyTableGastosAdicionales.RecordCount != 0)
                                    {
                                        cantLineasDocumento += oRSMyTableGastosAdicionales.RecordCount;
                                        hayGastosAdicionales = true;
                                    }
                                }

                                objDoc.lineas = QueryALista("SELECT * FROM IVZ_FE_OBJ18_ITEMS WHERE DocEntry = " + codigoDocEntry);
                                Item_Det_Boleta[] detalle = new Item_Det_Boleta[objDoc.lineas.Count];
                                
                                int cont = 0;
                                if (objDoc.lineas != null)
                                {
                                    for (int l = 0; l < objDoc.lineas.Count; l++)
                                    {
                                        clsObjDocumentoLineas lineaRec = objDoc.lineas[l];

                                        // Solo para la Tentacion, por los problemas de descuento y redondeo
                                        if (descEmpresa.ToString().Equals("TENTA") && objDoc.DescuentoDocPorcentaje != 0 && (montoDescuentoGlobal != 0 || montoDescuentoGlobalME != 0))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje < 0 && objDoc.DescuentoDocPorcentaje > -1)
                                                objDoc.DescuentoDocPorcentaje = 0;
                                        }

                                        if (descEmpresa.ToString().Equals("RURAL"))
                                            if (String.IsNullOrEmpty(documentoBaseRural))
                                                documentoBaseRural = lineaRec.BaseDocNum; // Me guardo el documento Base para el Adenda

                                        Item_Det_Boleta item = new Item_Det_Boleta();
                                        int nro = cont + 1;
                                        item.NroLinDet = nro.ToString();
                                        string campo = "";
                                        if (descEmpresa.Equals("ENGRW"))
                                        {
                                            //campo = "U_TLana" + (1 + l);
                                            item.NomItem = lineaRec.ItemCode;//oRSMyTable.Fields.Item(campo).Value.ToString();
                                        }

                                        item.IndAgenteRespSpecified = true;
                                        item.Cantidad = lineaRec.Cantidad;
                                        item.UniMed = "N/A";
                                        //decimal precio = lineaRec.Precio;
                                        item.DescuentoPct = lineaRec.DescuentoPorcentaje;
                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);

                                        try
                                        {
                                            //item.CodItem = (Item_Det_FactCodItem[])oRSMyTable3.Fields.Item("ItemCode").Value; // Agregado para Signature
                                            item.DscItem = lineaRec.ItemCode;
                                            if (!descEmpresa.ToString().Equals("ANCAL"))
                                            {
                                                string unidadMedida = lineaRec.UnidadMedida;

                                                if (!String.IsNullOrEmpty(unidadMedida))
                                                    item.UniMed = unidadMedida;

                                                if (item.UniMed.Length > 4)
                                                    item.UniMed = item.UniMed.Substring(0, 4);
                                            }

                                            if (concatenoCodNomArt)
                                            {
                                                // Si se le concatena el codigo antes de la desc del Artículo, entonces verifica que no pase el limite de 80 caract y limpia el item.DscItem
                                                if (!descEmpresa.ToString().Equals("PORTV") && !descEmpresa.ToString().Equals("RURAL") && !descEmpresa.ToString().Equals("ENGRW"))
                                                    item.NomItem = item.DscItem + " - " + item.NomItem;
                                                else if (descEmpresa.ToString().Equals("PORTV"))
                                                    item.NomItem = lineaRec.VisOrder.ToString() + "- " + item.DscItem + "-" + lineaRec.U_Marca + "-" + item.NomItem;

                                                if (item.NomItem.Length > 80)
                                                    item.NomItem = item.NomItem.Substring(0, 80);

                                                if (descEmpresa.ToString().Equals("SCHIN"))
                                                    item.DscItem = lineaRec.FreeTxt;
                                                else
                                                    item.DscItem = "";
                                            }

                                            string codigoEan = ""; string tipoCodigo = "EAN"; int cantLineasCodigo = 1;

                                            if (descEmpresa.ToString().Equals("POCHA"))
                                            {
                                                item.DscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.U_CodigoRondanet))
                                                {
                                                    tipoCodigo = "EAN13";
                                                    codigoEan = lineaRec.U_CodigoRondanet; cantLineasCodigo++;  // Si tiene un Código de Rondanet
                                                }
                                            }
                                            else if (descEmpresa.ToString().Equals("TRIGE"))
                                            {
                                                item.DscItem = lineaRec.CantidadPorPaqueteVenta.ToString();
                                                item.UniMed = lineaRec.NombreUnidadMedidaVenta;
                                                if (!String.IsNullOrEmpty(lineaRec.CodigoBarras))
                                                {
                                                    tipoCodigo = "EAN13";
                                                    codigoEan = lineaRec.CodigoBarras; cantLineasCodigo++; // Si tiene Código de Barras
                                                }
                                            }
                                            //else if (descEmpresa.ToString().Equals("ENGRW"))
                                            //{
                                            //    item.NomItem = lineaRec.LoteBatchNum;
                                            //    item.DscItem = lineaRec.U_FeDescripcion;
                                            //}

                                            if (!String.IsNullOrEmpty(item.UniMed))
                                            {
                                                if (item.UniMed.Contains("K") || item.UniMed.Contains("k"))
                                                    item.UniMed = "KGM"; // Kilogramo
                                                else if (item.UniMed.Contains("Ca") || item.UniMed.Contains("ca") || item.UniMed.Contains("CA"))
                                                    item.UniMed = "CS"; // Caja
                                                else if (item.UniMed.Contains("litro") || item.UniMed.Contains("Litro"))
                                                    item.UniMed = "LTR"; // Litro
                                                else
                                                    item.UniMed = "EA"; // Unidad
                                            }

                                            try
                                            {
                                                Item_Det_BoletaCodItem[] itemDetCodeArray = new Item_Det_BoletaCodItem[cantLineasCodigo];
                                                Item_Det_BoletaCodItem itemDetCode = new Item_Det_BoletaCodItem();
                                                itemDetCode.TpoCod = "INT1";
                                                itemDetCode.Cod = lineaRec.ItemCode;
                                                if (descEmpresa.Equals("ENGRW"))
                                                {
                                                    //campo = "U_TLana" + (1 + l);
                                                    //itemDetCode.Cod = oRSMyTable.Fields.Item(campo).Value.ToString();
                                                }
                                                itemDetCodeArray[0] = itemDetCode;

                                                if (cantLineasCodigo > 1)
                                                {
                                                    itemDetCode = new Item_Det_BoletaCodItem();
                                                    itemDetCode.TpoCod = tipoCodigo;
                                                    itemDetCode.Cod = codigoEan;
                                                    itemDetCodeArray[1] = itemDetCode;
                                                }

                                                item.CodItem = itemDetCodeArray;

                                                //item.DscItem = "";
                                            }
                                            catch (Exception ex)
                                            { }
                                        }
                                        catch (Exception ex)
                                        {
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR Moneda y TipoCambio", moneda.ToString() + " - Cot " + lineaRec.TipoCambioLinea.ToString() + ex.Message.ToString()); // Guarda log del Proceso
                                        }

                                        if ((descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL")) && idSucursalUsuario < 0) // Solo si es Meditian
                                        {
                                            item.NomItem = item.NroLinDet.ToString() + " " + item.NomItem;
                                            if (item.NomItem.Length > 80)
                                                item.NomItem = item.NomItem.Substring(0, 80);
                                        }

                                        decimal precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                        decimal precioUniConDesc = lineaRec.Precio; // Precio con Descuento
                                        decimal montoDescUni = precioUni - precioUniConDesc; // Calculo el Monto de Descuento
                                        decimal porcDescUni = lineaRec.DescuentoPorcentaje; // Porcentaje del Descuento
                                        decimal montoTotalLinea = lineaRec.TotalLineaME; // Monto del Item
                                        decimal montoImpuestos = lineaRec.TotalIVAME; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if ((moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)))// Si el documento es en Pesos
                                            montoImpuestos = lineaRec.TotalIVA; // Monto de los Impuestos. (No se usa en la func de IVA porque da error cuando hay descuento global)

                                        if (descEmpresa.ToString().Equals("PORTV") && !lineaRec.ArticuloInventario.ToString().Equals("N")) // Sumo la cantidad de piezas si en Portvan y si es un Artículo de Inventario
                                            cantPiezas += item.Cantidad;

                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                            item.Cantidad = 1;

                                        if (!lineaRec.MonedaLinea.Equals(moneda) && !String.IsNullOrEmpty(lineaRec.MonedaLinea.ToString())) // Si las monedas difieren entre sí
                                        {
                                            if (lineaRec.TipoCambioLinea <= 1) // Si la linea no tiene cotizacion usa la cotizacion de la factura
                                                lineaRec.TipoCambioLinea = getDecimal(cotizacion.ToString());

                                            if ((moneda.ToString().Equals("UYU") || moneda.ToString().Equals("$")) && (lineaRec.MonedaLinea.ToString().Equals("USD") || lineaRec.MonedaLinea.ToString().Equals("U$S")))// Si el documento es en Pesos y el articulo en Dolares 
                                            {
                                                precioUni = precioUni * lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni * lineaRec.TipoCambioLinea;

                                                // Nuevas Lineas de Codigo 
                                                if (montoTotalLinea != 0 && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE"))
                                                    precioUni = montoTotalLinea / item.Cantidad;
                                                else
                                                {
                                                    if (montoTotalLinea == 0) //  && !descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE")
                                                    {
                                                        if (objDoc.DescuentoDocPorcentaje == 0 || (descEmpresa.ToString().Equals("BOSCH") && objDoc.DescuentoDocPorcentaje != 0 && porcDescUni == 0)) // || descEmpresa.ToString().Equals("BOSCH")
                                                        {
                                                            decimal montoLineTotal = lineaRec.TotalLinea; // LineTotal de la linea
                                                            precioUni = montoLineTotal / item.Cantidad;
                                                        }
                                                    }

                                                }
                                            }
                                            else if ((lineaRec.MonedaLinea.ToString().Equals("UYU") || lineaRec.MonedaLinea.ToString().Equals("$")) && (moneda.ToString().Equals("USD") || moneda.ToString().Equals("U$S")))// Si el documento es en Dolares y el articulo en Pesos 
                                            {
                                                precioUni = precioUni / lineaRec.TipoCambioLinea;
                                                montoDescUni = montoDescUni / lineaRec.TipoCambioLinea;
                                            }
                                            else // Quiere decir que no es entre Pesos y Dolares, sino que hay al menos una tercer moneda
                                            {
                                                decimal montoLineaMonedaExtranjera = 0;
                                                if (moneda.ToString().Equals(monedaStrISO) || moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLinea;
                                                else
                                                    montoLineaMonedaExtranjera = lineaRec.TotalLineaME; // Si el documento es en otra moneda

                                                if (montoLineaMonedaExtranjera != 0)
                                                {
                                                    precioUni = montoLineaMonedaExtranjera / item.Cantidad;
                                                    precioUni = Math.Round(precioUni, 3);
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("ANCAL"))
                                        {
                                            // Si entra aca quiere decir que es Almena, entonces uso la cantidad del campo InvQty
                                            item.Cantidad = lineaRec.CantidadInventario;
                                            if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                item.Cantidad = 1;

                                            decimal montoItemSinDtoAncal = lineaRec.TotalLinea; // LineTotal de la linea
                                            if (!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$"))// Si el documento no es en Pesos
                                                montoItemSinDtoAncal = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                            item.MontoItem = Math.Round(montoItemSinDtoAncal, 2);

                                            montoTotalLinea = item.MontoItem;

                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);
                                            precioUni = item.PrecioUnitario;
                                        }

                                        if (montoTotalLinea == 0)
                                            montoTotalLinea = lineaRec.TotalLinea; // LineTotal de la linea

                                        decimal montoCalculado = Convert.ToDecimal(precioUni * item.Cantidad) - Convert.ToDecimal(montoDescUni * item.Cantidad);
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        item.DescuentoMonto = montoDescUni;
                                        item.DescuentoPct = decimal.Round(porcDescUni, 2);
                                        item.MontoItem = decimal.Round(montoTotalLinea, 2);
                                        item.PrecioUnitario = decimal.Round(precioUni, 3);

                                        if (descEmpresa.ToString().Equals("RURAL") && item.DescuentoPct != 0)
                                        {
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                            item.MontoItem = decimal.Round(montoTotalLinea, 2);

                                            if (moneda.ToString().Equals(lineaRec.MonedaLinea)) // Si la moneda del artículo es la misma que la del documento
                                            {
                                                item.PrecioUnitario = decimal.Round(precioUniConDesc, 3);
                                                if (item.Cantidad * item.PrecioUnitario != item.MontoItem) // Si no cierra el Total entonces lo redondeo a 2 decimales
                                                {
                                                    item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                    item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                                }
                                            }
                                            else
                                                item.PrecioUnitario = decimal.Round(item.MontoItem / item.Cantidad, 3);
                                        }

                                        // Validaciones Dreghal y Ancal
                                        bool imprimeDescuento = false;
                                        decimal montoItemSinDto = 0;
                                        bool yaCalculoDescuento = false;

                                        // NUEVO CONTROL PARA BOSCH
                                        if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) && ocultoDescuento == true)
                                        {
                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                            item.PrecioUnitario = decimal.Round(item.PrecioUnitario, 3);
                                            item.DescuentoMonto = 0; item.DescuentoPct = 0; muestraDescuentoGlobal = true; sumaDescuentos = false;
                                        }

                                        if ((esNuevaVersionDGI && muestraDescuentoGlobal == false))// || (descEmpresa.ToString().Equals("BOSCH") && ocultoDescuento == true)
                                        {
                                            yaCalculoDescuento = true;
                                            try
                                            {
                                                if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                                {
                                                    if (descEmpresa.ToString().Equals("DREG")) // Solo si es Dreghal, Ancal no utiliza este campo
                                                    {
                                                        if ((int)oRSMyTable.Fields.Item("U_IMP_DESC").Value == 1) // Si tiene el valor 1 entonces imprime descuento
                                                            imprimeDescuento = true;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("ANCAL")) // Solo si es ANCAL
                                                    {
                                                        // Si entra aca quiere decir que es Ancal, entonces uso la cantidad del campo InvQty
                                                        item.Cantidad = lineaRec.CantidadInventario;
                                                        if (item.Cantidad == 0) // Si es 0 entonces lo paso a 1, sino los valores no dan
                                                            item.Cantidad = 1;
                                                    }
                                                    else if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("MEDIT")) // Solo si es ANCAL
                                                    {
                                                        if (ocultoDescuento == true)
                                                            imprimeDescuento = false;
                                                        else
                                                            imprimeDescuento = true;
                                                    }
                                                    else
                                                        imprimeDescuento = true; // Almena y Puratos

                                                    montoItemSinDto = lineaRec.TotalLinea; // LineTotal de la linea
                                                    if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo))// Si el documento no es en Pesos
                                                        montoItemSinDto = lineaRec.TotalLineaME; // TotalFrgn de la linea

                                                    if (objDoc.DescuentoDocPorcentaje != 0) // Si tiene solo descuento Global
                                                    {
                                                        item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                        item.MontoItem = Math.Round(item.MontoItem, 2);

                                                        item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                        item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                        item.DescuentoMonto = 0;
                                                        item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                        item.DescuentoPct = 0;
                                                        item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                        item.DescuentoPctSpecified = false;
                                                        item.DescuentoMontoSpecified = false;
                                                    }
                                                    else
                                                        item.MontoItem = montoItemSinDto;

                                                    if (porcDescUni != 0) // Si tiene descuento de Línea
                                                    {
                                                        if (imprimeDescuento == true) // Si imprime el descuento de Línea
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            precioUni = lineaRec.PrecioAntesDelDescuento; // Precio sin Descuento
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                precioUni = precioUni * (1 - objDoc.DescuentoDocPorcentaje / 100);
                                                            item.PrecioUnitario = Math.Round(precioUni, 2);

                                                            item.DescuentoPct = porcDescUni;
                                                            item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = true;
                                                            item.DescuentoMontoSpecified = true;
                                                        }
                                                        else
                                                        {
                                                            if (objDoc.DescuentoDocPorcentaje != 0)
                                                                item.MontoItem = montoItemSinDto * (1 - objDoc.DescuentoDocPorcentaje / 100); // El total multiplicado por el descuento de abajo
                                                            item.MontoItem = Math.Round(item.MontoItem, 2);

                                                            item.PrecioUnitario = item.MontoItem / item.Cantidad;
                                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                                            item.DescuentoPct = 0;
                                                            item.DescuentoMonto = 0;
                                                            item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                            item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                            item.DescuentoPctSpecified = false;
                                                            item.DescuentoMontoSpecified = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    item.DescuentoPctSpecified = false;
                                                    item.DescuentoMontoSpecified = false;
                                                }

                                            }
                                            catch (Exception ex)
                                            { }
                                        }

                                        if (yaCalculoDescuento == false && (!esNuevaVersionDGI || muestraDescuentoGlobal == true))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    //item.PrecioUnitario = (item.PrecioUnitario * (100 - descuent)) / 100;
                                                    item.MontoItem = (item.MontoItem * (100 - objDoc.DescuentoDocPorcentaje)) / 100;
                                                    item.MontoItem = decimal.Round(item.MontoItem, 2);
                                                }
                                            }
                                            if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                /*item.DescuentoMonto = montoDescUni * item.Cantidad;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;*/

                                                // 3 lineas nuevas
                                                item.DescuentoMonto = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct == 0 && objDoc.DescuentoDocPorcentaje == 0)
                                            {
                                                item.DescuentoPctSpecified = false;
                                                item.DescuentoMontoSpecified = false;
                                            }
                                            else if (item.DescuentoPct != 0 && objDoc.DescuentoDocPorcentaje > 0)
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                if (sumaDescuentos == true) // Si suma los descuentos
                                                {
                                                    item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                    item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                }
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else if (item.DescuentoPct != 0 && (objDoc.DescuentoDocPorcentaje < 1 && objDoc.DescuentoDocPorcentaje > -1)) // Se agrego nuevo cuando dio problemas en La Tentacion con una NC
                                            {
                                                item.DescuentoPctSpecified = true;
                                                item.DescuentoMonto = ((item.PrecioUnitario * item.DescuentoPct) / 100) * item.Cantidad;
                                                item.DescuentoMonto += ((((item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto) * objDoc.DescuentoDocPorcentaje) / 100);
                                                item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                item.DescuentoPct += objDoc.DescuentoDocPorcentaje;
                                                item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                item.DescuentoMontoSpecified = true;
                                            }
                                            else
                                            {
                                                if (!descEmpresa.ToString().Equals("BOSCH") && !descEmpresa.ToString().Equals("REMIL") && !descEmpresa.ToString().Equals("SOLGE") && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("CABIN"))
                                                {
                                                    item.DescuentoPctSpecified = true;
                                                    item.DescuentoMonto = ((item.PrecioUnitario * objDoc.DescuentoDocPorcentaje) / 100) * item.Cantidad;
                                                    item.DescuentoMonto = decimal.Round(item.DescuentoMonto, 2);
                                                    item.DescuentoPct = objDoc.DescuentoDocPorcentaje;
                                                    item.DescuentoPct = decimal.Round(item.DescuentoPct, 2);
                                                    item.DescuentoMontoSpecified = true;
                                                }
                                            }
                                        }

                                        if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CABIN"))
                                        {
                                            if (objDoc.DescuentoDocPorcentaje != 0 || item.DescuentoPct != 0) // Si hay algun tipo de Descuento
                                            {
                                                if ((!descEmpresa.ToString().Equals("BOSCH") && descEmpresa.ToString().Equals("MEDIT")) || ocultoDescuento == false)
                                                {
                                                    decimal resultadoResta = (item.PrecioUnitario * item.Cantidad) - item.MontoItem;
                                                    if (resultadoResta > 0)
                                                    {
                                                        item.DescuentoMonto = resultadoResta;
                                                        item.DescuentoMonto = Math.Round(item.DescuentoMonto, 2);
                                                    }
                                                }
                                            }
                                        }

                                        // SE CAMBIO LA VALIDACION PARA MAS ARRIBA
                                        montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);

                                        if (item.DescuentoMonto == item.MontoItem && item.DescuentoPct == 100)
                                            item.DescuentoMonto = 0;

                                        if (esNuevaVersionDGI)
                                            montoDescUni = item.DescuentoMonto / item.Cantidad;

                                        //TotalItemsNoGravados += item.MontoItem; // TotalItemsNoGravados += (pre * item.Cantidad);

                                        if (indicador.Equals("12"))
                                        {
                                            item.IndFact = Item_Det_BoletaIndFact.Item12;
                                            TotalItemsNoGravados += item.MontoItem;
                                            //item.IndFact = Item_Det_BoletaIndFact.Item12;
                                            //TotalItemsIvaSuspens += item.MontoItem;
                                        }
                                        else if (indicador.Equals("13") || indicador.Equals(""))
                                        {
                                            item.IndFact = Item_Det_BoletaIndFact.Item13;
                                            TotalItemsNoGravados += item.MontoItem;
                                            /*item.IndFact = Item_Det_BoletaIndFact.Item13; // NO Contribuyente
                                            TotalItemsNoGravados += item.MontoItem;*/
                                        }
                                        else if (indicador.Equals("14"))
                                        {
                                            item.IndFact = Item_Det_BoletaIndFact.Item14; // Contribuyente Monotributo
                                            TotalItemsNoGravados += item.MontoItem;
                                        }
                                        else if (indicador.Equals("15"))
                                        {
                                            item.IndFact = Item_Det_BoletaIndFact.Item15; // Contribuyente IMEBA
                                            TotalItemsNoGravados += item.MontoItem;
                                        }

                                        // Vuelvo a verificar que los totales den correctamente con la funciona de DGI. MontoLineaArticulo = (PrecioUnitario * Cant) - Desc + Rec
                                        // SE COMENTAN LAS SIGUIENTES 5 LINEAS POR PROBLEMAS CON LOS REDONDEOS
                                        /*montoCalculado = (item.PrecioUnitario * item.Cantidad) - item.DescuentoMonto;
                                        montoCalculado = decimal.Round(montoCalculado, 2);
                                        if (item.MontoItem != montoCalculado) // Si el Monto de la Linea y el Monto del Item son distintos
                                            if ((item.MontoItem - montoCalculado <= 1 && item.MontoItem - montoCalculado >= -1) || (montoCalculado - item.MontoItem <= 1 && montoCalculado - item.MontoItem >= -1)) // Si la diferencia es de centésimos
                                                if (Math.Round(item.MontoItem / item.Cantidad, 2) != item.PrecioUnitario)
                                                    item.MontoItem = montoCalculado; // Entonces nos quedamos con el montoCalculado */

                                        if (item.DescuentoPct > 100 || item.DescuentoPct < -100)
                                            item.DescuentoPct = 0;

                                        ////// Verificacion para cuando son Donaciones
                                        ////if (item.MontoItem <= 0)
                                        ////    item.IndFact = Item_Det_FactIndFact.Item5; // Si es donacion va con el Item 5 el Ind Facturacion

                                        // NUEVA VALIDACION PARA DREGAL
                                        if (descEmpresa.ToString().Equals("DREG"))
                                        {
                                            if (item.DescuentoMonto == 0)
                                            {
                                                try
                                                {
                                                    decimal montoCalculadoPrecio = (item.MontoItem / item.Cantidad) - item.DescuentoMonto;
                                                    if (Math.Round(item.PrecioUnitario, 2) != Math.Round(montoCalculadoPrecio, 2)) // Si el Monto de la Linea y el Monto del Item son distintos
                                                        if (((item.PrecioUnitario - montoCalculadoPrecio) < 1 && (item.PrecioUnitario - montoCalculadoPrecio) > -1) || ((montoCalculadoPrecio - item.PrecioUnitario) < 1 && (montoCalculadoPrecio - item.PrecioUnitario) > -1)) // Si la diferencia es de centésimos
                                                            item.PrecioUnitario = Math.Round(montoCalculadoPrecio, 3);
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al recalcular montoItem Dreghal", ex.Message.ToString()); // Guarda log del Proceso
                                                }
                                            }

                                            //item.PrecioUnitario = item.MontoItem; // Solo para un documento especial
                                        }

                                        if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA"))
                                        {
                                            // Bloque de Codigo para cuando el MontoItem y PrecioUnitario no da correcto y la cantidad es 0 sin descuentos
                                            if (item.Cantidad == 1 && item.DescuentoMonto == 0 && item.DescuentoPct == 0)
                                                if (item.MontoItem != item.PrecioUnitario)
                                                    item.PrecioUnitario = item.MontoItem;
                                        }

                                        if (descEmpresa.ToString().Equals("TRIAL"))
                                            item.PrecioUnitario = Math.Round(item.PrecioUnitario, 2);

                                        item.MontoItem = Math.Round(item.MontoItem, 2);
                                        if (item.MontoItem <= 0)
                                        {
                                            item.PrecioUnitario = 0;
                                            item.DescuentoMonto = 0;
                                            item.DescuentoPct = 0;
                                        }

                                        RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                        int contadorRetenciones = 0;
                                        //montoTotalRetenciones = 0;
                                        if (oRSMyTableRetenciones != null)
                                        {
                                            while (!oRSMyTableRetenciones.EoF)
                                            {
                                                try
                                                {
                                                    decimal montoItemRetencion = Math.Round((decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value / objDoc.lineas.Count, 2);
                                                    Totales_BoletaRetencPercep totRetPerUnidad = new Totales_BoletaRetencPercep();
                                                    totRetPerUnidad.CodRet = (string)oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                                    decimal prueba = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                                    totRetPerUnidad.ValRetPerc = Math.Round((decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value / objDoc.lineas.Count, 2);//Math.Round((decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value / item.MontoItem, 2);
                                                    //arrayRetPer[contadorRetenciones] = totRetPerUnidad;
                                                    if (arrayRetPer[contadorRetenciones] == null)
                                                    {
                                                        arrayRetPer[contadorRetenciones] = totRetPerUnidad;
                                                    }
                                                    else
                                                    {
                                                        arrayRetPer[contadorRetenciones].ValRetPerc += totRetPerUnidad.ValRetPerc;
                                                    }

                                                    montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                                    RetPerc itemRetPer = new RetPerc();
                                                    itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                                    itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                                    itemRetPer.Tasa = 0;
                                                    itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                                    arrayItemRetPer[contadorRetenciones] = itemRetPer;


                                                    //item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount];// Las comento para que el documento no salga con Retenciones
                                                    //item.RetencPercep[cont] = itemRetPer;
                                                    contadorRetenciones++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                }
                                                oRSMyTableRetenciones.MoveNext();
                                            }
                                            item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                            item.RetencPercep = arrayItemRetPer; //camvio Nicolas Pecoy marzo 2023
                                        }
                                        oRSMyTableRetenciones.MoveFirst();
                                        /*RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                        int contadorRetenciones = 0;
                                        if (oRSMyTableRetenciones != null)
                                        {
                                            while (!oRSMyTableRetenciones.EoF)
                                            {
                                                try
                                                {
                                                    decimal montoItemRetencion = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                                    Totales_BoletaRetencPercep totRetPerUnidad = new Totales_BoletaRetencPercep();
                                                    totRetPerUnidad.CodRet = (string)oRSMyTableRetenciones.Fields.Item("U_COD_DGI").Value;
                                                    totRetPerUnidad.ValRetPerc = montoItemRetencion;//(decimal)oRSMyTableRetenciones.Fields.Item("WTAmntSC").Value;
                                                    arrayRetPer[contadorRetenciones] = totRetPerUnidad;

                                                    montoTotalRetenciones += montoItemRetencion; // Le sumo al Total de Retenciones el valor de este item.

                                                    RetPerc itemRetPer = new RetPerc();
                                                    itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                                    itemRetPer.MntSujetoaRet = (decimal)oRSMyTableRetenciones.Fields.Item("TaxbleAmnt").Value;
                                                    itemRetPer.Tasa = 0; //(decimal)oRSMyTableRetenciones.Fields.Item("Rate").Value;
                                                    itemRetPer.ValRetPerc = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value;
                                                    arrayItemRetPer[contadorRetenciones] = itemRetPer;
                                                    //item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                                    //item.RetencPercep[contadorRetenciones] = arrayItemRetPer[contadorRetenciones];
                                                    contadorRetenciones++;
                                                    ////factura.Detalle[0].RetencPercep = new RetPerc[1]; Las comento para que el documento no salga con Retenciones
                                                    ////factura.Detalle[0].RetencPercep[0] = itemRetPer;
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                }
                                                oRSMyTableRetenciones.MoveNext();
                                            }
                                            item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                            item.RetencPercep = arrayItemRetPer;
                                        }
                                        oRSMyTableRetenciones.MoveFirst();*/

                                        // CODIGO PARA LAS RETENCIONES
                                        /*int contRet = 0;
                                        if (oRSMyTableRetenciones != null)
                                        {
                                            while (!oRSMyTableRetenciones.EoF)
                                            {
                                                try
                                                {
                                                    Totales_ResgRetencPercep[] arrayRetPer = new Totales_ResgRetencPercep[oRSMyTableRetenciones.RecordCount];
                                                    RetPerc[] arrayItemRetPer = new RetPerc[oRSMyTableRetenciones.RecordCount];

                                                    Totales_ResgRetencPercep totRetPerUnidad = new Totales_ResgRetencPercep();
                                                    //totRetPerUnidad.CodRet = ObtenerCodigoDGICuentaResguardo((string)oRSMyTable.Fields.Item("CashAcct").Value);
                                                    totRetPerUnidad.CodRet = "2183119";
                                                    totRetPerUnidad.ValRetPerc = (decimal)oRSMyTableRetenciones.Fields.Item("WTAmnt").Value; ;
                                                    arrayRetPer[cont] = totRetPerUnidad;

                                                    RetPerc itemRetPer = new RetPerc();
                                                    itemRetPer.CodRet = totRetPerUnidad.CodRet;
                                                    itemRetPer.MntSujetoaRet = totRetPerUnidad.ValRetPerc;
                                                    itemRetPer.Tasa = 0;
                                                    itemRetPer.ValRetPerc = totRetPerUnidad.ValRetPerc;
                                                    arrayItemRetPer[cont] = itemRetPer;
                                                    //item.RetencPercep[0] = itemRetPer;
                                                    item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount];
                                                    item.RetencPercep[contRet] = arrayItemRetPer[cont];
                                                    contRet++;
                                                    oRSMyTableRetenciones.MoveNext();
                                                }
                                                catch (Exception ex)
                                                {
                                                    if (guardaLog == true)
                                                        guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR buscando RetenPercep agregando items al XML", ex.Message.ToString());
                                                }
                                            }
                                        }

                                        oRSMyTableRetenciones.MoveFirst();
                                        */// FINAL CODIGO RETENCIONES//
                                        /*if (oRSMyTableRetenciones.RecordCount > cont)
                                        {
                                            item.RetencPercep = new RetPerc[oRSMyTableRetenciones.RecordCount];// Las comento para que el documento no salga con Retenciones
                                            item.RetencPercep[cont] = arrayItemRetPer[cont];
                                        }*/
                                        detalle[cont] = item;

                                        //montoTotalItemsSubTotal += item.MontoItem; // Sumo el MontoItem

                                        if (!listaIndFact.Contains(item.IndFact))
                                            listaIndFact.Add(item.IndFact);

                                        //if (item.IndFact == Item_Det_BoletaIndFact.Item1)
                                        //    montoDscRcgGlobalExportyAsis += item.MontoItem;
                                        //else if (item.IndFact == Item_Det_BoletaIndFact.Item2)
                                        //    montoDscRcgGlobalIvaSuspens += item.MontoItem;

                                        cont++;
                                    }

                                    try
                                    {
                                        //// SE COMENTO 30/01
                                        ////if (redondeoDocumento != 0)
                                        ////{
                                        ////    redondeoDocumento = Math.Round(redondeoDocumento, 2);
                                        ////    // Agrego el item de redondeo
                                        ////    Item_Det_Boleta itemRedondeo = new Item_Det_Boleta();
                                        ////    int nroLinea = cont + 1;
                                        ////    itemRedondeo.NroLinDet = nroLinea.ToString();
                                        ////    itemRedondeo.NomItem = "Ajuste por Redondeo";
                                        ////    itemRedondeo.DscItem = "";
                                        ////    itemRedondeo.DescuentoMontoSpecified = false;
                                        ////    itemRedondeo.DescuentoPctSpecified = false;
                                        ////    itemRedondeo.IndAgenteRespSpecified = false;
                                        ////    itemRedondeo.RecargoMntSpecified = false;
                                        ////    itemRedondeo.RecargoPctSpecified = false;
                                        ////    itemRedondeo.MontoItem = redondeoDocumento;
                                        ////    itemRedondeo.Cantidad = 1;
                                        ////    if (itemRedondeo.MontoItem >= 0)
                                        ////    {
                                        ////        itemRedondeo.IndFact = Item_Det_BoletaIndFact.Item6;
                                        ////        itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem;
                                        ////    }
                                        ////    else
                                        ////    {
                                        ////        itemRedondeo.IndFact = Item_Det_BoletaIndFact.Item7;
                                        ////        itemRedondeo.PrecioUnitario = itemRedondeo.MontoItem * -1;
                                        ////        itemRedondeo.PrecioUnitario = decimal.Round(itemRedondeo.PrecioUnitario, 2);
                                        ////        itemRedondeo.MontoItem = itemRedondeo.PrecioUnitario;
                                        ////    }
                                        ////    itemRedondeo.MontoItem = Math.Round(itemRedondeo.MontoItem, 2);
                                        ////    itemRedondeo.UniMed = "N/A";
                                        ////    detalle[cont] = itemRedondeo;
                                        ////    hayItemRedondeo = true;
                                        ////    //montoTotalItemsSubTotal += itemRedondeo.MontoItem; // Sumo el MontoItem
                                        ////}
                                        ///arrayRetPer = new Totales_BoletaRetencPercep[oRSMyTableRetenciones.RecordCount];

                                    }
                                    catch (Exception ex)
                                    {
                                        if (guardaLog == true)
                                            guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Calcular el Redondeo", ex.Message.ToString()); // Guarda log del Proceso
                                    }
                                }
                                factura.Detalle = detalle;
                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception e)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ITEMS" + e.ToString());
                            }

                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                            {
                                try
                                {
                                    SubTotInfoSTI_Item[] subTotInfo = new SubTotInfoSTI_Item[1];
                                    SubTotInfoSTI_Item subTotInfoItem = new SubTotInfoSTI_Item();
                                    subTotInfoItem.GlosaSTI = "Total";
                                    subTotInfoItem.NroSTI = "1";
                                    //subTotInfoItem.OrdenSTI = "No lo envien";
                                    subTotInfoItem.ValSubtotSTI = montoTotalItemsSubTotal;
                                    subTotInfo[0] = subTotInfoItem;
                                    factura.SubTotInfo = subTotInfo;
                                }
                                catch (Exception ex)
                                { }
                            }

                            // Totales
                            try
                            {
                                Totales_Boleta totales = new Totales_Boleta();

                                decimal descuent = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;

                                totales.TpoMoneda = TipMonType.UYU; // Peso Uruguayo

                                if (moneda.Equals("USD") || moneda.Equals("U$S"))
                                    totales.TpoMoneda = TipMonType.USD; // Dolares
                                else if (moneda.Equals("EUR") || moneda.Equals("EU"))
                                    totales.TpoMoneda = TipMonType.EUR; // Euros
                                else if (moneda.Equals("CLP") || moneda.Equals("PCH"))
                                    totales.TpoMoneda = TipMonType.CLP; // Peso Chileno
                                else if (moneda.Equals("GBP") || moneda.Equals("LIB"))
                                    totales.TpoMoneda = TipMonType.GBP; // Libra
                                else if (moneda.Equals("CHF") || moneda.Equals("CHF"))
                                    totales.TpoMoneda = TipMonType.CHF; // Franco Suizo
                                else if (moneda.Equals("YEN") || moneda.Equals("JPY"))
                                    totales.TpoMoneda = TipMonType.JPY; // Yen
                                else if (moneda.Equals("CAD") || moneda.Equals("CAN"))
                                    totales.TpoMoneda = TipMonType.CAD; // Dólar Canadiense

                                totales.CantLinDet = objDoc.lineas.Count.ToString();
                                totales.TpoCambio = getDecimal(cotizacion.ToString());
                                totales.TpoCambio = decimal.Round(totales.TpoCambio, 3);
                                if (totales.TpoCambio != 0)
                                {
                                    totales.TpoCambioSpecified = true;
                                }
                                else
                                {
                                    totales.TpoCambioSpecified = false;
                                }

                                if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                    descuent = 0;

                                totales.MntNoGrv = TotalItemsNoGravados;
                                totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntNoGrv = (totales.MntNoGrv * (100 - descuent)) / 100;
                                    totales.MntNoGrv = decimal.Round(totales.MntNoGrv, 2);
                                }

                                if (totales.MntNoGrv == 0)
                                    totales.MntNoGrvSpecified = false;
                                else
                                    totales.MntNoGrvSpecified = true;

                                totales.MntIVaenSusp = TotalItemsIvaSuspens;
                                totales.MntIVaenSusp = decimal.Round(totales.MntIVaenSusp, 2);

                                if (descuent > 0) // Si tiene descuento global
                                {
                                    totales.MntIVaenSusp = (totales.MntIVaenSusp * (100 - descuent)) / 100;
                                    totales.MntIVaenSusp = decimal.Round(totales.MntIVaenSusp, 2);
                                }

                                if (totales.MntIVaenSusp == 0)
                                    totales.MntIVaenSuspSpecified = false;
                                else
                                    totales.MntIVaenSuspSpecified = true;

                                ////if (esNuevaVersionDGI && sumaDescuentos == true) // Si suma los descuentos
                                ////    descuent = 0;

                                // VERIFICO SI TIENE RETENCIONES
                                //oRSMyTableRetenciones = ObtenerRetencionesDocumento(codigoDocEntry); // Obtengo las Retenciones del documento


                                if (montoTotalRetenciones != 0) // Si tiene Retenciones
                                {
                                    montoTotalRetenciones = Math.Round(montoTotalRetenciones, 2);
                                    totales.MntTotRetenido = montoTotalRetenciones;
                                    totales.MntTotRetenidoSpecified = true;
                                    totales.RetencPercep = arrayRetPer;
                                }


                                totales.MntTotal = totales.MntNoGrv + totales.MntIVaenSusp; // + redondeoDocumento
                                totales.MntTotal = decimal.Round(totales.MntTotal, 2);
                                if (cotizacion != 0 && cotizacion != 1 && !moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si no es en Pesos, y si tiene cotizacion  if (cotizacion != 0 && cotizacion != 1 && !moneda.Equals("UYU") && !moneda.Equals("$")) // Si no es en Pesos, y si tiene cotizacion
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotalFC").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }
                                else
                                {
                                    totales.MntPagar = (decimal)oRSMyTable.Fields.Item("DocTotal").Value;
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 2);
                                }

                                /*if (totales.MntPagar != totales.MntTotal) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    totales.MntPagar = decimal.Round(totales.MntPagar, 0);
                                    totales.MntTotal = decimal.Round(totales.MntTotal, 0);
                                    if (totales.MntPagar != totales.MntTotal)
                                        if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                            totales.MntTotal = totales.MntPagar; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                }*/

                                if ((totales.MntPagar != totales.MntTotal) || (hayItemRedondeo == true && redondeoDocumento != 0)) // Si no son iguales entonces le hace un redondeo a 0
                                {
                                    if (totales.MntPagar == totales.MntTotal || (hayItemRedondeo == true && redondeoDocumento != 0))
                                    {
                                        if (redondeoDocumento > 0)
                                            totales.MntTotal = totales.MntPagar - redondeoDocumento;
                                        else
                                            totales.MntTotal = totales.MntPagar + (redondeoDocumento * -1); //  totales.MntTotal = totales.MntPagar + redondeoDocumento;
                                    }

                                    if ((totales.MntPagar - totales.MntTotal) <= 1 || (totales.MntTotal - totales.MntPagar) <= 1)
                                    {
                                        if (redondeoDocumento == 0)
                                            totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                        else
                                        {
                                            decimal diferenciaDoc = totales.MntPagar - (totales.MntTotal + redondeoDocumento);
                                            if (diferenciaDoc > Convert.ToDecimal(0.04) || diferenciaDoc < Convert.ToDecimal(-0.04)) //if (totales.MntPagar != (totales.MntTotal + redondeoDocumento)) //if ((totales.MntPagar - totales.MntTotal) != redondeoDocumento && (totales.MntTotal - totales.MntPagar) != redondeoDocumento) // LINEA nueva por el tema del redondeo
                                            {
                                                if (totales.MntPagar != totales.MntTotal + redondeoDocumento)
                                                {
                                                    totales.MntPagar = totales.MntTotal; // Si no son iguales y la diferencia es de 1 o menor entonces tomo como referencia el valor de la base de datos
                                                    redondeoDocumento = 0;
                                                }
                                            }
                                            else
                                                redondeoDocumento = totales.MntPagar - totales.MntTotal; // Si la diferencia es menor a 0.02 entonces recalculo el Redondeo
                                        }
                                    }
                                }
                                else
                                    redondeoDocumento = 0;



                                if (montoTotalRetenciones != 0)
                                    totales.MntPagar = totales.MntTotal - montoTotalRetenciones;

                                if (totales.TpoMoneda == TipMonType.USD)
                                {
                                    totales.TpoCambioSpecified = true;
                                    if (totales.TpoCambio < 2) // 
                                    {
                                        // Nueva verificacion de Infoland. Cuando el documento es en Dolares que es la moneda local igual debe ir el TC.
                                        totales.TpoCambio = obtenerTipoCambio(Convert.ToDateTime(oRSMyTable.Fields.Item("TaxDate").Value));
                                        totales.TpoCambio = decimal.Round(totales.TpoCambio, 2);
                                        //if (totales.TpoCambio != 0)
                                        //    totales.TpoCambioSpecified = true;
                                        //else
                                        //    totales.TpoCambioSpecified = false;
                                    }
                                }
                                else if (totales.TpoMoneda == TipMonType.UYU)
                                {
                                    totales.TpoCambio = 1;
                                    totales.TpoCambioSpecified = true;
                                }

                                // REDONDEOS
                                totales.MntTotal = Math.Round(totales.MntTotal, 2);
                                totales.MntPagar = Math.Round(totales.MntPagar, 2);
                                totales.MontoNF = Math.Round(totales.MontoNF, 2);

                                //totales.MontoNF = 0;
                                //totales.MontoNFSpecified = false;
                                totales.MontoNF = redondeoDocumento;
                                if (redondeoDocumento != 0)
                                    totales.MontoNFSpecified = true;
                                else
                                    totales.MontoNFSpecified = false;

                                encabezado.Totales = totales;
                                //encabezado.Totales.RetencPercep = arrayRetPer; // No las agrego al documento Pecoy

                                SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            }
                            catch (Exception ex)
                            {
                                SBO_Application.MessageBox("ERROR CARGANDO ENCABEZADO" + ex.ToString());
                            }

                            factura.Encabezado = encabezado;

                            //Descuentos y Recargos
                            ////try
                            ////{
                            ////    if (!descEmpresa.ToString().Equals("DREG") && !descEmpresa.ToString().Equals("ANCAL"))
                            ////    {
                            ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[1];
                            ////        DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();
                            ////        descuento.NroLinDR = "1";
                            ////        descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                            ////        descuento.TpoDR = TipoDRType.Item2;
                            ////        descuento.TpoDRSpecified = true;
                            ////        decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            ////        descuento.ValorDR = Math.Round(valorDR, 2);
                            ////        descuento.GlosaDR = "";


                            ////        if (descuento.ValorDR > 0)
                            ////        {
                            ////            descuentosRecargos[0] = descuento;
                            ////            factura.DscRcgGlobal = descuentosRecargos;
                            ////        }
                            ////        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                            ////    }
                            ////}
                            ////catch (Exception e)
                            ////{ }

                            try
                            {
                                if (!esNuevaVersionDGI || sumaDescuentos == false)
                                {
                                    // Nueva version de Sicfe va una linea por cada tipo de IndFact
                                    int nroLineaDR = 1;

                                    ////if (listaIndFact.Count != 0)
                                    ////{
                                    ////    decimal valorDR = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    ////    if (valorDR > 0)
                                    ////    {
                                    ////        DscRcgGlobalDRG_Item[] descuentosRecargos = new DscRcgGlobalDRG_Item[listaIndFact.Count];
                                    ////        foreach (Item_Det_BoletaIndFact itemIndFac in listaIndFact.ToList())
                                    ////        {
                                    ////            DscRcgGlobalDRG_Item descuento = new DscRcgGlobalDRG_Item();

                                    ////            montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSum").Value; // Monto total del descuento
                                    ////            if (!moneda.ToString().Equals(monedaStrISO) && !moneda.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos if ((!moneda.ToString().Equals("UYU") && !moneda.ToString().Equals("$")))// Si el documento no es en Pesos
                                    ////                montoTotalDescuentoBD = (decimal)oRSMyTable.Fields.Item("DiscSumFC").Value;// Monto total del descuento

                                    ////            decimal montoDscRcgGlobal = 0;

                                    ////            if (itemIndFac == Item_Det_BoletaIndFact.Item1)
                                    ////            {
                                    ////                montoDscRcgGlobal = montoDscRcgGlobalIVAEXE;
                                    ////                factura.Encabezado.Totales.MntNoGrvSpecified = true;
                                    ////            }
                                    ////            else if (itemIndFac == Item_Det_BoletaIndFact.Item2)
                                    ////            {
                                    ////                montoDscRcgGlobal = montoDscRcgGlobalIVAMIN;
                                    ////                factura.Encabezado.Totales.MntIVATasaMinSpecified = true;
                                    ////                factura.Encabezado.Totales.MntNetoIvaTasaMinSpecified = true;
                                    ////            }
                                    ////            else if (itemIndFac == Item_Det_BoletaIndFact.Item3)
                                    ////            {
                                    ////                montoDscRcgGlobal = montoDscRcgGlobalIVA;
                                    ////                factura.Encabezado.Totales.MntIVATasaBasicaSpecified = true;
                                    ////                factura.Encabezado.Totales.MntNetoIVATasaBasicaSpecified = true;
                                    ////            }
                                    ////            else if (itemIndFac == Item_Det_BoletaIndFact.Item4)
                                    ////            {
                                    ////                montoDscRcgGlobal = montoDscRcgGlobalIVAOTRO;
                                    ////                factura.Encabezado.Totales.MntIVAOtraSpecified = true;
                                    ////                factura.Encabezado.Totales.MntNetoIVAOtraSpecified = true;
                                    ////            }

                                    ////            if (listaIndFact.Count == 1 && itemIndFac == Item_Det_BoletaIndFact.Item1) // Si tiene descuento y es solo IVA Exento
                                    ////                montoTotalDescuentoBD = montoTotalItemsSubTotal - factura.Encabezado.Totales.MntNoGrv;
                                    ////            else
                                    ////            {
                                    ////                montoTotalDescuentoBD = (montoDscRcgGlobal * montoTotalDescuentoBD) / montoTotalItemsSubTotal;
                                    ////                montoTotalDescuentoBD = Math.Round(montoTotalDescuentoBD, 2);
                                    ////            }

                                    ////            descuento.NroLinDR = nroLineaDR.ToString();
                                    ////            descuento.TpoMovDR = DscRcgGlobalDRG_ItemTpoMovDR.D;
                                    ////            descuento.TpoDR = TipoDRType.Item1; // TipoDRType.Item2;
                                    ////            descuento.TpoDRSpecified = true;
                                    ////            descuento.ValorDR = Math.Round(montoTotalDescuentoBD, 2); // Math.Round(valorDR, 2);
                                    ////            descuento.GlosaDR = "Descuento " + valorDR.ToString() + " %";
                                    ////            descuento.IndFactDR = (DscRcgGlobalDRG_ItemIndFactDR)itemIndFac;
                                    ////            descuento.IndFactDRSpecified = true;

                                    ////            if (descuento.ValorDR > 0)
                                    ////            {
                                    ////                descuentosRecargos[nroLineaDR - 1] = descuento;
                                    ////                factura.DscRcgGlobal = descuentosRecargos;
                                    ////                nroLineaDR++;
                                    ////            }
                                    ////        }
                                    ////    }
                                    ////}

                                    SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                }
                            }
                            catch (Exception e)
                            { }

                            if (pEsCancelacion == true)
                            {
                                //Referencias
                                try
                                {
                                    int num = 1;

                                    SAPbobsCOM.Recordset oRSMyTableDocRef = null;
                                    oRSMyTableDocRef = obtenerDocumentoReferenciaBoletaCancelacion(codigoDocEntry); // Le paso el DocEntry

                                    bool notaCredGlobal = false;
                                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                        if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                            notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                    if (oRSMyTableDocRef.RecordCount == 0)
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                        ReferenciaReferencia refe = new ReferenciaReferencia();
                                        refe.NroLinRef = "1";
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                        refe.RazonRef = "Referencia a documento no codificado";
                                        if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                            refe.RazonRef = "Descuentos sobre las facturas del mes";
                                        refe.FechaCFErefSpecified = false;
                                        referencia[0] = refe;
                                        factura.Referencia = referencia;
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                    else if (oRSMyTableDocRef.RecordCount > 40)
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[1];
                                        ReferenciaReferencia refe = new ReferenciaReferencia();
                                        refe.NroLinRef = "1";
                                        refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                        refe.IndGlobalSpecified = true;
                                        refe.TpoDocRefSpecified = false;
                                        refe.RazonRef = "Afecta a mas de 40 CFE";
                                        refe.FechaCFErefSpecified = false;
                                        referencia[0] = refe;
                                        factura.Referencia = referencia;
                                        SBO_Application.RemoveWindowsMessage(SAPbouiCOM.BoWindowsMessageType.bo_WM_TIMER, true);
                                    }
                                    else
                                    {
                                        ReferenciaReferencia[] referencia = new ReferenciaReferencia[oRSMyTableDocRef.RecordCount];

                                        if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL"))
                                            if (oRSMyTable.Fields.Item("U_NOTA_CRED_GLOBAL").Value.ToString().Equals("SI"))
                                                notaCredGlobal = true; // Variable para indicar si es una Nota de Credito Global de Almena

                                        if (oRSMyTableDocRef != null)
                                        {
                                            while (!oRSMyTableDocRef.EoF)
                                            {
                                                //int baseEntry = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("BaseEntry").Value);
                                                ReferenciaReferencia refe = new ReferenciaReferencia();
                                                refe.NroLinRef = num.ToString();
                                                String serie = oRSMyTableDocRef.Fields.Item("FolioPref").Value;
                                                int nro = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("FolioNum").Value);
                                                int tipo = Convert.ToInt32(oRSMyTableDocRef.Fields.Item("Ref2").Value);
                                                if (String.IsNullOrEmpty(serie) || nro == null || nro == 0 || notaCredGlobal == true)
                                                {
                                                    refe.IndGlobal = ReferenciaReferenciaIndGlobal.Item1;
                                                    refe.IndGlobalSpecified = true;
                                                    refe.TpoDocRefSpecified = false;
                                                    refe.RazonRef = "Referencia a documento no codificado";
                                                    if ((descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("ANCAL")) && notaCredGlobal == true)
                                                        refe.RazonRef = "Descuentos sobre las facturas del mes";
                                                    refe.FechaCFErefSpecified = false;
                                                }
                                                else
                                                {
                                                    refe.IndGlobalSpecified = false;
                                                    refe.TpoDocRefSpecified = true;
                                                    if (tipo == 111)
                                                        refe.TpoDocRef = CFEType.Item111;
                                                    else if (tipo == 101)
                                                        refe.TpoDocRef = CFEType.Item101;
                                                    else if (tipo == 151)
                                                        refe.TpoDocRef = CFEType.Item151;

                                                    refe.Serie = serie;
                                                    refe.NroCFERef = nro.ToString();
                                                    refe.FechaCFErefSpecified = false;
                                                }

                                                referencia[num - 1] = refe;
                                                num++;
                                                oRSMyTableDocRef.MoveNext();
                                            }
                                        }

                                        factura.Referencia = referencia;
                                    }
                                }
                                catch (Exception ex)
                                { }
                            }

                            string saltoLinea = "<br>";
                            if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE"))
                                saltoLinea = "\r\n";

                            if (encabezado.IdDoc.FmaPago != IdDoc_BoletaFmaPago.Item1)
                            {
                                // Entonces es Credito
                                esContado = false;
                                if (descEmpresa.ToString().Equals("TENTA")) // Si es La Tentacion
                                {
                                    sicfeAdenda += "Mercadería recibida de conformidad\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Nombre:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "C.I:\r\n";
                                    sicfeAdenda += "\r\n";
                                    sicfeAdenda += "Firma:\r\n";
                                }
                            }
                            else
                                esContado = true;  // Verifico si es Contado o No para saber cuantas veces tengo que imprimir el PDF

                            XmlSerializer ser = new XmlSerializer(typeof(CFEDefTypeEBoleta));
                            using (var stream = new MemoryStream())
                            {
                                ser.Serialize(stream, factura);
                                stream.Flush();
                                stream.Seek(0, SeekOrigin.Begin);
                                xml.Load(stream);
                                result = xml.InnerXml;
                            }

                            //if (guardaLog == true)
                            //    guardaLogProceso(pFormFactura.ToString(), codigoFactura.ToString(), "XML Generado", result.ToString()); // Guarda log del Proceso

                            oRSMyTable.MoveNext();
                        }
                        catch (Exception e)
                        {
                            if (guardaLog == true)
                                guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                            SBO_Application.MessageBox("ERROR al generar factura" + e.ToString());
                        }
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception e)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Generar el XML", e.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR al generar el XML" + e.ToString());
            }
            return result;
        }

        public SICFERespuestaEnvioCFE EnviarCFE(string pFormFactura, String xmlFActuraCliente, string pCodCuentaResguardo)
        {
            bool esCancelacionResguardo = false;
            if (pFormFactura.ToString().Equals("99999"))
            {
                pFormFactura = "426";
                esCancelacionResguardo = true;
            }

            if (tipo.ToString().Equals("") || String.IsNullOrEmpty(tipo)) // Si tipo es "" entonces pasa a ser eTck
                tipo = "eTck";
            SICFERespuestaEnvioCFE respuesta = new SICFERespuestaEnvioCFE();
            String[] xmlCortado = xmlFActuraCliente.Split(new char[] { '<', '>' });
            String xml = "";
            for (int i = 1; i < xmlCortado.Length; i = i + 2)
            {
                if (i == 1)
                {
                    xml += "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + xmlCortado[2];
                }
                else if (i == 3)
                {
                    xml += "<nsAdenda:CFE_Adenda xmlns:nsAdenda=" + "\"http://cfe.dgi.gub.uy\"" + "><nsAd:CFE xmlns:nsAd=\"http://cfe.dgi.gub.uy\" version=\"1.0\">" + "  <nsAd:" + tipo + ">" + xmlCortado[4];
                }
                else if (i == 5)
                {
                    xml += "<nsAd:Encabezado>" + xmlCortado[6];
                }
                else if (xmlCortado.Length > (i + 1))
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">" + xmlCortado[i + 1];
                        }
                        else
                        {
                            String pal = xmlCortado[i].TrimStart(new char[] { '/' });
                            xml += "</nsAd:" + pal + ">" + xmlCortado[i + 1];
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">" + xmlCortado[i + 1];
                    }
                }
                else
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">";
                        }
                        else
                        {
                            xml += "<" + xmlCortado[i] + ">";
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">";
                    }
                }
            }
            //xml += "</nsAd:CFE></nsAdenda:CFE_Adenda>";
            xml += "</nsAd:CFE>";
            xml += "<nsAdenda:Adenda>" + sicfeAdenda.ToString().Trim() + "</nsAdenda:Adenda>";
            xml += "</nsAdenda:CFE_Adenda>";

            if (!esDocUruguayo && !tipo.ToString().Equals("CFEDefTypeERem")) // Si no es documento uruguayo entonces hace un Replace
            {
                xml = xml.Replace("<nsAd:DocRecep", "<nsAd:DocRecepExt");
                xml = xml.Replace("</nsAd:DocRecep", "</nsAd:DocRecepExt");
            }

            if (tipo == "CFEDefTypeERem") // Si es Remito
            {
                xml = xml.Replace("<nsAd:CFEDefTypeERem", "<nsAd:eRem");
                xml = xml.Replace("</nsAd:CFEDefTypeERem", "</nsAd:eRem");
                if (xml.Contains("<nsAd:TipoCFE>124</nsAd:TipoCFE>")) // Quiere decir que es un eRemito de Exportación
                {
                    xml = xml.Replace("<nsAd:eRem", "<nsAd:eRem_Exp");
                    xml = xml.Replace("</nsAd:eRem", "</nsAd:eRem_Exp");

                    string viaTransporte = ObtenerViaTransporteDocumento(codigoFactura, pFormFactura);
                    if (viaTransporte.ToString().Equals("0"))
                        viaTransporte = "9";
                    int modalidadVenta = 1; // Regimen General
                    string clausulaVenta = "FOB"; // Clausula de Venta

                    if (descEmpresa.ToString().Equals("PURAT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI") || descEmpresa.ToString().Equals("TRIGE"))
                    {
                        modalidadVenta = 90; // Regimen generalExportacion
                        clausulaVenta = obtenerClausulaVenta(codigoFactura, pFormFactura);
                    }
                    else if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL"))
                    {
                        viaTransporte = "8";
                        clausulaVenta = "N/A";
                    }

                    xml = xml.Replace("</nsAd:TipoTraslado>", "</nsAd:TipoTraslado><nsAd:ClauVenta>" + clausulaVenta.ToString() + "</nsAd:ClauVenta><nsAd:ModVenta>" + modalidadVenta + "</nsAd:ModVenta><nsAd:ViaTransp>" + viaTransporte + "</nsAd:ViaTransp>");
                }
                else
                {
                    // Si es un Remito comun
                    int inicialChar = xml.LastIndexOf("<nsAd:TpoMoneda>");
                    int finalChar = xml.LastIndexOf("</nsAd:TpoMoneda>");
                    string textoReemplazar = xml.Substring(inicialChar, finalChar - inicialChar);

                    xml = xml.Replace(textoReemplazar, "");
                    xml = xml.Replace("</nsAd:TpoMoneda>", string.Empty);

                    inicialChar = xml.LastIndexOf("<nsAd:MntTotal>");
                    finalChar = xml.LastIndexOf("</nsAd:MntTotal>");
                    textoReemplazar = xml.Substring(inicialChar, finalChar - inicialChar);

                    xml = xml.Replace(textoReemplazar, "");
                    xml = xml.Replace("</nsAd:MntTotal>", string.Empty);

                    inicialChar = xml.LastIndexOf("<nsAd:MntPagar>");
                    finalChar = xml.LastIndexOf("</nsAd:MntPagar>");
                    textoReemplazar = xml.Substring(inicialChar, finalChar - inicialChar);

                    xml = xml.Replace(textoReemplazar, "");
                    xml = xml.Replace("</nsAd:MntPagar>", string.Empty);

                    inicialChar = xml.LastIndexOf("<nsAd:MontoItem>");
                    finalChar = xml.LastIndexOf("</nsAd:MontoItem>");
                    textoReemplazar = xml.Substring(inicialChar, finalChar - inicialChar);

                    xml = xml.Replace(textoReemplazar, "");
                    xml = xml.Replace("</nsAd:MontoItem>", string.Empty);
                }
            }

            if (tipo == "CFEDefTypeEResg") // Si es Resguardo
            {
                xml = xml.Replace("<nsAd:CFEDefTypeEResg", "<nsAd:eResg");
                xml = xml.Replace("</nsAd:CFEDefTypeEResg", "</nsAd:eResg");
                //xml = xml.Replace("</nsAd:CodPaisRecep>", "</nsAd:CodPaisRecep><nsAd:DocRecep>217042750013</nsAd:DocRecep>");
            }

            if (tipo == "eFact_Exp") // Si es Factura Exportacion
            {
                string viaTransporte = ObtenerViaTransporteDocumento(codigoFactura, pFormFactura);
                if (viaTransporte.ToString().Equals("0"))
                    viaTransporte = "9";
                int modalidadVenta = 1; // Regimen General
                string clausulaVenta = "FOB"; // Clausula de Venta

                if (descEmpresa.ToString().Equals("PURAT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI") || descEmpresa.ToString().Equals("TRIGE"))
                {
                    modalidadVenta = 90; // Regimen generalExportacion
                    clausulaVenta = obtenerClausulaVenta(codigoFactura, pFormFactura);
                }
                else if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL"))
                {
                    viaTransporte = "8";
                    clausulaVenta = "N/A";
                }
                else if (descEmpresa.ToString().Equals("CIMSA")) //ASPL - 2020.09.30 - ser modificado para venta en Particular
                    clausulaVenta = obtenerClausulaVenta(codigoFactura, pFormFactura);

                xml = xml.Replace("</nsAd:FmaPago>", "</nsAd:FmaPago><nsAd:ClauVenta>" + clausulaVenta.ToString() + "</nsAd:ClauVenta><nsAd:ModVenta>" + modalidadVenta + "</nsAd:ModVenta><nsAd:ViaTransp>" + viaTransporte + "</nsAd:ViaTransp>");
                //xml = xml.Replace("<nsAd:IdDoc xmlns=\"http://cfe.dgi.gub.uy\">", "<nsAd:IdDoc>");
                //xml = xml.Replace("</nsAd:CodPaisRecep>", "</nsAd:CodPaisRecep><nsAd:DocRecep>217042750013</nsAd:DocRecep>");

            }

            if (xml.Contains("<nsAd:Compl_Fiscal>"))
            {
                if (xml.Contains("<nsAd:TipoCFE>101</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>101</nsAd:TipoCFE>", "<nsAd:TipoCFE>131</nsAd:TipoCFE>");
                else if (xml.Contains("<nsAd:TipoCFE>102</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>102</nsAd:TipoCFE>", "<nsAd:TipoCFE>132</nsAd:TipoCFE>");
                else if (xml.Contains("<nsAd:TipoCFE>111</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>111</nsAd:TipoCFE>", "<nsAd:TipoCFE>141</nsAd:TipoCFE>");
                else if (xml.Contains("<nsAd:TipoCFE>112</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>112</nsAd:TipoCFE>", "<nsAd:TipoCFE>142</nsAd:TipoCFE>");

                xml = xml.Replace("<nsAd:Compl_Fiscal><nsAd:Item", "<nsAd:Compl_Fiscal><nsAd:Compl_Fiscal_Data");
                xml = xml.Replace("</nsAd:Item></nsAd:Compl_Fiscal>", "</nsAd:Compl_Fiscal_Data></nsAd:Compl_Fiscal>");
            }

            if (descEmpresa.ToString().Equals("RURAL"))
            {
                xml = xml.Replace("SALTOLINEA", "&lt;br&gt;&lt;br&gt;"); // <br><br>
            }

            xml = xml.Replace("<br>", "&lt;br&gt;");

            String texto = "";
            string objType = obtenerObjTypeDocumento(pFormFactura);
            //string codigoEnvio = objType + codigoDocEntry.ToString().PadLeft(28, '0');  // Para llenar de espacios vacíos. Los dos primeros lugares es ObjType y 000 hasta llegar al DocEntry
            string codigoEnvio = objType;

            if (esCancelacionResguardo == true) // Si es una Cancelacion le sumo un 0 adelante del 426
                codigoEnvio = objType + "C"; //codigoEnvio = objType + "C" + codigoDocEntry.ToString().PadLeft(27, '0');  // Para llenar de espacios vacíos. Los dos primeros lugares es ObjType y 000 hasta llegar al DocEntry

            if (String.IsNullOrEmpty(pCodCuentaResguardo.ToString()))
                codigoEnvio += codigoDocEntry.ToString().PadLeft(10, '0') + "-" + codigoFactura.ToString().PadLeft(10, '0');
            else
                codigoEnvio += codigoDocEntry.ToString().PadLeft(10, '0') + "-" + pCodCuentaResguardo.ToString().PadLeft(10, '0'); // Si es un eResg le concateno el codigo de la cuenta DGI

            try
            {
                obtenerDatosConexion(false, false); // Verifico todos los datos de conexion a Facturación Electrónica

                using (var client = new ImpSICFEEmisor(sicfeRutaWS.ToString()))
                {
                    string templateEnvioCFE = "";
                    string clienteEnvioCFE = ""; // Por defecto se envía vacío
                    if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CIMSA"))
                    {
                        if (String.IsNullOrEmpty(sicfeCliente))
                            clienteEnvioCFE = sicfeTemplate.ToString();
                        else
                        {
                            templateEnvioCFE = sicfeTemplate;
                            clienteEnvioCFE = sicfeCliente;
                        }
                    }
                    else if (descEmpresa.ToString().Equals("ETARE"))
                    {
                        impresoraNombre = nombreImpresoraUsuario;
                        templateEnvioCFE = templateImpresoraUsuario;
                    }
                    else if (descEmpresa.ToString().Equals("RURAL"))
                    {   // Si es Almacen Rural, sucursal Florida, y un Contado //ASPL. 2020-04-20 Se aplica a todas las sucursales y credito.
                        //if (esContado == true)
                        //{
                        templateImpresoraUsuario = "";

                        if (!String.IsNullOrEmpty(nombreImpresoraUsuario))
                        {
                            impresoraNombre = nombreImpresoraUsuario;
                        }

                        templateEnvioCFE = templateImpresoraUsuario;

                        if (tipo == "eFact_Exp")
                        {
                            templateEnvioCFE = "A4_Exportacion";
                            impresoraNombre = "";
                        }
                        else if (tipo == "CFEDefTypeERem")
                        {
                            templateImpresoraUsuario = "rollo11_remito";
                            templateEnvioCFE = templateImpresoraUsuario;
                        }
                        else
                        {
                            templateEnvioCFE = sicfeTemplate.ToString();

                            if (!String.IsNullOrEmpty(templateEnvioCFE.ToString()))
                            {
                                imprimePDFDefecto = true; // Lo cambio a true para que entre en la funcion imprimirPDF donde tengo el control para que no imprima
                                noImprimeNingunModo = true;
                            }
                        }
                        //}
                        //else
                        //    impresoraNombre = ""; // Si no es Contado va vacío.
                    }
                    else if (descEmpresa.ToString().Equals("AEG"))
                    {
                        //FECHA 26/6/2020
                        clienteEnvioCFE = sicfeCliente;
                    }

                    guardarOperacionCSV(codigoDocEntry.ToString(), objType.ToString(), "Envio a Sicfe"); // Guarda log en Archivo CSV

                    if (pFormFactura.Equals("170"))
                        versionSicfe = "";

                    if (descEmpresa.ToString().Equals("RURAL"))
                        respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, 22, 0, impresoraNombre, "", false, true, versionSicfe); // 1.34.7 - ASPL. 2021-11-12 - no es necesario que lo envíen el nombre de la plantilla
                    else
                        respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, 22, 0, impresoraNombre, templateEnvioCFE, false, true, versionSicfe);

                    if (descEmpresa.ToString().Equals("ETARE") || (descEmpresa.ToString().Equals("RURAL") && !String.IsNullOrEmpty(templateEnvioCFE) && !String.IsNullOrEmpty(impresoraNombre)))
                        reimprimirPDF(respuesta.IdCFE, templateEnvioCFE, impresoraNombre);

                    // respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, false, 0, false, 0, false, impresoraNombre,templateEnvioCFE,false, false, true, true, "1.34.7"); //1.29 // 1.33

                    //ANTERIORrespuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, true, 0, false, 0, false, "", "NULL", false, false, true, true, "1.33");
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al Enviar a SICFE", ex.Message.ToString()); // Guarda log del Proceso
                texto = ex.Message.ToString();
            }

            if (!String.IsNullOrEmpty(texto))
                SBO_Application.MessageBox("Mensaje Error:" + texto.ToString());

            if (!String.IsNullOrEmpty(respuesta.Descripcion) && !String.IsNullOrEmpty(respuesta.Codigo.ToString()))
                texto = respuesta.Descripcion.ToString();

            if (!String.IsNullOrEmpty(texto))
            {
                creoFactura = true; // La paso a True cuando devuelve error para que no vuelva a entrar sino queda en un bucle
                SBO_Application.MessageBox("ERROR-> Descripcion:" + texto.ToString() + ". Código: " + respuesta.Codigo.ToString());
            }

            bool existeDatosRespCFE = false;
            if (!String.IsNullOrEmpty(texto) && texto.ToString().Equals("Ya existe el cfe."))
            {
                existeDatosRespCFE = true;
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }

            if ((!String.IsNullOrEmpty(texto) || !String.IsNullOrEmpty(respuesta.Descripcion)) && existeDatosRespCFE == false)
            {
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }
            else
            {
                // Entonces es correcto
                if (guardaDatosRespCFE == true) // Si guarda los Datos de Respuesta de SICFE
                {
                    try
                    {
                        string tipoDocumento = "FA";
                        if (pFormFactura.ToString().Equals("140") || pFormFactura.ToString().Equals("182") || pFormFactura.ToString().Equals("143"))
                            tipoDocumento = "RE";
                        else if (pFormFactura.ToString().Equals("940"))
                            tipoDocumento = "TS";
                        else if (pFormFactura.ToString().Equals("426"))
                            tipoDocumento = "RS";
                        else if (pFormFactura.ToString().Equals("65303"))
                            tipoDocumento = "ND";
                        else if (pFormFactura.ToString().Equals("65307"))
                            tipoDocumento = "FE";
                        else if (pFormFactura.ToString().Equals("181"))
                            tipoDocumento = "NC";

                        guardarOperacionCSV(codigoDocEntry, objType, "Guardo Respuesta ADDDATOSCFE"); // Guarda log en Archivo CSV

                        if (existeDatosRespCFE == true)
                            existeDatosRespCFE = existeRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);

                        if (existeDatosRespCFE == false)
                            guardaRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);
                    }
                    catch (Exception exx)
                    {
                        if (guardaLog == true)
                            guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al guardar los datos de Respuesta", exx.Message.ToString()); // Guarda log del Proceso
                    }
                }
            }

            try
            {
                if (guardaImagenQR == true)
                {
                    if (String.IsNullOrEmpty(texto))
                    {
                        //guardarDatosQR(respuesta, codigoEnvio);
                        generarImagenQR(respuesta.LinkQR, codigoDocEntry, codigoFactura);
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al guardar el codigo QR", ex.Message.ToString());
                SBO_Application.MessageBox("ERROR al guardar el QR");
            }

            return respuesta;
        }

        public SICFERespuestaEnvioCFE EnviarCFENotaCreditoDebito(string pFormFactura, String xmlFActuraCliente)
        {
            if (tipo.ToString().Equals("") || String.IsNullOrEmpty(tipo)) // Si tipo es "" entonces pasa a ser eTck
                tipo = "eTck";
            SICFERespuestaEnvioCFE respuesta = new SICFERespuestaEnvioCFE();
            String[] xmlCortado = xmlFActuraCliente.Split(new char[] { '<', '>' });
            String xml = "";
            for (int i = 1; i < xmlCortado.Length; i = i + 2)
            {
                if (i == 1)
                {
                    xml += "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + xmlCortado[2];
                }
                else if (i == 3)
                {

                    xml += "<nsAdenda:CFE_Adenda xmlns:nsAdenda=" + "\"http://cfe.dgi.gub.uy\"" + "><nsAd:CFE xmlns:nsAd=\"http://cfe.dgi.gub.uy\" version=\"1.0\">" + "  <nsAd:" + tipo + ">" + xmlCortado[4];

                }
                else if (i == 5)
                {
                    xml += "<nsAd:Encabezado>" + xmlCortado[6];
                }
                else if (xmlCortado.Length > (i + 1))
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">" + xmlCortado[i + 1];
                        }
                        else
                        {
                            String pal = xmlCortado[i].TrimStart(new char[] { '/' });
                            xml += "</nsAd:" + pal + ">" + xmlCortado[i + 1];
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">" + xmlCortado[i + 1];
                    }
                }
                else
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">";
                        }
                        else
                        {
                            xml += "<" + xmlCortado[i] + ">";
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">";
                    }
                }
            }
            //xml += "</nsAd:CFE></nsAdenda:CFE_Adenda>";
            xml += "</nsAd:CFE>";
            xml += "<nsAdenda:Adenda>" + sicfeAdenda.ToString().Trim() + "</nsAdenda:Adenda>";
            xml += "</nsAdenda:CFE_Adenda>";

            if (!esDocUruguayo) // Si no es documento uruguayo entonces hace un Replace
            {
                xml = xml.Replace("<nsAd:DocRecep", "<nsAd:DocRecepExt");
                xml = xml.Replace("</nsAd:DocRecep", "</nsAd:DocRecepExt");

                // Si es Tipo Documento 4 (Otros) y Documento 99 (Porque no tiene documento) entonces le hago un Replace y le pongo Codigo Pais 99
                if (xml.Contains("<nsAd:TipoDocRecep>4</nsAd:TipoDocRecep>"))
                    if (xml.Contains("<nsAd:DocRecepExt>99</nsAd:DocRecepExt>"))
                        xml = xml.Replace("<nsAd:CodPaisRecep>UY</nsAd:CodPaisRecep>", "<nsAd:CodPaisRecep>99</nsAd:CodPaisRecep>");
            }

            if (xml.Contains("<nsAd:Compl_Fiscal>"))
            {
                if (xml.Contains("<nsAd:TipoCFE>101</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>101</nsAd:TipoCFE>", "<nsAd:TipoCFE>131</nsAd:TipoCFE>");
                else if (xml.Contains("<nsAd:TipoCFE>102</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>102</nsAd:TipoCFE>", "<nsAd:TipoCFE>132</nsAd:TipoCFE>");
                else if (xml.Contains("<nsAd:TipoCFE>111</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>111</nsAd:TipoCFE>", "<nsAd:TipoCFE>141</nsAd:TipoCFE>");
                else if (xml.Contains("<nsAd:TipoCFE>112</nsAd:TipoCFE>"))
                    xml = xml.Replace("<nsAd:TipoCFE>112</nsAd:TipoCFE>", "<nsAd:TipoCFE>142</nsAd:TipoCFE>");

                xml = xml.Replace("<nsAd:Compl_Fiscal><nsAd:Item", "<nsAd:Compl_Fiscal><nsAd:Compl_Fiscal_Data");
                xml = xml.Replace("</nsAd:Item></nsAd:Compl_Fiscal>", "</nsAd:Compl_Fiscal_Data></nsAd:Compl_Fiscal>");
            }

            if (descEmpresa.ToString().Equals("RURAL"))
            {
                xml = xml.Replace("SALTOLINEA", "&lt;br&gt;&lt;br&gt;"); // <br><br>
            }

            xml = xml.Replace("<br>", "&lt;br&gt;");

            String texto = "";
            string objType = obtenerObjTypeDocumento(pFormFactura);
            string codigoEnvio = objType + codigoDocEntry.ToString().PadLeft(10, '0') + "-" + codigoFactura.ToString().PadLeft(10, '0');

            try
            {
                obtenerDatosConexion(false, false); // Verifico todos los datos de conexion a Facturación Electrónica
                using (var client = new ImpSICFEEmisor(sicfeRutaWS.ToString()))
                {
                    string templateEnvioCFE = "";
                    string clienteEnvioCFE = ""; // Por defecto se envía vacío
                    string recurso = ""; // Por defecto se envía vacío
                    if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CIMSA"))
                    {
                        if (String.IsNullOrEmpty(sicfeCliente))
                            clienteEnvioCFE = sicfeTemplate.ToString();
                        else
                        {
                            templateEnvioCFE = sicfeTemplate;
                            clienteEnvioCFE = sicfeCliente;
                        }
                    }
                    else if (descEmpresa.ToString().Equals("ETARE"))
                    {
                        impresoraNombre = nombreImpresoraUsuario;
                        templateEnvioCFE = templateImpresoraUsuario;
                    }
                    else if (descEmpresa.ToString().Equals("RURAL"))
                    {   // Si es Almacen Rural, sucursal Florida, y un Contado
                        //if (esContado == true) //ASPL - 2020.04.20, se aplica para todas las sucursales y credito.
                        //{
                        if (!String.IsNullOrEmpty(nombreImpresoraUsuario))
                        {
                            impresoraNombre = nombreImpresoraUsuario;
                        }


                        templateEnvioCFE = sicfeTemplate.ToString();
                        if (!String.IsNullOrEmpty(templateEnvioCFE.ToString()))
                        {
                            imprimePDFDefecto = true; // Lo cambio a true para que entre en la funcion imprimirPDF donde tengo el control para que no imprima
                            noImprimeNingunModo = true;
                        }
                        //}
                        //else
                        //    impresoraNombre = ""; // Si no es Contado va vacío.
                    }

                    guardarOperacionCSV(codigoDocEntry.ToString(), objType.ToString(), "Envio a Sicfe"); // Guarda log en Archivo CSV

                    if (descEmpresa.ToString().Equals("RURAL"))
                        respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, 22, 0, impresoraNombre, "", false, true, versionSicfe); //1.29 // 1.33
                    else
                        respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, 22, 0, impresoraNombre, templateEnvioCFE, false, true, versionSicfe); //1.29 // 1.33
                    //respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, true, 0, true, 0, true, impresoraNombre, "", false, false, true, true, "1.34.7"); //1.29 // 1.33

                    if (descEmpresa.ToString().Equals("ETARE") || (descEmpresa.ToString().Equals("RURAL") && !String.IsNullOrEmpty(templateEnvioCFE) && !String.IsNullOrEmpty(impresoraNombre)))
                        reimprimirPDF(respuesta.IdCFE, templateEnvioCFE, impresoraNombre);

                    //if (guardaLog == true)
                    //    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    //// Bloque de codigo para controlar el Redondeo del documentorespuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, 0, 0, "", "", false, true, "1.34.7");
                    //ANTERIOR respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, true, 0, false, 0, false, "", "", false, false, true, true, "1.33");
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al Enviar a SICFE", ex.Message.ToString()); // Guarda log del Proceso
                texto = ex.Message.ToString();
            }

            if (!String.IsNullOrEmpty(texto))
                SBO_Application.MessageBox("Mensaje Error:" + texto.ToString());

            if (!String.IsNullOrEmpty(respuesta.Descripcion) && !String.IsNullOrEmpty(respuesta.Codigo.ToString()))
                texto = respuesta.Descripcion.ToString();

            if (!String.IsNullOrEmpty(texto))
            {
                creoFactura = true; // La paso a True cuando devuelve error para que no vuelva a entrar sino queda en un bucle
                SBO_Application.MessageBox("ERROR-> Descripcion:" + texto.ToString() + ". Código: " + respuesta.Codigo.ToString());
            }

            bool existeDatosRespCFE = false;
            if (!String.IsNullOrEmpty(texto) && texto.ToString().Equals("Ya existe el cfe."))
            {
                existeDatosRespCFE = true;
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }

            if ((!String.IsNullOrEmpty(texto) || !String.IsNullOrEmpty(respuesta.Descripcion)) && existeDatosRespCFE == false)
            {
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }
            else
            {
                // Entonces es correcto
                if (guardaDatosRespCFE == true) // Si guarda los Datos de Respuesta de SICFE
                {
                    string tipoDocumento = "ND";
                    if (pFormFactura.ToString().Equals("179"))
                        tipoDocumento = "NC";

                    guardarOperacionCSV(codigoDocEntry, objType, "Guardo Respuesta ADDDATOSCFE"); // Guarda log en Archivo CSV

                    if (existeDatosRespCFE == true)
                        existeDatosRespCFE = existeRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);

                    if (existeDatosRespCFE == false)
                        guardaRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);
                }
            }

            try
            {
                if (guardaImagenQR == true)
                {
                    if (String.IsNullOrEmpty(texto))
                    {
                        //guardarDatosQR(respuesta, codigoEnvio);
                        generarImagenQR(respuesta.LinkQR, codigoDocEntry, codigoFactura);
                    }
                }
            }
            catch (Exception ex)
            { }

            return respuesta;
        }

        public SICFERespuestaEnvioCFE EnviarCFENotaCreditoDebitoExportacion(string pFormFactura, String xmlFActuraCliente)
        {
            if (tipo.ToString().Equals("") || String.IsNullOrEmpty(tipo)) // Si tipo es "" entonces pasa a ser eTck
                tipo = "eTck";

            SICFERespuestaEnvioCFE respuesta = new SICFERespuestaEnvioCFE();
            String[] xmlCortado = xmlFActuraCliente.Split(new char[] { '<', '>' });
            String xml = "";
            for (int i = 1; i < xmlCortado.Length; i = i + 2)
            {
                if (i == 1)
                {
                    xml += "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + xmlCortado[2];
                }
                else if (i == 3)
                {

                    xml += "<nsAdenda:CFE_Adenda xmlns:nsAdenda=" + "\"http://cfe.dgi.gub.uy\"" + "><nsAd:CFE xmlns:nsAd=\"http://cfe.dgi.gub.uy\" version=\"1.0\">" + "  <nsAd:" + tipo + ">" + xmlCortado[4];

                }
                else if (i == 5)
                {
                    xml += "<nsAd:Encabezado>" + xmlCortado[6];
                }
                else if (xmlCortado.Length > (i + 1))
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">" + xmlCortado[i + 1];
                        }
                        else
                        {
                            String pal = xmlCortado[i].TrimStart(new char[] { '/' });
                            xml += "</nsAd:" + pal + ">" + xmlCortado[i + 1];
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">" + xmlCortado[i + 1];
                    }
                }
                else
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">";
                        }
                        else
                        {
                            xml += "<" + xmlCortado[i] + ">";
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">";
                    }
                }
            }
            //xml += "</nsAd:CFE></nsAdenda:CFE_Adenda>";
            xml += "</nsAd:CFE>";
            xml += "<nsAdenda:Adenda>" + sicfeAdenda.ToString().Trim() + "</nsAdenda:Adenda>";
            xml += "</nsAdenda:CFE_Adenda>";

            if (!esDocUruguayo) // Si no es documento uruguayo entonces hace un Replace
            {
                xml = xml.Replace("<nsAd:DocRecep", "<nsAd:DocRecepExt");
                xml = xml.Replace("</nsAd:DocRecep", "</nsAd:DocRecepExt");

                // Si es Tipo Documento 4 (Otros) y Documento 99 (Porque no tiene documento) entonces le hago un Replace y le pongo Codigo Pais 99
                if (xml.Contains("<nsAd:TipoDocRecep>4</nsAd:TipoDocRecep>"))
                    if (xml.Contains("<nsAd:DocRecepExt>99</nsAd:DocRecepExt>"))
                        xml = xml.Replace("<nsAd:CodPaisRecep>UY</nsAd:CodPaisRecep>", "<nsAd:CodPaisRecep>99</nsAd:CodPaisRecep>");
            }

            if (tipo == "eFact_Exp") // Si es Factura Exportacion
            {
                string viaTransporte = ObtenerViaTransporteDocumento(codigoFactura, pFormFactura);
                if (viaTransporte.ToString().Equals("0"))
                    viaTransporte = "9";
                int modalidadVenta = 1; // Regimen General
                string clausulaVenta = "FOB"; // Clausula de Venta

                if (descEmpresa.ToString().Equals("PURAT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI"))
                {
                    modalidadVenta = 90; // Regimen generalExportacion
                    clausulaVenta = obtenerClausulaVenta(codigoFactura, pFormFactura);
                }
                else if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL"))
                {
                    viaTransporte = "8";
                    clausulaVenta = "N/A";
                }

                xml = xml.Replace("</nsAd:FmaPago>", "</nsAd:FmaPago><nsAd:ClauVenta>" + clausulaVenta.ToString() + "</nsAd:ClauVenta><nsAd:ModVenta>" + modalidadVenta + "</nsAd:ModVenta><nsAd:ViaTransp>" + viaTransporte + "</nsAd:ViaTransp>");
                //xml = xml.Replace("<nsAd:IdDoc xmlns=\"http://cfe.dgi.gub.uy\">", "<nsAd:IdDoc>");
                //xml = xml.Replace("</nsAd:CodPaisRecep>", "</nsAd:CodPaisRecep><nsAd:DocRecep>217042750013</nsAd:DocRecep>");
            }

            xml = xml.Replace("<br>", "&lt;br&gt;");

            String texto = "";
            string objType = obtenerObjTypeDocumento(pFormFactura);
            string codigoEnvio = objType + codigoDocEntry.ToString().PadLeft(10, '0') + "-" + codigoFactura.ToString().PadLeft(10, '0');
            try
            {
                obtenerDatosConexion(false, false); // Verifico todos los datos de conexion a Facturación Electrónica
                using (var client = new ImpSICFEEmisor(sicfeRutaWS.ToString()))
                {
                    string clienteEnvioCFE = ""; // Por defecto se envía vacío
                    if (descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("CIMSA"))
                    {
                        if (String.IsNullOrEmpty(sicfeCliente))
                            clienteEnvioCFE = sicfeTemplate.ToString();
                        else
                            clienteEnvioCFE = sicfeCliente;
                    }

                    guardarOperacionCSV(codigoDocEntry.ToString(), objType.ToString(), "Envio a Sicfe"); // Guarda log en Archivo CSV

                    respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, 22, 0, "", "", false, true, versionSicfe); //1.29 // 1.33
                    // respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, true, 0, true, 0, true, "","", false, false, true, true, "1.34.7"); //1.29 // 1.33

                    //if (guardaLog == true)
                    //    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    //// Bloque de codigo para controlar el Redondeo del documentorespuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, 0, 0, "", "", false, true, "1.34.7");
                    //ANTERIOR respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, true, 0, false, 0, false, "", "", false, false, true, true, "1.33");
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al Enviar a SICFE", ex.Message.ToString()); // Guarda log del Proceso
                texto = ex.Message.ToString();
            }

            if (!String.IsNullOrEmpty(texto))
                SBO_Application.MessageBox("Mensaje Error:" + texto.ToString());

            if (!String.IsNullOrEmpty(respuesta.Descripcion) && !String.IsNullOrEmpty(respuesta.Codigo.ToString()))
                texto = respuesta.Descripcion.ToString();

            if (!String.IsNullOrEmpty(texto))
            {
                creoFactura = true; // La paso a True cuando devuelve error para que no vuelva a entrar sino queda en un bucle
                SBO_Application.MessageBox("ERROR-> Descripcion:" + texto.ToString() + ". Código: " + respuesta.Codigo.ToString());
            }

            bool existeDatosRespCFE = false;
            if (!String.IsNullOrEmpty(texto) && texto.ToString().Equals("Ya existe el cfe."))
            {
                existeDatosRespCFE = true;
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }

            if ((!String.IsNullOrEmpty(texto) || !String.IsNullOrEmpty(respuesta.Descripcion)) && existeDatosRespCFE == false)
            {
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }
            else
            {
                // Entonces es correcto
                if (guardaDatosRespCFE == true) // Si guarda los Datos de Respuesta de SICFE
                {
                    string tipoDocumento = "ND";
                    if (pFormFactura.ToString().Equals("179"))
                        tipoDocumento = "NC";

                    guardarOperacionCSV(codigoDocEntry, objType, "Guardo Respuesta ADDDATOSCFE"); // Guarda log en Archivo CSV

                    if (existeDatosRespCFE == true)
                        existeDatosRespCFE = existeRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);

                    if (existeDatosRespCFE == false)
                        guardaRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);
                }
            }

            try
            {
                if (guardaImagenQR == true)
                {
                    if (String.IsNullOrEmpty(texto))
                    {
                        //guardarDatosQR(respuesta, codigoEnvio);
                        generarImagenQR(respuesta.LinkQR, codigoDocEntry, codigoFactura);
                    }
                }
            }
            catch (Exception ex)
            { }

            return respuesta;
        }

        public SICFERespuestaEnvioCFE EnviarCFEBoletaEntrada(string pFormFactura, String xmlFActuraCliente)
        {
            tipo = "eBoleta";
            SICFERespuestaEnvioCFE respuesta = new SICFERespuestaEnvioCFE();
            String[] xmlCortado = xmlFActuraCliente.Split(new char[] { '<', '>' });
            String xml = "";
            for (int i = 1; i < xmlCortado.Length; i = i + 2)
            {
                if (i == 1)
                {
                    xml += "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + xmlCortado[2];
                }
                else if (i == 3)
                {
                    xml += "<nsAdenda:CFE_Adenda xmlns:nsAdenda=" + "\"http://cfe.dgi.gub.uy\"" + "><nsAd:CFE xmlns:nsAd=\"http://cfe.dgi.gub.uy\" version=\"1.0\">" + "  <nsAd:" + tipo + ">" + xmlCortado[4];
                }
                else if (i == 5)
                {
                    xml += "<nsAd:Encabezado>" + xmlCortado[6];
                }
                else if (xmlCortado.Length > (i + 1))
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">" + xmlCortado[i + 1];
                        }
                        else
                        {
                            String pal = xmlCortado[i].TrimStart(new char[] { '/' });
                            xml += "</nsAd:" + pal + ">" + xmlCortado[i + 1];
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">" + xmlCortado[i + 1];
                    }
                }
                else
                {
                    if (xmlCortado[i].StartsWith("/"))
                    {
                        if (xmlCortado[i].Contains("eFact"))
                        {
                            xml += "</nsAd:" + tipo + ">";
                        }
                        else
                        {
                            xml += "<" + xmlCortado[i] + ">";
                        }
                    }
                    else
                    {
                        xml += "<nsAd:" + xmlCortado[i] + ">";
                    }
                }
            }
            //xml += "</nsAd:CFE></nsAdenda:CFE_Adenda>";
            xml += "</nsAd:CFE>";
            xml += "<nsAdenda:Adenda>" + sicfeAdenda.ToString().Trim() + "</nsAdenda:Adenda>";
            xml += "</nsAdenda:CFE_Adenda>";

            xml = xml.Replace("CFEDefTypeEBoleta", "eBoleta");
            xml = xml.Replace("nsAd:eBoleta", "eBoleta");
            xml = xml.Replace("nsAdenda:", "");
            xml = xml.Replace("nsAd:", "");
            xml = xml.Replace(":nsAdenda", "");
            xml = xml.Replace(":nsAd", "");
            xml = xml.Replace("<>", "<eBoleta>");
            //xml = xml.Replace("<?xml version=\"1.0\"?>", "");

            if (descEmpresa.ToString().Equals("RURAL"))
            {
                xml = xml.Replace("SALTOLINEA", "&lt;br&gt;&lt;br&gt;"); // <br><br>
            }

            xml = xml.Replace("<br>", "&lt;br&gt;");

            String texto = "";
            string objType = obtenerObjTypeDocumento(pFormFactura);
            //string codigoEnvio = objType + codigoDocEntry.ToString().PadLeft(28, '0');  // Para llenar de espacios vacíos. Los dos primeros lugares es ObjType y 000 hasta llegar al DocEntry
            string codigoEnvio = objType;

            codigoEnvio += codigoDocEntry.ToString().PadLeft(10, '0') + "-" + codigoFactura.ToString().PadLeft(10, '0');

            try
            {
                obtenerDatosConexion(false, false); // Verifico todos los datos de conexion a Facturación Electrónica

                using (var client = new ImpSICFEEmisor(sicfeRutaWS.ToString()))
                {
                    respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, 22, 0, impresoraNombre, "", false, true, versionSicfe); // 1.34.7

                    // respuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), clienteEnvioCFE, xml, codigoEnvio, "", true, false, 0, false, 0, false, impresoraNombre,templateEnvioCFE,false, false, true, true, "1.34.7"); //1.29 // 1.33

                    //ANTERIORrespuesta = client.EnvioCFE(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), "", xml, codigoEnvio, "", true, true, 0, false, 0, false, "", "NULL", false, false, true, true, "1.33");
                }
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al Enviar a SICFE", ex.Message.ToString()); // Guarda log del Proceso
                texto = ex.Message.ToString();
            }

            if (!String.IsNullOrEmpty(texto))
                SBO_Application.MessageBox("Mensaje Error:" + texto.ToString());

            if (!String.IsNullOrEmpty(respuesta.Descripcion) && !String.IsNullOrEmpty(respuesta.Codigo.ToString()))
                texto = respuesta.Descripcion.ToString();

            if (!String.IsNullOrEmpty(texto))
            {
                creoFactura = true; // La paso a True cuando devuelve error para que no vuelva a entrar sino queda en un bucle
                SBO_Application.MessageBox("ERROR-> Descripcion:" + texto.ToString() + ". Código: " + respuesta.Codigo.ToString());
            }

            bool existeDatosRespCFE = false;
            if (!String.IsNullOrEmpty(texto) && texto.ToString().Equals("Ya existe el cfe."))
            {
                existeDatosRespCFE = true;
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }

            if ((!String.IsNullOrEmpty(texto) || !String.IsNullOrEmpty(respuesta.Descripcion)) && existeDatosRespCFE == false)
            {
                if (guardaLog == true)
                {
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Envio a SICFE", xml.ToString()); // Guarda log del Proceso
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura.ToString(), "Respuesta de SICFE", texto.ToString()); // Guarda log del Proceso
                }
            }
            else
            {
                // Entonces es correcto
                if (guardaDatosRespCFE == true) // Si guarda los Datos de Respuesta de SICFE
                {
                    try
                    {
                        string tipoDocumento = "FA";
                        if (pFormFactura.ToString().Equals("140") || pFormFactura.ToString().Equals("182") || pFormFactura.ToString().Equals("143"))
                            tipoDocumento = "RE";
                        else if (pFormFactura.ToString().Equals("141"))
                            tipoDocumento = "BO";
                        else if (pFormFactura.ToString().Equals("940"))
                            tipoDocumento = "TS";
                        else if (pFormFactura.ToString().Equals("426"))
                            tipoDocumento = "RS";
                        else if (pFormFactura.ToString().Equals("65303"))
                            tipoDocumento = "ND";
                        else if (pFormFactura.ToString().Equals("65307"))
                            tipoDocumento = "FE";
                        else if (pFormFactura.ToString().Equals("181"))
                            tipoDocumento = "NC";

                        if (existeDatosRespCFE == true)
                            existeDatosRespCFE = existeRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);

                        if (existeDatosRespCFE == false)
                            guardaRespuestaFE(tipoDocumento, codigoDocEntry, respuesta, pFormFactura, codigoEnvio);
                    }
                    catch (Exception exx)
                    {
                        if (guardaLog == true)
                            guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al guardar los datos de Respuesta", exx.Message.ToString()); // Guarda log del Proceso
                    }
                }
            }

            try
            {
                if (guardaImagenQR == true)
                {
                    if (String.IsNullOrEmpty(texto))
                    {
                        //guardarDatosQR(respuesta, codigoEnvio);
                        generarImagenQR(respuesta.LinkQR, codigoDocEntry, codigoFactura);
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoEnvio.ToString(), codigoFactura, "ERROR al guardar el codigo QR", ex.Message.ToString());
                SBO_Application.MessageBox("ERROR al guardar el QR");
            }

            return respuesta;
        }

        // Obtiene el pdf de la Factura
        public SICFERespuestaBuffer ObtenerPDF(IdCFE id)
        {
            SICFERespuestaBuffer respuesta = new SICFERespuestaBuffer();
            try
            {
                using (var client = new ImpSICFEEmisor(sicfeRutaWS.ToString()))
                {
                    if (descEmpresa.ToString().Equals("ETARE"))
                    {
                        if (!String.IsNullOrEmpty(nombreImpresoraUsuario) && !String.IsNullOrEmpty(templateImpresoraUsuario))
                            sicfeTemplate = templateImpresoraUsuario;
                    }
                    else if (descEmpresa.ToString().Equals("CIMSA"))
                        sicfeTemplate = "";

                    if (descEmpresa.ToString().Equals("WYST")) // Guardo un log de Obtener PDF
                        guardaLogProceso(id.Numero.ToString(), codigoFactura, "Obtiene PDF", "Tenant: " + sicfeTenant.ToString() + " Template: " + sicfeTemplate.ToString()); // Guarda log del Proceso

                    if (descEmpresa.ToString().Equals("RURAL")) // ASPL - 2020.11.12 - Nuevo template para Remitos.
                    {
                        if (!String.IsNullOrEmpty(templateImpresoraUsuario))
                            sicfeTemplate = templateImpresoraUsuario;
                    }

                    respuesta = client.ObtenerPDF(sicfeUser.ToString(), sicfePassword.ToString(), id, sicfeTenant.ToString(), sicfeTemplate);
                    //ANTERIOR respuesta = client.ObtenerPDF(sicfeUser.ToString(), sicfePassword.ToString(), id, sicfeTenant.ToString(), "");
                }
                return respuesta;
            }
            catch (Exception ex)
            {
                guardaLogProceso(id.Numero.ToString(), codigoFactura, "ERROR al Obtener el PDF", ex.Message.ToString()); // Guarda log del Proceso
            }
            return respuesta;
        }

        // Imprime el PDF directo desde Sicfe
        public SICFERespuestaReimpresion reimprimirPDF(IdCFE id, string pTemplate, string pImpresora)
        {
            SICFERespuestaReimpresion respuesta = new SICFERespuestaReimpresion();
            try
            {
                using (var client = new ImpSICFEEmisor(sicfeRutaWS.ToString()))
                {
                    //if (descEmpresa.Equals("ETARE"))
                    //    guardaLogProceso(id.Numero.ToString(), id.Numero.ToString(), "Pre ReImpresión", "Template:" + pTemplate + " Impresora:" + pImpresora); // Guarda log del Proceso

                    id.observado = 0;
                    id.rucemisor = "";

                    int cantVias = 1;
                    if (descEmpresa.ToString().Equals("RURAL"))
                        cantVias = 2;

                    respuesta = client.Reimprimir(sicfeUser.ToString(), sicfePassword.ToString(), sicfeTenant.ToString(), id, pImpresora, cantVias, pTemplate);

                    if (!String.IsNullOrEmpty(respuesta.Codigo.ToString()))
                        guardaLogProceso(id.Numero.ToString(), codigoFactura, "ReimprimirPDF", "Codigo: " + respuesta.Codigo.ToString() + " User: " + idUsuarioLogueado + " Imp: " + pImpresora + ". Temp: " + pTemplate); // Guarda log del Proceso
                    //if (!String.IsNullOrEmpty(respuesta.Descripcion))
                    //    guardaLogProceso(id.Numero.ToString(), codigoFactura, "ReimprimirPDF", "Desc: " + respuesta.Descripcion.ToString()); // Guarda log del Proceso
                    //if (respuesta.ResultadosPorCFE.Length > 0)
                    //    guardaLogProceso(id.Numero.ToString(), codigoFactura, "ReimprimirPDF", "Res: " + respuesta.ResultadosPorCFE[0].CFE..ToString()); // Guarda log del Proceso
                }
                return respuesta;
            }
            catch (Exception ex)
            {
                guardaLogProceso(id.Numero.ToString(), codigoFactura, "ERROR al ReimprimirPDF", ex.Message.ToString()); // Guarda log del Proceso
            }
            return respuesta;
        }

        // Imprime el pdf directo en la impresora
        /*public bool imprimirPDF(String pRuta, String pRutaDefecto, String pNombrePDF)
        {
            bool res = false;
            try
            {
                if (noImprimeNingunModo == false) // Si está configurado para que no imprima de ningun modo ni PDF ni Crystal.
                {
                    string nombreImpre = buscarImpresoraPredeterminada(); // Obtengo el nombre de la impresora por defecto
                    bool estadoImpre = buscarEstadoImpresora(nombreImpre); // Verifico el estado de la impresora

                    ////if (!String.IsNullOrEmpty(nombreImpre)) // Si tiene una impresora por defecto
                    ////{

                    ////if (!estadoImpre) // Si la impresora no está en línea muestra una advertencia
                    ////    SBO_Application.MessageBox("La impresora que tiene predeterminada no está en línea.");

                    string versionAcrobat = "AcroRd32"; // Utiliza la version nueva de Adobe Reader
                    var adobe = Registry.LocalMachine.OpenSubKey("Software").OpenSubKey("Microsoft").OpenSubKey("Windows").OpenSubKey("CurrentVersion").OpenSubKey("App Paths").OpenSubKey("AcroRd32.exe");
                    var path = adobe.GetValue("");

                    if (!File.Exists(path.ToString())) // Si no existe el path, busco con la version del acrobat anterior
                    {
                        adobe = Registry.LocalMachine.OpenSubKey("Software").OpenSubKey("Microsoft").OpenSubKey("Windows").OpenSubKey("CurrentVersion").OpenSubKey("App Paths").OpenSubKey("Acrobat.exe");
                        path = adobe.GetValue("");
                        versionAcrobat = "Acrobat"; // Utiliza la version vieja del Acrobat
                    }

                    string pArchivo = rutaDefecto + pNombrePDF.ToString();
                    if (!File.Exists(pArchivo)) // Si el archivo no existe
                        pArchivo = pArchivo.ToString().Replace("\\\\", "\\"); // Le quito las Retrobarras que estén de mas

                    bool seleccionoImpre = false;
                    if (idSucursalUsuario > 1 && estadoImpre == true && !String.IsNullOrEmpty(nombreImpre.ToString())) // Si es la sucursal 1 entonces no le paso el nombre de la impresora o Si la impresora no está en línea muestra una advertencia
                        seleccionoImpre = true;

                    string resImpre = "OK"; // Si es distinto de OK lo guarda en el log

                    if (!seleccionoImpre)
                    {
                        //if (guardaLog == true)
                        //    guardaLogProceso("", "", "Imprimiendo PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), nombreImpre.ToString()); // Guarda log del Proceso
                        resImpre = clsPrintPDF.PrintPDFs(pArchivo, path.ToString(), versionAcrobat.ToString());
                    }
                    else
                    {
                        //if (guardaLog == true)
                        //    guardaLogProceso("", "", "Imprimiendo PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), nombreImpre.ToString()); // Guarda log del Proceso
                        resImpre = clsPrintPDF.PrintPDFsImpreSeleccionada(pArchivo, path.ToString(), versionAcrobat.ToString(), nombreImpre);
                    }

                    if ((imprimre2ViasCredito == true && (esContado == false || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("SOLGE")))) // Si es Crédito y esta configurado en True imprimo el documento 2 veces. O SI ES BOSCH
                    {
                        if (!seleccionoImpre)
                            resImpre = clsPrintPDF.PrintPDFs(pArchivo, path.ToString(), versionAcrobat.ToString());
                        else
                        {
                            //if (guardaLog == true)
                            //    guardaLogProceso("", "", "Imprimiendo 2da via PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), nombreImpre.ToString()); // Guarda log del Proceso
                            resImpre = clsPrintPDF.PrintPDFsImpreSeleccionada(pArchivo, path.ToString(), versionAcrobat.ToString(), nombreImpre);
                        }
                    }

                    if (!resImpre.ToString().Equals("OK")) // Si la impresion no fue correcta guarda un log
                    {
                        //if (guardaLog == true)
                        //    guardaLogProceso("", "", "ERROR al Imprimir PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), resImpre.ToString()); // Guarda log del Proceso
                    }
                    else
                        res = true; // Si es OK entonces imprimio el documento. Por eso devuelve true
                    ////}
                    ////else
                    ////    SBO_Application.MessageBox("No tiene una impresora predeterminada");

                }
                else
                    res = true;  // Si no debe imprimir devuelve true

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", codigoFactura, "ERROR al Imprimir PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }*/

        public bool imprimirPDFAcrobat(String pRuta, String pRutaDefecto, String pNombrePDF)
        {
            bool res = false;
            try
            {
                if (noImprimeNingunModo == false) // Si está configurado para que no imprima de ningun modo ni PDF ni Crystal.
                {
                    string nombreImpre = buscarImpresoraPredeterminada(); // Obtengo el nombre de la impresora por defecto
                    bool estadoImpre = buscarEstadoImpresora(nombreImpre); // Verifico el estado de la impresora

                    ////if (!String.IsNullOrEmpty(nombreImpre)) // Si tiene una impresora por defecto
                    ////{

                    ////if (!estadoImpre) // Si la impresora no está en línea muestra una advertencia
                    ////    SBO_Application.MessageBox("La impresora que tiene predeterminada no está en línea.");

                    string versionAcrobat = "AcroRd32"; // Utiliza la version nueva de Adobe Reader
                    var adobe = Registry.LocalMachine.OpenSubKey("Software").OpenSubKey("Microsoft").OpenSubKey("Windows").OpenSubKey("CurrentVersion").OpenSubKey("App Paths").OpenSubKey("AcroRd32.exe");
                    var path = adobe.GetValue("");

                    if (!File.Exists(path.ToString())) // Si no existe el path, busco con la version del acrobat anterior
                    {
                        adobe = Registry.LocalMachine.OpenSubKey("Software").OpenSubKey("Microsoft").OpenSubKey("Windows").OpenSubKey("CurrentVersion").OpenSubKey("App Paths").OpenSubKey("Acrobat.exe");
                        path = adobe.GetValue("");
                        versionAcrobat = "Acrobat"; // Utiliza la version vieja del Acrobat
                    }

                    string pArchivo = rutaDefecto + pNombrePDF.ToString();
                    if (!File.Exists(pArchivo)) // Si el archivo no existe
                        pArchivo = pArchivo.ToString().Replace("\\\\", "\\"); // Le quito las Retrobarras que estén de mas

                    bool seleccionoImpre = false;
                    if (idSucursalUsuario > 1 && estadoImpre == true && !String.IsNullOrEmpty(nombreImpre.ToString())) // Si es la sucursal 1 entonces no le paso el nombre de la impresora o Si la impresora no está en línea muestra una advertencia
                        seleccionoImpre = true;

                    string resImpre = "OK"; // Si es distinto de OK lo guarda en el log

                    if (!seleccionoImpre)
                        resImpre = clsPrintPDF.PrintPDFs(pArchivo, path.ToString(), versionAcrobat.ToString());
                    else
                        resImpre = clsPrintPDF.PrintPDFsImpreSeleccionada(pArchivo, path.ToString(), versionAcrobat.ToString(), nombreImpre);

                    int cantidadVias = 1;

                    if (imprimre2ViasCredito == true)
                        cantidadVias += 1;

                    if ((imprimre2ViasCredito == true && (esContado == false || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL")))) // Si es Crédito y esta configurado en True imprimo el documento 2 veces. O SI ES BOSCH
                    {
                        if (!seleccionoImpre)
                        {
                            resImpre = clsPrintPDF.PrintPDFs(pArchivo, path.ToString(), versionAcrobat.ToString());
                            if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0 && pArchivo.Contains("Expor")) // Si es la Sucursal Meditian
                                resImpre = clsPrintPDF.PrintPDFs(pArchivo, path.ToString(), versionAcrobat.ToString());
                        }
                        else
                        {
                            resImpre = clsPrintPDF.PrintPDFsImpreSeleccionada(pArchivo, path.ToString(), versionAcrobat.ToString(), nombreImpre);
                            if (descEmpresa.ToString().Equals("MEDIT") && idSucursalUsuario < 0 && pArchivo.Contains("Expor")) // Si es la Sucursal Meditian
                                resImpre = clsPrintPDF.PrintPDFsImpreSeleccionada(pArchivo, path.ToString(), versionAcrobat.ToString(), nombreImpre);
                        }
                    }

                    if (!resImpre.ToString().Equals("OK")) // Si la impresion no fue correcta guarda un log
                    {
                        //if (guardaLog == true)
                        //    guardaLogProceso("", "", "ERROR al Imprimir PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), resImpre.ToString()); // Guarda log del Proceso
                    }
                    else
                        res = true; // Si es OK entonces imprimio el documento. Por eso devuelve true
                    ////}
                    ////else
                    ////    SBO_Application.MessageBox("No tiene una impresora predeterminada");

                }
                else
                    res = true;  // Si no debe imprimir devuelve true

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", codigoFactura, "ERROR al Imprimir PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }

        public bool imprimirPDFFoxit(String pRuta, String pRutaDefecto, String pNombrePDF)
        {
            bool res = false;
            try
            {
                if (noImprimeNingunModo == false) // Si está configurado para que no imprima de ningun modo ni PDF ni Crystal.
                {
                    string nombreImpre = buscarImpresoraPredeterminada(); // Obtengo el nombre de la impresora por defecto
                    bool estadoImpre = buscarEstadoImpresora(nombreImpre); // Verifico el estado de la impresora

                    string versionAcrobat = "foxitreader"; // Utiliza la version nueva de Adobe Reader
                    var adobe = Registry.LocalMachine.OpenSubKey("Software").OpenSubKey("Microsoft").OpenSubKey("Windows").OpenSubKey("CurrentVersion").OpenSubKey("App Paths").OpenSubKey("foxitreader.exe");
                    var path = adobe.GetValue("");

                    string pArchivo = rutaDefecto + pNombrePDF.ToString();
                    if (!File.Exists(pArchivo)) // Si el archivo no existe
                        pArchivo = pArchivo.ToString().Replace("\\\\", "\\"); // Le quito las Retrobarras que estén de mas

                    bool seleccionoImpre = false;
                    if (idSucursalUsuario > 1 && estadoImpre == true && !String.IsNullOrEmpty(nombreImpre.ToString())) // Si es la sucursal 1 entonces no le paso el nombre de la impresora o Si la impresora no está en línea muestra una advertencia
                        seleccionoImpre = true;

                    string resImpre = "OK"; // Si es distinto de OK lo guarda en el log

                    resImpre = clsPrintPDF.PrintPDFsFoxit(pArchivo, path.ToString(), nombreImpre);

                    if ((imprimre2ViasCredito == true && (esContado == false || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL")))) // Si es Crédito y esta configurado en True imprimo el documento 2 veces. O SI ES BOSCH
                    {
                        resImpre = clsPrintPDF.PrintPDFsFoxit(pArchivo, path.ToString(), nombreImpre);
                    }

                    if (resImpre.ToString().Equals("OK")) // Si la impresion no fue correcta guarda un log
                        res = true; // Si es OK entonces imprimio el documento. Por eso devuelve true

                }
                else
                    res = true;  // Si no debe imprimir devuelve true

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", codigoFactura, "ERROR al Imprimir PDF " + pNombrePDF.ToString() + " usu: " + usuarioLogueado.ToString() + " suc: " + idSucursalUsuario.ToString(), ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }

        public bool buscarEstadoImpresora(string printerName) // Metodo para comprobar si una impresora esta online o offline
        {
            string str = "";
            bool online = false;
            try
            {
                //set the scope of this search to the local machine
                ManagementScope scope = new ManagementScope(ManagementPath.DefaultPath);
                //connect to the machine
                scope.Connect();

                //query for the ManagementObjectSearcher
                SelectQuery query = new SelectQuery("select * from Win32_Printer");

                ManagementClass m = new ManagementClass("Win32_Printer");

                ManagementObjectSearcher obj = new ManagementObjectSearcher(scope, query);

                //get each instance from the ManagementObjectSearcher object
                using (ManagementObjectCollection printers = m.GetInstances())
                    //now loop through each printer instance returned
                    foreach (ManagementObject printer in printers)
                    {
                        //first make sure we got something back
                        if (printer != null)
                        {
                            //get the current printer name in the loop
                            str = printer["Name"].ToString().ToLower();

                            //check if it matches the name provided
                            if (str.Equals(printerName.ToLower()))
                            {
                                //since we found a match check it's status
                                if (printer["WorkOffline"].ToString().ToLower().Equals("true") || printer["PrinterStatus"].Equals(7))
                                    //it's offline
                                    online = false;
                                else
                                    //it's online
                                    online = true;
                            }
                        }
                        else
                            throw new Exception("No printers were found");
                    }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("999", "9999", "ERROR al buscar Estado de la Impresora", ex.Message.ToString()); // Guarda log del Proceso
            }
            return online;
        }

        public string buscarImpresoraPredeterminada() // Busca la impresora predeterminada en la PC
        {
            string nombreImpresora = "";//Donde guardare el nombre de la impresora por defecto
            try
            {
                //Busco la impresora por defecto
                for (int i = 0; i < PrinterSettings.InstalledPrinters.Count; i++)
                {
                    PrinterSettings a = new PrinterSettings();
                    a.PrinterName = PrinterSettings.InstalledPrinters[i].ToString();
                    if (a.IsDefaultPrinter)
                    {
                        nombreImpresora = PrinterSettings.InstalledPrinters[i].ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("999", "9999", "ERROR al buscar Nombre de la Impresora", ex.Message.ToString()); // Guarda log del Proceso
            }
            return nombreImpresora;
        }
        #endregion

        #region Conexion DIAPI

        public SAPbobsCOM.Recordset ObtenerFactura(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes // and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60090":
                        query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes + Pago  and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60091":
                        query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura de Reserva de Clientes   and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65304":
                        query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65307":
                        query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc"; // Factura Exportacion // and CurSource = 'C'
                        break;
                    case "65303":
                        query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "179":
                        query = "select top 1 * from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORIN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "140":
                        query = "select top 1 * from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ODLN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "143":
                        query = "select top 1 * from OPDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OPDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "940":
                        query = "select top 1 * from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OWTR\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "426":
                        query = "select top 1 * from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "182":
                        query = "select top 1 * from ORPD where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORPD\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "180":
                        query = "select top 1 * from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "141":
                        query = "select top 1 * from OPCH where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Compras Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OPCH\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "181":
                        query = "select top 1 * from ORPC where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // NC Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORPC\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // NC Proveedor // and CurSource = 'C'
                        break;
                    case "720":
                        query = "select top 1 * from OIGE where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Salida de Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OIGE\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Salida de Mercancias
                        break;
                    case "170":
                        query = "select top 1 * from ORCT T0 INNER JOIN OCRD AS T1 ON T1.CardCode = T0.CardCode where T0.DocNum = '" + pCodigoFactura + "' order by T0.DocEntry desc"; // Pagos recibidos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORCT\" T0 INNER JOIN \"OCRD\" AS T1 ON T1.\"CardCode\" = T0.\"CardCode\" where T0.\"DocNum\" = \'" + pCodigoFactura + "\' order by T0.\"DocEntry\" desc";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura.ToString(), "ERROR al obtener los Datos de la Factura", ex.Message.ToString()); // Guarda log del Proceso

                return null;
            }
        }

        public void GuardarRuta(String pCodigoFactura, String pFormFactura, string ruta)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "update OINV set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Factura Clientes // and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60090":
                        query = "update OINV set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'";  // Factura Clientes + Pago  and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60091":
                        query = "update OINV set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Factura de Reserva de Clientes   and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65304":
                        query = "update OINV set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65307":
                        query = "update OINV set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc"; // Factura Exportacion // and CurSource = 'C'
                        break;
                    case "65303":
                        query = "update OINV set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "179":
                        query = "update ORIN set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORIN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "140":
                        query = "update ODLN set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ODLN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "143":
                        query = "update OPDN set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OPDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "940":
                        query = "update OWTR set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OWTR\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "426":
                        query = "update OVPM set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "182":
                        query = "update ORPD set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORPD\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "180":
                        query = "update ORDN set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "141":
                        query = "update OPCH set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Compras Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OPCH\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "181":
                        query = "update ORPC set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // NC Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORPC\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // NC Proveedor // and CurSource = 'C'
                        break;
                    case "720":
                        query = "update OIGE set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Salida de Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"OIGE\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Salida de Mercancias
                        break;
                    case "170":
                        query = "update ORCT set Comments = '" + ruta + "'where DocNum = '" + pCodigoFactura + "'"; // Pagos recibidos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 * from \"ORCT\" T0 INNER JOIN \"OCRD\" AS T1 ON T1.\"CardCode\" = T0.\"CardCode\" where T0.\"DocNum\" = \'" + pCodigoFactura + "\' order by T0.\"DocEntry\" desc";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura.ToString(), "ERROR al obtener los Datos de la Factura", ex.Message.ToString()); // Guarda log del Proceso


            }
        }

        public bool ObtenerLicTradNumDocumento(String pCodigoFactura, String pFormFactura)
        {
            bool res = false;
            if (descEmpresa.Equals("ETARE"))
                return true;

            string rut = "";
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 LicTradNum,CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes // and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60090":
                        query = "select top 1 LicTradNum,CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes + Pago  and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60091":
                        query = "select top 1 LicTradNum,CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura de Reserva de Clientes   and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65304":
                        query = "select top 1 LicTradNum,CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65307":
                        query = "select top 1 LicTradNum,CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc"; // Factura Exportacion // and CurSource = 'C'
                        break;
                    case "65303":
                        query = "select top 1 LicTradNum,CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "179":
                        query = "select top 1 LicTradNum,CardCode from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "140":
                        query = "select top 1 LicTradNum,CardCode from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from ODLN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "143":
                        query = "select top 1 LicTradNum,CardCode from OPDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OPDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "940":
                        query = "select top 1 LicTradNum,CardCode from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OWTR where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "426":
                        query = "select top 1 LicTradNum,CardCode from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from OVPM where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "180":
                        query = "select top 1 LicTradNum,CardCode from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"LicTradNum\",\"CardCode\" from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

                string cardCodeCliente = "";

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        rut = (string)oRSMyTable.Fields.Item("LicTradNum").Value;
                        cardCodeCliente = (string)oRSMyTable.Fields.Item("CardCode").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                bool clienteEsUruguayo = true;
                try
                {
                    // Verificacion del Pais del cliente
                    SAPbobsCOM.Recordset oRSMyTable2 = ObtenerCliente(cardCodeCliente, "C");
                    SAPbobsCOM.Recordset oRSMyTable5 = ObtenerClienteDirecciones(cardCodeCliente, "C"); // Obtengo las direcciones del cliente

                    string paisCliente = oRSMyTable5.Fields.Item("Country").Value;
                    if (String.IsNullOrEmpty(paisCliente.ToString()))
                        paisCliente = oRSMyTable2.Fields.Item("Country").Value;

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable2);
                    oRSMyTable2 = null;
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable5);
                    oRSMyTable5 = null;

                    if (!paisCliente.ToString().Equals("Uruguay") && !paisCliente.ToString().Equals("uruguay") && !paisCliente.ToString().Equals("UY") && !paisCliente.ToString().Equals(""))
                        clienteEsUruguayo = false; // No es un cliente Uruguayo
                }
                catch (Exception ex)
                { }

                rut = rut.ToString().Replace(".", "");
                rut = rut.ToString().Replace("-", "");

                if (!rut.Equals(""))
                {
                    if (rut != null)
                    {
                        if (rut.Length == 12 && Char.IsNumber(rut, 0) && clienteEsUruguayo == true)
                        {
                            if (ValidarRUC(rut))
                                res = true;
                            else
                            {
                                SBO_Application.MessageBox("Numero de RUT invalido");
                                res = false;
                            }
                        }
                        else if ((rut.Length == 8 || rut.Length == 7) && Char.IsNumber(rut, 0) && clienteEsUruguayo == true)
                        {
                            try
                            {
                                int ced = Int32.Parse(rut);
                                if ((descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE")) && ced.ToString().Equals("99999999")) // Si es Bosch
                                    res = true;
                                else
                                {
                                    if (validarCedulaUruguaya(rut))
                                        res = true;
                                    else
                                    {
                                        SBO_Application.MessageBox("La C.I ingresada en la ficha del cliente no es correcta");
                                        res = false;
                                    }
                                }
                            }
                            catch
                            {
                                SBO_Application.MessageBox("El formato de la CI es incorrecto (11111111)");
                                res = false;
                            }
                        }
                        else if (rut.Length == 11 && Char.IsNumber(rut, 0) && clienteEsUruguayo == true)
                        {
                            string rutConCero = "0" + rut;
                            if (ValidarRUC(rutConCero)) // Le agrego un 0 adelante porque hay clientes empresas del interior que no lo tienen
                                res = true;
                            else
                            {
                                SBO_Application.MessageBox("Numero de RUT invalido");
                                res = false;
                            }
                        }
                        else
                        {
                            ////SBO_Application.MessageBox("Documento incorrecto");
                            res = true; // Estaba en False pero para probar se cambio a true
                        }
                    }
                    else
                    {
                        SBO_Application.MessageBox("Debe ingresar CI o RUT en el campo Numero de referencia de deudor.");
                        res = false;
                    }
                }
                else
                    res = false;

                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura.ToString(), "ERROR al obtener los Datos de la Factura", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        public bool resguardoTieneNcReferencia(string pCodigoFactura)
        {
            bool res = false;
            SAPbobsCOM.Recordset oRSMyTable = null;

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                string query = "select InvType from VPM2 where DocNum = (select top 1 DocEntry from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) AND (InvType = 14 or InvType = 19)";
                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"InvType\" from VPM2 where \"DocNum\" = (select top 1 \"DocEntry\" from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) AND (\"InvType\" = \'14\' or \"InvType\" = \'19\')";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                    if (oRSMyTable.RecordCount != 0)
                        res = true;

                return res;
            }
            catch (Exception ex)
            { }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }

            return res;
        }

        public bool ObtenerCardCodeCliente(String pCodigoFactura, String pFormFactura)
        {
            bool res = false;
            SAPbobsCOM.Recordset oRSMyTable = null;

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes // and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60090":
                        query = "select top 1 CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes + Pago  and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60091":
                        query = "select top 1 CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura de Reserva de Clientes   and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65304":
                        query = "select top 1 CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65307":
                        query = "select top 1 CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc"; // Factura Exportacion // and CurSource = 'C'
                        break;
                    case "65303":
                        query = "select top 1 CardCode from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "179":
                        query = "select top 1 CardCode from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"ORIN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "140":
                        query = "select top 1 CardCode from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"ODLN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "143":
                        query = "select top 1 CardCode from OPDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OPDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "940":
                        query = "select top 1 CardCode from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OWTR\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "426":
                        query = "select top 1 CardCode from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "180":
                        query = "select top 1 CardCode from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CardCode\" from \"ORDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

                string cardCodeCliente = "";

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        cardCodeCliente = (string)oRSMyTable.Fields.Item("CardCode").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                if (descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("RURAL"))
                    res = ObtenerClienteVatStatusExtranjero(cardCodeCliente, "C");
                /*else
                    res = ObtenerClienteGrupoExtranjero(cardCodeCliente, "C"); // Portvan*/

                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura.ToString(), "ERROR al obtener los Datos de la Factura", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        public string ObtenerViaTransporteDocumento(String pCodigoFactura, String pFormFactura)
        {
            string res = "0";
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by oin.DocEntry desc"; // Factura Clientes // and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60090":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by oin.DocEntry desc"; // Factura Clientes + Pago  and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60091":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by oin.DocEntry desc"; // Factura de Reserva de Clientes   and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65304":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by oin.DocEntry desc"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "65307":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by oin.DocEntry desc"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" as CodeDGI from OINV as oin left join OSHP as os on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc"; // Factura Exportacion // and CurSource = 'C'
                        break;
                    case "65303":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by oin.DocEntry desc"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "179":
                        query = "select top 1 os.WebSite as CodeDGI from ORIN as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" as CodeDGI from ORIN as oin left join OSHP as os on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "140":
                        query = "select top 1 os.WebSite as CodeDGI from ODLN as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" as CodeDGI from ODLN as oin left join OSHP as os on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by oin.\"DocEntry\" desc";
                        break;
                    case "143":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" as CodeDGI from ODLN as oin left join OSHP as os on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by oin.\"DocEntry\" desc";
                        break;
                    case "940":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' order by oin.DocEntry desc"; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OWTR where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "426":
                        query = "select top 1 os.WebSite as CodeDGI from OINV as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' order by oin.DocEntry desc"; // Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" from OVPM where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "180":
                        query = "select top 1 os.WebSite as CodeDGI from ORDN as oin left join OSHP as os on os.TrnspCode = oin.TrnspCode where DocNum = '" + pCodigoFactura + "' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 os.\"WebSite\" as CodeDGI from ORDN as oin left join OSHP as os on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by oin.\"DocEntry\" desc";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                string codeDGI = "";
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        codeDGI = oRSMyTable.Fields.Item("CodeDGI").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                if (!String.IsNullOrEmpty(codeDGI.ToString()))
                    res = codeDGI.ToString();

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura.ToString(), "ERROR al obtener los Datos de Via de Transporte", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        public string ObtenerViaTransporteDocumentoAlmacenRural(String pCodigoFactura, String pFormFactura)
        {
            string res = "";
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"OINV\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' and \"DocSubType\" <> 'DN' order by oin.\"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'
                        break;
                    case "60090":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"OINV\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' and \"DocSubType\" <> 'DN' order by oin.\"DocEntry\" desc"; // Factura Clientes + Pago  and CurSource = 'L'
                        break;
                    case "60091":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"OINV\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' and \"DocSubType\" <> 'DN' order by oin.\"DocEntry\" desc"; // Factura de Reserva de Clientes   and UpdInvnt = 'C'
                        break;
                    case "65304":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"OINV\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' and \"DocSubType\" = 'IB' order by oin.\"DocEntry\" desc"; // Boleta
                        break;
                    case "65307":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"OINV\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' and \"DocSubType\" = 'IX' order by oin.\"DocEntry\" desc"; // Factura Exportacion
                        break;
                    case "65303":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"OINV\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' and \"DocSubType\" = 'DN' order by oin.\"DocEntry\" desc"; // Nota Debito Clientes
                        break;
                    case "179":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"ORIN\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' order by oin.\"DocEntry\" desc";
                        break;
                    case "140":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"ODLN\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' order by oin.\"DocEntry\" desc";
                        break;
                    case "180":
                        query = "select top 1 \"TrnspName\" from \"OSHP\" as os left join \"ORDN\" as oin on os.\"TrnspCode\" = oin.\"TrnspCode\" where \"DocNum\" = '" + pCodigoFactura + "' order by oin.\"DocEntry\" desc";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("TrnspName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura.ToString(), "ERROR al obtener los Datos de Via de Transporte Rural", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        public string obtenerClausulaVenta(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string clauVenta = "N/A";

            try
            {
                string tabla = "OINV";
                if (pFormFactura.ToString().Equals("140"))
                    tabla = "ODLN";

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "select top 1 U_INCOTERM as ClauVenta from " + tabla + " where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes // and CurSource = 'C'

                if (descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI"))
                    query = "SELECT s.Name as ClauVenta from " + tabla + " as o left join [@SIR_DELT] as s on o.U_SI_DelivT= s.Code where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 \"U_INCOTERM\" as ClauVenta from " + tabla + " where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc"; // Factura Clientes // and CurSource = 'C'

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        clauVenta = (string)oRSMyTable.Fields.Item("ClauVenta").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                if (String.IsNullOrEmpty(clauVenta))
                    clauVenta = "N/A";
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER CLAUSULA DE VENTA" + ex.Message);
                return "";
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }

            return clauVenta;
        }

        // Esta funcion recibe por parámentro el codigo del cliente y el tipo para ir a la tabla OCRD y obtener el Rut del mismo
        public string obtenerRutCliente(String pCodigo, String pTipoCliente)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string rut = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select LicTradNum from OCRD where CardCode = '" + pCodigo + "' and CardType = '" + pTipoCliente + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"LicTradNum\" from \"OCRD\" where \"CardCode\" = \'" + pCodigo + "\' and \"CardType\" = \'" + pTipoCliente + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        rut = (string)oRSMyTable.Fields.Item("LicTradNum").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return rut;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("ERROR AL OBTENER EL RUT DEL CLIENTE" + ex.Message);
                return "";
            }
        }

        // Esta funcion recibe por parámentro el codigo del cliente y el tipo para devolve la dirección de entrega 
        public string obtenerDireccionEntregaMavin(string pCodigo, string pTipoCliente)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select top 1 concat(os.TrnspName, ' - ', cr.U_ORDEN, ', ', o.Notes) as Entrega from OCRD as o " +
                "left join OSHP as os on os.TrnspCode = o.ShipType " +
                "left join CRD1 as cr on cr.CardCode = o.CardCode and cr.AdresType = 'S' " +
                "where o.CardCode = '" + pCodigo + "' and o.CardType = '" + pTipoCliente + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("Entrega").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        public string obtenerGLNEntrega(string pCodigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select top 1 GlbLocNumS FROM INV12 WHERE DocEntry = '" + pCodigo + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("GlbLocNumS").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        public int obtenerProximoNumerador(String pSerie, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            int proxNum = 0;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select case when NextNumber is null then 0 else NextNumber end as Prox from NNM1 where Series = '" + pSerie + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select case when \"NextNumber\" is null then 0 else \"NextNumber\" end as Prox from NNM1 where \"Series\" = \'" + pSerie + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        proxNum = oRSMyTable.Fields.Item("Prox").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return proxNum;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pSerie, "ERROR al obtener el proximo documento", ex.Message.ToString()); // Guarda log del Proceso
                return proxNum;
            }
        }

        // Esta funcion recibe por parámentro el codigo del cliente y el tipo para ir a la tabla OCRD y obtener el Rut del mismo
        public decimal obtenerTipoCambio(DateTime pFechaDocumento)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            decimal res = 0;
            try
            {
                string currencyWhere = "(Currency = 'UYU' or Currency = '$')";
                string currencyWhereHanna = "(\"Currency\" = \'UYU\' or \"Currency\" = \'$\')";

                if (monedaStrISO.ToString().Equals("UYU"))
                {
                    currencyWhere = "(Currency = 'USD' or Currency = 'U$S')";
                    currencyWhereHanna = "(\"Currency\" = \'USD\' or \"Currency\" = \'U$S\')";
                }

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT Rate FROM ORTT where RateDate = '" + pFechaDocumento.ToString("yyyy-MM-dd") + "' and " + currencyWhere;

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"Rate\" from \"ORTT\" where \"RateDate\" = \'" + pFechaDocumento.ToString("yyyy-MM-dd") + "\' and " + currencyWhereHanna;

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (decimal)oRSMyTable.Fields.Item("Rate").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                guardaLogProceso("", "", "ERROR al obtener el Tipo Cambio", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR AL OBTENER EL TC" + ex.Message);
                return res;
            }
        }

        public decimal obtenerTasa(string cod)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            decimal res = 0;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT Top 1 * FROM OWHT where U_COD_DGI = '" + cod + "' ";
                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (decimal)oRSMyTable.Fields.Item("Rate").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                guardaLogProceso("", "", "ERROR al obtener Tasa", ex.Message.ToString()); // Guarda log del Proceso
                SBO_Application.MessageBox("ERROR AL OBTENER LA TASA DE CAMBIO " + ex.Message);
                return res;
            }
        }

        // Verifica que el almacen genere Remito de Fact Electroncia
        public bool almacenGeneraRemito(string pAlmacen)
        {
            bool res = true;
            try
            {
                if (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MEDIT"))
                {
                    SAPbobsCOM.Recordset oRSMyTable = null;
                    oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                    String query = "select U_EREMITO from OWHS where WhsCode = '" + pAlmacen + "'";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query = "select \"U_EREMITO\" from OWHS where \"WhsCode\" = \'" + pAlmacen + "\'";

                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            int uRem = oRSMyTable.Fields.Item("U_EREMITO").Value;
                            if (uRem != 1) // Si es 1 entonces Genera remito el almacen seleccionado 
                                res = false;

                            oRSMyTable.MoveNext();
                        }
                    }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                    oRSMyTable = null;
                }

                return res;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pAlmacen, pAlmacen, "ERROR al verificar si almacen genera remito", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        // Obtengo el nombre de la Serie
        public string obtenerNombreSerie(String pSerie)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string nombre = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select SeriesName from NNM1 where Series = '" + pSerie + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"SeriesName\" from NNM1 where \"Series\" = \'" + pSerie + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        nombre = oRSMyTable.Fields.Item("SeriesName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return nombre;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso(pSerie, pSerie, "ERROR al obtener el nombre de la Serie", ex.Message.ToString()); // Guarda log del Proceso
                return nombre;
            }
        }



        public int obtenerSucursalPorSerie(int pSerie)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            SAPbobsCOM.Recordset oRSMyTable2 = null;
            SAPbobsCOM.Recordset oRSMyTable3 = null;
            int idSucSerie = 0; string nombreSerie = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select SeriesName from NNM1 where Series = '" + pSerie + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"SeriesName\" from NNM1 where \"Series\" = \'" + pSerie + "\'";

                ////if (descEmpresa.Equals("RURAL"))
                //     query = "select \"SeriesName\" from \"IVZ_NNM1\" where \"Series\" = \'" + pSerie + "\'";


                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        nombreSerie = oRSMyTable.Fields.Item("SeriesName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                if (nombreSerie.Contains("MANGA"))
                    idSucSerie = 2;
                else if (nombreSerie.Contains("PEÑA")) //ASPL - 2019.03.19 - Nueva serie, cambio de sucursal.
                    idSucSerie = 3;
                else
                    idSucSerie = 4;

                if (descEmpresa.Equals("RURAL"))
                {
                    idSucSerie = 1;

                    /*oRSMyTable3 = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                    
                    query = "select \"SeriesName\" from \"IVZ_NNM1\" where \"SeriesName\" = \'" + nombreSerie + "\'";

                    oRSMyTable3.DoQuery(query);

                    if (oRSMyTable3 != null)
                    {
                        while (!oRSMyTable3.EoF)
                        {
                            nombreSerie = oRSMyTable3.Fields.Item("SeriesName").Value;
                            oRSMyTable3.MoveNext();
                        }
                    }

                    oRSMyTable2 = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                    String query2 = "select \"Code\" from \"OUBR\" where \"Name\" = '" + nombreSerie + "'";

                    oRSMyTable2.DoQuery(query2);

                    if (oRSMyTable2 != null)
                    {
                        while (!oRSMyTable2.EoF)
                        {
                            idSucSerie = oRSMyTable.Fields.Item("Code").Value;
                            oRSMyTable2.MoveNext();
                        }
                    }*/
                }
                //else if (nombreSerie.Contains("33"))
                //    idSucSerie = 1;
                //else if (nombreSerie.Contains("COL"))
                //    idSucSerie = 4;
                //else
                //    idSucSerie = 3;

                if (nombreSerie.Contains("PT"))
                    idSucSerie = 3;
                else if (nombreSerie.Contains("Dur")) //27 AGO 2020 Se agrega la sucursal por serie en Almacen Rural 
                    idSucSerie = 2;
                else if (nombreSerie.Contains("MVD"))
                    idSucSerie = 4;

                return idSucSerie;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pSerie.ToString(), pSerie.ToString(), "ERROR al obtener Sucursal por Serie", ex.Message.ToString()); // Guarda log del Proceso
                return idSucSerie;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                //System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable2);
                oRSMyTable = null;
                //oRSMyTable2 = null;
            }
        }

        // Esta funcion recibe por parámentro el codigo de la factura, la serie del documento y el tipo de formulario para obtener el ultimo documento no enviado a FactElectronica del Usuario Logueado
        public string verificarUltimoDocumentoUsuarioLogueado(String pSerie, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = ""; int docNum = 0;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select DocNum from OINV where DocEntry = (select max(DocEntry) from OINV where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "' and DocSubType <> 'DN')"; // Factura Clientes and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OINV where \"DocEntry\" = (select max(\"DocEntry\") from OINV where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\' and \"DocSubType\" <> \'DN\')";
                        break;
                    case "60090":
                        query = "select DocNum from OINV where DocEntry = (select max(DocEntry) from OINV where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "' and DocSubType <> 'DN')"; // Factura Clientes + Pago and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OINV where \"DocEntry\" = (select max(\"DocEntry\") from OINV where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\' and \"DocSubType\" <> \'DN\')";
                        break;
                    case "60091":
                        query = "select DocNum from OINV where DocEntry = (select max(DocEntry) from OINV where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "' and DocSubType <> 'DN')"; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OINV where \"DocEntry\" = (select max(\"DocEntry\") from OINV where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\' and \"DocSubType\" <> \'DN\')";
                        break;
                    case "65304":
                        query = "select DocNum from OINV where DocEntry = (select max(DocEntry) from OINV where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "' and DocSubType = 'IB')"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OINV where \"DocEntry\" = (select max(\"DocEntry\") from OINV where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\' and \"DocSubType\" = \'IB\')";
                        break;
                    case "65307":
                        query = "select DocNum from OINV where DocEntry = (select max(DocEntry) from OINV where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "' and DocSubType = 'IX')"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OINV where \"DocEntry\" = (select max(\"DocEntry\") from OINV where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\' and \"DocSubType\"  = \'IX\')";
                        break;
                    case "65303":
                        query = "select DocNum from OINV where DocEntry = (select max(DocEntry) from OINV where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "' and DocSubType = 'DN')"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OINV where \"DocEntry\" = (select max(\"DocEntry\") from OINV where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\' and \"DocSubType\"  = \'DN\')";
                        break;
                    case "179":
                        query = "select DocNum from ORIN where DocEntry = (select max(DocEntry) from ORIN where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from ORIN where \"DocEntry\" = (select max(\"DocEntry\") from ORIN where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    case "140":
                        query = "select DocNum from ODLN where DocEntry = (select max(DocEntry) from ODLN where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')"; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from ODLN where \"DocEntry\" = (select max(\"DocEntry\") from ODLN where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    case "143":
                        query = "select DocNum from OPDN where DocEntry = (select max(DocEntry) from OPDN where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')"; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OPDN where \"DocEntry\" = (select max(\"DocEntry\") from OPDN where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    case "940":
                        query = "select DocNum from OWTR where DocEntry = (select max(DocEntry) from OWTR where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')"; // Transferencias de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OWTR where \"DocEntry\" = (select max(\"DocEntry\") from OWTR where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    case "426":
                        query = "select DocNum from OVPM where DocEntry = (select max(DocEntry) from OVPM where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')"; // Pagos Efectuados. Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OVPM where \"DocEntry\" = (select max(\"DocEntry\") from OVPM where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    case "180":
                        query = "select DocNum from ORDN where DocEntry = (select max(DocEntry) from ORDN where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from ORDN where \"DocEntry\" = (select max(\"DocEntry\") from ORDN where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    case "720":
                        query = "select DocNum from OIGE where DocEntry = (select max(DocEntry) from OIGE where " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Series = '" + pSerie + "')";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocNum\" from OIGE where \"DocEntry\" = (select max(\"DocEntry\") from OIGE where \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Series\" = \'" + pSerie + "\')";
                        break;
                    default:
                        query = "";
                        break;
                }

                if (query.ToString().Trim() != "")
                {
                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            docNum = (int)oRSMyTable.Fields.Item("DocNum").Value;
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                res = docNum.ToString();
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pFormFactura, "ERROR al Verificar el último documento para el usuario logueado", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Esta funcion recibe por parámentro el codigo de la factura, y el tipo de formulario para saber el tipo del documento que es
        public bool verificarExisteFactura(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select count(*) as Cant from \"OINV\" as oin " +
                              "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = oin.\"DocEntry\" and cfe.\"OBJTYPE\" = \'13\' " +
                                "where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocSubType\" <> \'DN\' and (cfe.\"ESTADO\" = \'0\' or cfe.\"ESTADO\" is null) ";
                        }
                        break;
                    case "60090":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes + Pago and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select count(*) as Cant from \"OINV\" as oin " +
                              "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = oin.\"DocEntry\" and cfe.\"OBJTYPE\" = \'13\' " +
                                "where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocSubType\" <> \'DN\' and (cfe.\"ESTADO\" = \'0\' or cfe.\"ESTADO\" is null) ";
                        }
                        break;
                    case "60091":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select count(*) as Cant from \"OINV\" as oin " +
                              "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = oin.\"DocEntry\" and cfe.\"OBJTYPE\" = \'13\' " +
                                "where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocSubType\" <> \'DN\' and (cfe.\"ESTADO\" = \'0\' or cfe.\"ESTADO\" is null) ";
                        }
                        break;
                    case "65304":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ and DocSubType = 'IB' "; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocSubType\" = \'IB\' ";
                        break;
                    case "65307":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ and DocSubType = 'IX' "; // Factura de Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocSubType\" = \'IX\' ";
                        break;
                    case "65303":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocSubType\" = \'DN\' ";
                        break;
                    case "179":
                        query = "select count(*) as Cant from ORIN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ORIN\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "140":
                        query = "select count(*) as Cant from ODLN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ODLN\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "143":
                        query = "select count(*) as Cant from OPDN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OPDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "940":
                        query = "select count(*) as Cant from OWTR where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Transferencias de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OWTR\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "426":
                        query = "select count(*) as Cant from OVPM where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Pagos Efectuados. Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Canceled\" = \'N\'";
                        break;
                    case "182":
                        query = "select count(*) as Cant from ORPD where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ORPD\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "180":
                        query = "select count(*) as Cant from ORDN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ORDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "720":
                        query = "select count(*) as Cant from OIGE where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Salida Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OIGE\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "141":
                        query = "select count(*) as Cant from OPCH where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OPCH\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    case "181":
                        query = "select count(*) as Cant from ORPC where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' /*and Handwrtten = 'N'*/ "; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ORPC\" where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\'";
                        break;
                    default:
                        query = "";
                        break;
                }

                if (query.ToString().Trim() != "")
                {
                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            int cant = (int)oRSMyTable.Fields.Item("Cant").Value;
                            if (cant != 0)
                                res = true;
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Verificar si existe la Factura", ex.Message.ToString()); // Guarda log del Proceso

                return res;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        public bool verificarActualizarExisteFactura(string pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                //and CreateDate = '"+ DateTime.Now.ToString(formatoFecha)+ "

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OINV where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' and DocSubType <> 'DN' order by UpdateDate desc, UpdateTS desc, DocEntry desc "; // Factura Clientes and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OINV\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" <> \'DN\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "60090":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OINV where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Factura Clientes + Pago and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OINV\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" <> \'DN\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "60091":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OINV where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OINV\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" <> \'DN\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "65304":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OINV where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType = 'IB' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OINV\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" = \'IB\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "65307":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OINV where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType = 'IX' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Factura de Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OINV\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" = \'IX\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "65303":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OINV where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType = 'DN' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OINV\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" = \'DN\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "179":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from ORIN where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, UpdateTS desc, DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"ORIN\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "140":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from ODLN where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"ODLN\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "143":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OPDN where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OPDN\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "940":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OWTR where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Transferencias de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OWTR\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "426":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OVPM where (" + campoReferencia + " is null or CounterRef is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, DocEntry desc"; // Pagos Efectuados. Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\",  \"UpdateDate\", \"UpdateTS\" from \"OVPM\" where (\"" + campoReferencia + "\" is null or \"CounterRef\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"Canceled\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"DocEntry\" desc";
                        break;
                    case "182":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from ORPD where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"ORPD\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "720":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OIGE where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Salida de Mercancías
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OIGE\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "141":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from OPCH where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"OPCH\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "181":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from ORPC where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"ORPC\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "180":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from ORDN where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Remitos. Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"ORDN\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                        break;
                    case "170":
                        query = "select top 1 DocEntry, DocNum, ObjType, DocSubType, UpdateDate, UpdateTS from ORCT where (" + campoReferencia + " is null or FolioNum is null) and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'N' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' order by UpdateDate desc, UpdateTS desc, DocEntry desc"; // Pagos recibidos. Factura cobranza.
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"DocEntry\", \"DocNum\", \"ObjType\", \"DocSubType\", \"UpdateDate\", \"UpdateTS\" from \"ORCT\" where (\"" + campoReferencia + "\" is null or \"FolioNum\" is null) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'N\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";

                        break;
                    default:
                        query = "";
                        break;
                }

                if (query.ToString().Trim() != "")
                {
                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            int docEntryRec = oRSMyTable.Fields.Item("DocEntry").Value; // Me guardo el DocEntry
                            int docNumRec = oRSMyTable.Fields.Item("DocNum").Value; // Me guardo el DocNum
                            codigoDocEntry = docEntryRec.ToString();
                            codigoFactura = docNumRec.ToString();

                            try
                            {
                                if (verificarExisteDocAutorizacion(oRSMyTable.Fields.Item("ObjType").Value, oRSMyTable.Fields.Item("DocSubType").Value, oRSMyTable.Fields.Item("UpdateDate").Value, oRSMyTable.Fields.Item("UpdateTS").Value) == false)
                                    res = true;
                            }
                            catch (Exception ex)
                            { res = true; }

                            oRSMyTable.MoveNext();
                        }
                    }
                }

                return res;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pFormFactura, "", "ERROR al VerificarActualizarExisteFactura", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        // Esta función valida si el documento tiene autorización, para no enviarlo en el momento
        public bool verificarExisteDocAutorizacion(string pObjType, string pDocSubType, DateTime pUpdateDate, int pUpdateTS)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "select top 1 DocEntry, DocNum from ODRF " +
                "where UserSign = '" + idUsuarioLogueado + "' and (UpdateDate > '" + pUpdateDate.ToString(formatoFecha) + "' or (UpdateDate = '" + pUpdateDate.ToString(formatoFecha) + "' and UpdateTS >= '" + pUpdateTS + "')) and ObjType = '" + pObjType + "' and DocSubType = '" + pDocSubType + "' and Canceled = 'N' " +
                "order by UpdateDate desc, UpdateTS desc, DocEntry desc";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select top 1 \"DocEntry\", \"DocNum\" from \"ODRF\" " +
                                   "where \"UserSign\" = \'" + idUsuarioLogueado + "\' and (\"UpdateDate\" > \'" + pUpdateDate.ToString(formatoFecha) + "\' or (\"UpdateDate\" = \'" + pUpdateDate.ToString(formatoFecha) + "\' and \"UpdateTS\" >= \'" + pUpdateTS + "\')) and \"ObjType\" = \'" + pObjType + "\' and \"DocSubType\" = \'" + pDocSubType + "\' and \"CANCELED\" = \'N\' " +
                                   "order by \"UpdateDate\" desc, \"UpdateTS\" desc, \"DocEntry\" desc";
                }

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                    if (oRSMyTable.RecordCount != 0)
                        res = true;

                return res;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pObjType.ToString(), pObjType.ToString(), "ERROR al Verificar documento autorización", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        // Esta funcion recibe por parámentro el codigo de la factura, y el tipo de formulario para saber el tipo del documento que es
        public bool verificarDocumentoCancelado(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = '" + pCodigoFactura + "' and \"" + campoReferencia + "\" is null and \"UserSign\" = '" + idUsuarioLogueado + "' and \"CANCELED\" = 'C' and \"DocSubType\" <> 'DN' ";
                        break;
                    case "60090":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes + Pago and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\' and \"DocSubType\" <> 'DN' ";
                        break;
                    case "60091":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "65304":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ and DocSubType = 'IB' "; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\' and \"DocSubType\" = \'IB\' ";
                        break;
                    case "65307":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ and DocSubType = 'IX' "; // Factura Exportación
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\' and \"DocSubType\" = \'IX\' ";
                        break;
                    case "65303":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\' and \"DocSubType\" = \'DN\' ";
                        break;
                    case "179":
                        query = "select count(*) as Cant from ORIN where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ORIN\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    case "140":
                        query = "select count(*) as Cant from ODLN where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ODLN\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    case "143":
                        query = "select count(*) as Cant from OPDN where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OPDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    case "940":
                        query = "select count(*) as Cant from OWTR where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ "; // Transferencias de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OWTR\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    case "426":
                        query = "select count(*) as Cant from OVPM where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ "; // Pagos Efectuados. Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    case "180":
                        query = "select count(*) as Cant from ORDN where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"ORDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    case "720":
                        query = "select count(*) as Cant from OIGE where DocNum = '" + pCodigoFactura + "' and " + campoReferencia + " is null and UserSign = '" + idUsuarioLogueado + "' and Canceled = 'C' /*and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from \"OIGE\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"CANCELED\" = \'C\'";
                        break;
                    default:
                        query = "";
                        break;
                }

                if (query.ToString().Trim() != "")
                {
                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            int cant = (int)oRSMyTable.Fields.Item("Cant").Value;
                            if (cant != 0)
                                res = true;
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Verificar documento Cancelado", ex.Message.ToString()); // Guarda log del Proceso

                return res;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        // Esta funcion recibe por parámentro el codigo de la factura, y el tipo de formulario para saber el tipo del documento que es
        public bool verificarDocumentoFecha(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "'  /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "60090":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes + Pago and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "60091":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "65304":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType = 'IB' "; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" = \'IB\' ";
                        break;
                    case "65307":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType = 'IX' "; // Factura Exportación
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" = \'IX\' ";
                        break;
                    case "65303":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\' and \"DocSubType\" = \'DN\' ";
                        break;
                    case "179":
                        query = "select count(*) as Cant from ORIN where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    case "140":
                        query = "select count(*) as Cant from ODLN where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ODLN where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    case "143":
                        query = "select count(*) as Cant from OPDN where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OPDN where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    case "940":
                        query = "select count(*) as Cant from OWTR where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ "; // Transferencias de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OWTR where \"DocNum\" = \'" + pCodigoFactura + "\' /*and \"" + campoReferencia + "\" is null*/ and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    case "426":
                        query = "select count(*) as Cant from OVPM where DocNum = '" + pCodigoFactura + "' /*and (" + campoReferencia + " is null or (" + campoReferencia + " is not null and Canceled = 'Y'))*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ "; // Pagos Efectuados. Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OVPM where \"DocNum\" = \'" + pCodigoFactura + "\' and (\"" + campoReferencia + "\" is null or (\"" + campoReferencia + "\" is not null and \"Canceled\" = \'Y\')) and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    case "180":
                        query = "select count(*) as Cant from ORDN where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' /*and " + campoReferencia + " is null*/ and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' /*and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    case "720":
                        query = "select count(*) as Cant from OIGE where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OIGE where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                    default: //Caso 170
                        query = "select count(*) as Cant from ORCT where DocNum = '" + pCodigoFactura + "' and Canceled = 'N' and UserSign = '" + idUsuarioLogueado + "' and DocDate >= '" + fechaInicioFE.ToString(formatoFecha) + "' ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ORCT where \"DocNum\" = \'" + pCodigoFactura + "\' and \"" + campoReferencia + "\" is null and \"UserSign\" = \'" + idUsuarioLogueado + "\' and \"DocDate\" >= \'" + fechaInicioFE.ToString(formatoFecha) + "\'";
                        break;
                        break;
                }

                if (query.ToString().Trim() != "")
                {
                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            int cant = (int)oRSMyTable.Fields.Item("Cant").Value;
                            if (cant != 0)
                                res = true;
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Verificar fecha de documento ", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Esta funcion recibe por parámentro el codigo de la factura, y el tipo de formulario para saber el tipo del documento que es DEVUELVE SI EXISTE EL DOCUMENTO
        public string verificarExisteFacturaBusquedaImpreCrystal(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select isIns,IsICT,DocSubType from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes and CurSource = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"isIns\",\"IsICT\",\"DocSubType\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "60090":
                        query = "select isIns,IsICT,DocSubType from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes + Pago and CurSource = 'L'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"isIns\",\"IsICT\",\"DocSubType\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "60091":
                        query = "select isIns,IsICT,DocSubType from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"isIns\",\"IsICT\",\"DocSubType\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' ";
                        break;
                    case "65304":
                        query = "select isIns,IsICT,DocSubType from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ and DocSubType = 'IB' "; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"isIns\",\"IsICT\",\"DocSubType\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' ";
                        break;
                    case "65307":
                        query = "select isIns,IsICT,DocSubType from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ and DocSubType = 'IX' "; // Factura Exportación
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"isIns\",\"IsICT\",\"DocSubType\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' ";
                        break;
                    case "65303":
                        query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' ";
                        break;
                    case "179":
                        query = "select count(*) as Cant from ORIN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "140":
                        query = "select count(*) as Cant from ODLN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ODLN where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "143":
                        query = "select count(*) as Cant from OPDN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OPDN where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "940":
                        query = "select count(*) as Cant from OWTR where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ "; // Transferencias de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OWTR where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "426":
                        query = "select count(*) as Cant from OVPM where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ "; // Pagos Efectuados. Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OVPM where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "180":
                        query = "select count(*) as Cant from ORDN where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "720":
                        query = "select count(*) as Cant from OIGE where DocNum = '" + pCodigoFactura + "' /*and " + campoReferencia + " is null and Handwrtten = 'N'*/ ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select count(*) as Cant from OIGE where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    default:
                        query = "";
                        break;
                        //case "133":
                        //    query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and Ref2 is null and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes and CurSource = 'C'
                        //    break;
                        //case "60090":
                        //    query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and Ref2 is null and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Clientes + Pago and CurSource = 'L'
                        //    break;
                        //case "60091":
                        //    query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and Ref2 is null and Handwrtten = 'N'*/ and DocSubType <> 'DN' "; // Factura Reserva de Clientes
                        //    break;
                        //case "65303":
                        //    query = "select count(*) as Cant from OINV where DocNum = '" + pCodigoFactura + "' /*and Ref2 is null and Handwrtten = 'N'*/ and DocSubType = 'DN'"; // Nota Debito Clientes
                        //    break;
                        //case "179":
                        //    query = "select count(*) as Cant from ORIN where DocNum = '" + pCodigoFactura + "' /*and Ref2 is null and Handwrtten = 'N'*/ ";
                        //    break;
                        //case "140":
                        //    query = "select count(*) as Cant from ODLN where DocNum = '" + pCodigoFactura + "' /*and Ref2 is null and Handwrtten = 'N'*/ "; // Remitos
                        //    break;
                        //case "940":
                        //    query = "select count(*) as Cant from OWTR where DocNum = '" + pCodigoFactura + "' and Ref2 is null /*and Handwrtten = 'N'*/ "; // Transferencias de Stock
                        //    break;
                        //default:
                        //    query = "";
                        //    break;
                }

                if (query.ToString().Trim() != "")
                {
                    oRSMyTable.DoQuery(query);

                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            //int cant = (int)oRSMyTable.Fields.Item("Cant").Value;
                            //if (cant != 0)
                            //    res = true;
                            if (pFormFactura.ToString().Equals("133") || pFormFactura.ToString().Equals("60091") || pFormFactura.ToString().Equals("60090") || pFormFactura.ToString().Equals("65307") || pFormFactura.ToString().Equals("65304"))
                            {
                                string esReserva = (string)oRSMyTable.Fields.Item("isIns").Value;
                                string esFactDeuPago = (string)oRSMyTable.Fields.Item("IsICT").Value;
                                string docSubType = (string)oRSMyTable.Fields.Item("DocSubType").Value;

                                if (docSubType.ToString().Equals("IB"))
                                    res = "65304"; // Boleta
                                else if (esFactDeuPago.ToString().Equals("Y"))
                                    res = "60090"; // Factura de Deudor + Pago
                                else if (esReserva.ToString().Equals("Y"))
                                    res = "60091"; // Factura de Reserva
                                else if (docSubType.ToString().Equals("IX"))
                                    res = "65307"; // Factura de Exportacion
                                else
                                    res = "133"; // Factura Deudor
                            }
                            else
                                res = pFormFactura;

                            oRSMyTable.MoveNext();
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Verificar si existe la Factura", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        public SAPbobsCOM.Recordset ObtenerFacturaAnticipo(String codigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from ODPI where DocNum = '" + codigo + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from ODPI where \"DocNum\" = \'" + codigo + "\'";

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        // Obtiene el Id y el Nombre del usuario logueado
        public bool getUsuarioLogueado()
        {
            bool res = false;
            try
            {
                SAPbouiCOM.StaticText oStatic;
                SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm("169", 0);
                oStatic = (SAPbouiCOM.StaticText)oForm.Items.Item("8").Specific;
                //pasamos a nuestra variable string el nombre del usuario
                usuarioLogueado = oStatic.Caption;

                res = true;

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("169", "", "ERROR al buscar usuario logueado", ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }

        // Obtengo el Id de Usuario y el Id de Sucursal
        public bool getIdUsuarioIdSucursal()
        {
            bool res = false; SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string impresoraPorUser = ""; string impresoraPorUserHana = "";

                if (descEmpresa.ToString().Equals("ETARE") || descEmpresa.ToString().Equals("RURAL"))
                {
                    impresoraPorUser = ", U_PRN_FE, U_TEMPLATE_FE"; impresoraPorUserHana = ", \"U_PRN_FE\", \"U_TEMPLATE_FE\"";
                }

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select USERID, Branch, USER_CODE, U_NAME" + impresoraPorUser + ", SUPERUSER from OUSR where U_NAME = '" + usuarioLogueado + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"USERID\", \"Branch\", \"USER_CODE\", \"U_NAME\" " + impresoraPorUserHana + ", \"SUPERUSER\" from \"OUSR\" where \"U_NAME\" = \'" + usuarioLogueado + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("Branch").Value);
                        idUsuarioLogueado = Convert.ToInt32(oRSMyTable.Fields.Item("USERID").Value);
                        string esSuperU = oRSMyTable.Fields.Item("SUPERUSER").Value;
                        if (esSuperU.ToString().Equals("Y"))
                            esSuperUsuario = true;
                        else
                            esSuperUsuario = false;

                        if (!String.IsNullOrEmpty(impresoraPorUser.ToString()))
                        {
                            nombreImpresoraUsuario = oRSMyTable.Fields.Item("U_PRN_FE").Value; // Si usa Impresora por Usuario
                            templateImpresoraUsuario = oRSMyTable.Fields.Item("U_TEMPLATE_FE").Value; // Si usa Impresora por Usuario
                        }

                        oRSMyTable.MoveNext();
                    }
                }

                //if (idSucursalUsuario < 0) // Si la sucursal es menor a 0 entonces se usa la 1 por defecto
                //    idSucursalUsuario = 1;

                res = true;
                return res;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso("", idUsuarioLogueado.ToString(), "ERROR al Buscar Sucursal", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        // Obtengo el Id de Usuario y el Id de Sucursal pasandole el id de Usuario
        public bool getIdSucursal(int pIdUsuario)
        {
            bool res = false; SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string impresoraPorUser = ""; string impresoraPorUserHana = "";

                if (impresoraUserLog == false) // Si toma la impresora del usuario del documento y no la del Logueado
                {
                    if (descEmpresa.ToString().Equals("ETARE") || descEmpresa.ToString().Equals("RURAL"))
                    {
                        impresoraPorUser = ", U_PRN_FE, U_TEMPLATE_FE"; impresoraPorUserHana = ", \"U_PRN_FE\", \"U_TEMPLATE_FE\"";
                    }
                }

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select USERID, Branch, USER_CODE, U_NAME" + impresoraPorUser + " from OUSR where USERID = '" + pIdUsuario + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"USERID\", \"Branch\", \"USER_CODE\", \"U_NAME\" " + impresoraPorUserHana + " from \"OUSR\" where \"USERID\" = \'" + pIdUsuario + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        idSucursalUsuario = Convert.ToInt32(oRSMyTable.Fields.Item("Branch").Value);
                        idUsuarioLogueado = Convert.ToInt32(oRSMyTable.Fields.Item("USERID").Value);

                        if (!String.IsNullOrEmpty(impresoraPorUser.ToString()))
                        {
                            nombreImpresoraUsuario = oRSMyTable.Fields.Item("U_PRN_FE").Value; // Si usa Impresora por Usuario
                            templateImpresoraUsuario = oRSMyTable.Fields.Item("U_TEMPLATE_FE").Value; // Si usa Impresora por Usuario
                        }

                        oRSMyTable.MoveNext();
                    }
                }

                //if (idSucursalUsuario < 0) // Si la sucursal es menor a 0 entonces se usa la 1 por defecto
                //    idSucursalUsuario = 1;

                res = true;
                return res;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                if (guardaLog == true)
                    guardaLogProceso("", idUsuarioLogueado.ToString(), "ERROR al Buscar Sucursal", ex.Message.ToString()); // Guarda log del Proceso
                return res;
            }
        }

        public SAPbobsCOM.Recordset ObtenerCuentaResguardoDocumento(String pCodigoFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select top 1 CashAcct, TrsfrAcct from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 \"CashAcct\", \"TrsfrAcct\" from OVPM where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                oRSMyTable.DoQuery(query);

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerCuentaResguardoDocumentoCodigoDGI(String pCodigoFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select top 1 U_CODIGODGI from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 \"U_CODIGODGI\" FROM \"OVPM\" WHERE \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                oRSMyTable.DoQuery(query);

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset obtenerGeneraBoletaEntrada(string pCodigoFactura, string pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string tabla = "OPCH";
                if (pFormFactura.Equals("181"))
                    tabla = "ORPC";

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "select top 1 QryGroup30 , QryGroup19 from OCRD as oc inner join " + tabla + " as op on op.CardCode = oc.CardCode and oc.CardType = 'S' " +
                "where DocNum = '" + pCodigoFactura + "' order by op.DocEntry desc";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select top 1 \"QryGroup30\" , \"QryGroup19\" from OCRD as oc inner join " + tabla + " as op on op.\"CardCode\" = oc.\"CardCode\" and oc.\"CardType\" = \'S\' " +
                    "where \"DocNum\" = \'" + pCodigoFactura + "\' order by op.\"DocEntry\" desc";
                }
                oRSMyTable.DoQuery(query);

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerGeneraRemito(String pCodigoFactura, string pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string tabla = "ORPD";

                if (pFormFactura.ToString().Equals("140"))
                    tabla = "ODLN";
                else if (pFormFactura.ToString().Equals("143"))
                    tabla = "OPDN";
                else if (pFormFactura.ToString().Equals("940"))
                    tabla = "OWTR";
                else if (pFormFactura.ToString().Equals("180"))
                    tabla = "ORDN";
                else if (pFormFactura.ToString().Equals("720"))
                    tabla = "OIGE";

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select top 1 isnull(U_GENERA_REMITO,0) as U_GENERA_REMITO from " + tabla + " where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 \"U_GENERA_REMITO\" from " + tabla + " where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";

                oRSMyTable.DoQuery(query);

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR Verificando Remito", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerGeneraRemitoTrsfStock(String pCodigoFactura, string pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select top 1 isnull(U_GENERA_REMITO,0) as U_GENERA_REMITO, Filler, isnull(ow.U_EREMITO,0) as U_EREMITO, ToWhsCode from OWTR as o " +
                  "LEFT join OWHS as ow on ow.WhsCode  = o.Filler where o.DocNum = '" + pCodigoFactura + "' order by o.DocEntry desc";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select top 1 \"U_GENERA_REMITO\", \"Filler\", IFNULL(ow.\"U_EREMITO\",0) as U_EREMITO, \"ToWhsCode\" from OWTR as o " +
                        "LEFT join \"OWHS\" as ow on ow.\"WhsCode\"  = o.\"Filler\" where o.\"DocNum\" = \'" + pCodigoFactura + "\' order by o.\"DocEntry\" desc";
                }

                oRSMyTable.DoQuery(query);

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR Verificando Remito Trsf Stock", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public bool ObtenerSalidaMercanciaGeneraRemito(String pCodigoFactura, string pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select top 1 U_GENERA_REMITO from IGE1 as ig " +
                "inner join [@MOTIVOS_DESCARTE] AS m on m.Code = ig.U_MOTIVO_DESCARTE " +
                "where ig.DocEntry = (select top 1 DocEntry from OIGE where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Salida de Mercancias

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select top 1 \"U_GENERA_REMITO\" from IGE1 as ig " +
                    "inner join \"@MOTIVOS_DESCARTE\" AS m on m.\"Code\" = ig.\"U_MOTIVO_DESCARTE\" " +
                    "where ig.\"DocEntry\" = (select top 1 \"DocEntry\" from OIGE where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";// Salida de Mercancias
                }

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        int generaRemito = (int)oRSMyTable.Fields.Item("U_GENERA_REMITO").Value;
                        if (generaRemito == 1)
                            res = true;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR Verificando Remito Salida", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Verifica si la cuenta seleccionda tiene un codigo de DGI correspondiente, si tiene genera resguardo
        public bool VerificarCuentaGeneraResguardo(String pCuenta)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            bool res = false;
            try
            {
                IdCFE id = new IdCFE();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select top 1 case when AccntntCod is null then '' else AccntntCod end as AccntntCod from OACT where AcctCode = '" + pCuenta + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 case when \"AccntntCod\" is null then '' else \"AccntntCod\" end as AccntntCod from OACT where \"AcctCode\" = \'" + pCuenta + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string cuentaDGI = (string)oRSMyTable.Fields.Item("AccntntCod").Value;
                        if (!String.IsNullOrEmpty(cuentaDGI.ToString()))
                            res = true;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR Verificando cuenta Resguardo", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Verifica si la cuenta seleccionda tiene un codigo de DGI correspondiente, si tiene genera resguardo
        public string ObtenerCodigoDGICuentaResguardo(String pCuenta)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                IdCFE id = new IdCFE();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select top 1 case when AccntntCod is null then '' else AccntntCod end as AccntntCod from OACT where AcctCode = '" + pCuenta + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 case when \"AccntntCod\" is null then '' else \"AccntntCod\" end as AccntntCod from OACT where \"AcctCode\" = \'" + pCuenta + "\'";

                oRSMyTable.DoQuery(query);

                if (!String.IsNullOrEmpty(query.ToString()))
                {
                    oRSMyTable.DoQuery(query);
                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            res = (string)oRSMyTable.Fields.Item("AccntntCod").Value;
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR buscando AccntntCod", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerCliente(String codigo, String pTipoCliente)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from OCRD where CardCode = '" + codigo + "' and CardType = '" + pTipoCliente + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from \"OCRD\" where \"CardCode\" = \'" + codigo + "\' and \"CardType\" = \'" + pTipoCliente + "\'";

                oRSMyTable.DoQuery(query);
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                SBO_Application.MessageBox("ERROR AL OBTENER LOS DATOS DEL CLIENTE" + ex.Message);
            }

            return oRSMyTable;
        }

        public string ObtenerClienteCanalVentaPocha(String codigo, String pTipoCliente)
        {
            string res = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select U_CANAL_VENTA as Canal from OCRD where CardCode = '" + codigo + "' and CardType = '" + pTipoCliente + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"U_CANAL_VENTA\" as Canal from OCRD where \"CardCode\" = \'" + codigo + "\' and \"CardType\" = \'" + pTipoCliente + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("Canal").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER CanalVenta DEL CLIENTE" + ex.Message);
                return res;
            }
        }

        public string obtenerComentarioPedido(int pDocEntryOINV)
        {
            string res = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select T2.\"Comments\" as Comentarios from OINV as T0 " +
                "left join INV1 as T1 on T1.\"DocEntry\" = T0.\"DocEntry\" " +
                "left join ORDR as T2 on T2.\"DocNum\" = T1.\"BaseRef\" " +
                "where T0.\"DocEntry\" =\'" + pDocEntryOINV + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("Comentarios").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        public bool ObtenerClienteVatStatusExtranjero(String codigo, String pTipoCliente)
        {
            bool res = false;
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select VatStatus from OCRD where CardCode = '" + codigo + "' and CardType = '" + pTipoCliente + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"VatStatus\" from \"OCRD\" where \"CardCode\" = \'" + codigo + "\' and \"CardType\" = \'" + pTipoCliente + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string vatStatus = oRSMyTable.Fields.Item("VatStatus").Value;
                        if (vatStatus.ToString().Equals("N")) // Entonces es Extranjero
                            res = true;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER VatStatus DEL CLIENTE" + ex.Message);
                return res;
            }
        }

        public bool ObtenerClienteGrupoExtranjero(String codigo, String pTipoCliente)
        {
            bool res = false;
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT oc.GroupName from OCRG AS oc inner join OCRD as ord on ord.GroupCode = oc.GroupCode where ord.CardCode = '" + codigo + "' and ord.CardType = '" + pTipoCliente + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select oc.\"GroupName\" from \"OCRG\" AS oc inner join \"OCRD\" as ord on ord.\"GroupCode\" = oc.\"GroupCode\" where ord.\"CardCode\" = \'" + codigo + "\' and ord.\"CardType\" = \'" + pTipoCliente + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string groupName = oRSMyTable.Fields.Item("GroupName").Value;
                        if (groupName.ToString().Contains("Extranjero") || groupName.ToString().Contains("EXTRANJERO")) // Entonces es Extranjero
                            res = true;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER GroupName DEL CLIENTE" + ex.Message);
                return res;
            }
        }

        public SAPbobsCOM.Recordset obtenerDatosResguardoProveedor(string pCodigoFactura, string pWTCode, string pCodigoCuentaResguardo, bool pEsCancelacion)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                string tablaCabezal = "OPCH"; string tablaLineas = "PCH5";
                if (pEsCancelacion == true)
                {
                    tablaCabezal = "ORPC"; tablaLineas = "RPC5";
                }

                /*String query = "select AbsEntry, pc.WTCode, ow.WTName, ow.Rate ,ow.PrctBsAmnt , ow.U_COD_DGI, TaxbleAmnt, TxblAmntSC,TxblAmntFC,WTAmnt, WTAmntSC, WTAmntFC from " + tablaLineas + " as pc " +
                "inner join OWHT as ow on ow.WTCode = pc.WTCode where pc.AbsEntry = (select top 1 DocEntry from " + tablaCabezal + " where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) and ow.U_COD_DGI = '" + pCodigoCuentaResguardo + "'"; // and pc.WTCode = '" + pWTCode + "'
                */

                String query = "select AbsEntry, pc.WTCode, ow.WTName, ow.Rate ,ow.PrctBsAmnt , ow.U_COD_DGI, TaxbleAmnt, TxblAmntSC,TxblAmntFC,WTAmnt, WTAmntSC, WTAmntFC from " + tablaLineas + " as pc " +
                "inner join OWHT as ow on ow.WTCode = pc.WTCode where pc.AbsEntry = (select top 1 DocEntry from " + tablaCabezal + " where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)"; // and pc.WTCode = '" + pWTCode + "'


                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    //if (descEmpresa.Equals("AEG"))
                    //{
                    //    query = "select \"AbsEntry\", pc.\"WTCode\", ow.\"WTName\", ow.\"Rate\" ,ow.\"PrctBsAmnt\" , ow.\"U_COD_DGI\", \"TaxbleAmnt\", \"TxblAmntSC\",\"TxblAmntFC\",\"WTAmnt\", \"WTAmntSC\", \"WTAmntFC\", cb.\"LineTotal\" FROM " + tablaLineas + " as pc " +
                    //    "inner join \"OWHT\" as ow on ow.\"WTCode\" = pc.\"WTCode\" " +
                    //    "inner join \"PCH1\" as cb on cb.\"DocEntry\" = pc.\"AbsEntry\" and cb.\"WtLiable\" = 'Y' " +
                    //    "where pc.\"AbsEntry\" = (select top 1 \"DocEntry\" from " + tablaCabezal + " where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) and ow.\"U_COD_DGI\" = \'" + pCodigoCuentaResguardo + "\'"; // and pc.WTCode = '" + pWTCode + "'
                    //}
                    //else
                    //{
                    query = "select \"AbsEntry\", pc.\"WTCode\", ow.\"WTName\", ow.\"Rate\" ,ow.\"PrctBsAmnt\" , ow.\"U_COD_DGI\", \"TaxbleAmnt\", \"TxblAmntSC\",\"TxblAmntFC\",\"WTAmnt\", \"WTAmntSC\", \"WTAmntFC\" from \"" + tablaLineas + "\" as pc " +
                    "inner join \"OWHT\" as ow on ow.\"WTCode\" = pc.\"WTCode\" where pc.\"AbsEntry\" = (select top 1 \"DocEntry\" from \"" + tablaCabezal + "\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) and ow.\"U_COD_DGI\" = \'" + pCodigoCuentaResguardo + "\'"; // and pc.WTCode = '" + pWTCode + "'
                    //}
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                guardaLogProceso(pCodigoFactura.ToString(), pCodigoFactura, "ERROR AL OBTENER LOS DATOS DEL Resguardo Proveedor", ex.Message.ToString());
                SBO_Application.MessageBox("ERROR AL OBTENER LOS DATOS DEL Resguardo Proveedor" + ex.Message);
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerRetencionesDocumento(String pDocEntry, string pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string table = "INV5";
                if (pFormFactura.ToString().Equals("179")) // Si es Nota de Credito la Retencion
                    table = "RIN5";
                else if (pFormFactura.ToString().Equals("141")) // Si es Factura de Proveedor
                    table = "PCH5";
                else if (pFormFactura.ToString().Equals("181")) // Si es Nota de Credito Proveedor
                    table = "RPC5";

                string campoCodDGI = ""; string campoCodDGIHana = "";

                if (descEmpresa.Equals("HENDE") || descEmpresa.Equals("POCHA"))
                { campoCodDGI = ", o.U_COD_DGI "; campoCodDGIHana = ",o.\"U_COD_DGI\" "; }

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT i.AbsEntry,i.WTCode,i.TaxbleAmnt,i.TxblAmntSC,i.TxblAmntFC,i.WtAmnt,i.WtAmntSC,i.WtAmntFC, o.U_COD_DGI" + campoCodDGI + " from " + table.ToString() + " as i " +
                "inner join OWHT as o on o.WTCode = i.WTCode where i.AbsEntry = '" + pDocEntry + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select i.\"AbsEntry\",i.\"WTCode\",i.\"TaxbleAmnt\",i.\"TxblAmntSC\",i.\"TxblAmntFC\",i.\"WTAmnt\",i.\"WTAmntSC\",i.\"WTAmntFC\"" + campoCodDGIHana + " from \"" + table.ToString() + "\" as i " +
                         "inner join \"OWHT\" as o on o.\"WTCode\" = i.\"WTCode\" where i.\"AbsEntry\" = \'" + pDocEntry + "\'";
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("ERROR AL OBTENER RETENCIONES DEL DOCUMENTO" + ex.Message);
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerClienteDirecciones(String codigo, String pTipoCliente)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select crd.* , ocs.Name, ocr.Name as PaisNombre from CRD1 as crd " +
                "left join OCST as ocs on ocs.Code = crd.State and ocs.Country = crd.Country " +
                "left join OCRY as ocr on ocr.Code = crd.Country " +
                "where CardCode = '" + codigo + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select crd.* , ocs.\"Name\", ocr.\"Name\" as PaisNombre from \"CRD1\" as crd " +
                    "left join \"OCST\" as ocs on ocs.\"Code\" = crd.\"State\" and ocs.\"Country\" = crd.\"Country\" " +
                    "left join \"OCRY\" as ocr on ocr.\"Code\" = crd.\"Country\" " +
                    "where \"CardCode\" = \'" + codigo + "\'";
                }

                oRSMyTable.DoQuery(query);
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("ERROR AL OBTENER LOS DATOS DEL CLIENTE" + ex.Message);
            }

            return oRSMyTable;
        }

        public SAPbobsCOM.Recordset obtenerGastosAdicionalesINV3(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                // La tabla que tiene los articulos es INV1 y el campo como referencia es DocEntry
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) order by LineNum";// Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "60090":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) order by LineNum";// Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "60091":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) order by LineNum";// Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "65304":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc) order by LineNum";// Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "65307":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc) order by LineNum";// Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "65303":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc) order by LineNum";// Nota Debito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "179":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr from RIN3 where DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Nota Credito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from INV3 where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Obtener Articulos", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }

        }

        public clsObjDocumento obtenerGastosAdicionalesPocha(String pCodigoFactura, String pFormFactura)
        {
            clsObjDocumento resDoc = new clsObjDocumento();
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                // La tabla que tiene los articulos es INV1 y el campo como referencia es DocEntry
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) order by LineNum";// Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "60090":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) order by LineNum";// Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "60091":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) order by LineNum";// Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "65304":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc) order by LineNum";// Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "65307":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc) order by LineNum";// Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "65303":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from INV3 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc) order by LineNum";// Nota Debito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "179":
                        query = "select LineTotal, TotalFrgn, TotalSumSy, Comments, VatPrcnt, VatSum, VatSumFrgn, TaxCode, FixCurr, ExpnsCode from RIN3 where DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Nota Credito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV3\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    default:
                        query = "";
                        break;
                }

                if (!String.IsNullOrEmpty(query.ToString()))
                {
                    oRSMyTable.DoQuery(query);
                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            string monedaGasto = oRSMyTable.Fields.Item("FixCurr").Value;
                            if (monedaGasto.ToString().Equals(monedaStrISO) || monedaGasto.ToString().Equals(monedaStrSimbolo)) // Si el documento es en Pesos
                                resDoc.GastoAdiMonto = (decimal)oRSMyTable.Fields.Item("LineTotal").Value;
                            else
                                resDoc.GastoAdiMonto = (decimal)oRSMyTable.Fields.Item("TotalFrgn").Value; // Si el documento es en otra moneda

                            resDoc.GastoAdiCodigo = "9999001";
                            //resDoc.GastoAdiDesc = obtenerDescripcionGasto(oRSMyTable.Fields.Item("ExpnsCode").Value);
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return resDoc;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Obtener GastosAdicionales", ex.Message.ToString()); // Guarda log del Proceso
                return resDoc;
            }
        }

        //public string obtenerDescripcionGasto(String pCode)
        //{
        //    SAPbobsCOM.Recordset oRSMyTable = null;
        //    string nombre = "";
        //    try
        //    {
        //        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
        //        String query = "select ExpnsName from OEXD where ExpnsCode = '" + pCode + "'";

        //        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
        //            query = "select \"ExpnsName\" from OEXD where \"ExpnsCode\" = \'" + pCode + "\'";

        //        oRSMyTable.DoQuery(query);

        //        if (oRSMyTable != null)
        //        {
        //            while (!oRSMyTable.EoF)
        //            {
        //                nombre = oRSMyTable.Fields.Item("ExpnsName").Value;
        //                oRSMyTable.MoveNext();
        //            }
        //        }

        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;
        //        return nombre;
        //    }
        //    catch (Exception ex)
        //    {
        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;
        //        if (guardaLog == true)
        //            guardaLogProceso(pCode, pCode, "ERROR al obtener el nombre del gasto", ex.Message.ToString()); // Guarda log del Proceso
        //        return nombre;
        //    }
        //}

        public SAPbobsCOM.Recordset ObtenerArticulos(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                // La tabla que tiene los articulos es INV1 y el campo como referencia es DocEntry
                String query = "";

                string where = "";
                if (descEmpresa.ToString().Equals("MAVIN"))
                    where += " and TreeType <> 'I' ";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select * from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) " + where + " order by VisOrder";// Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "60090":
                        query = "select * from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) " + where + " order by VisOrder";// Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "60091":
                        query = "select * from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) " + where + " order by VisOrder";// Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "65304":
                        query = "select * from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc) " + where + " order by VisOrder";// Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "65307":
                        query = "select * from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc) " + where + " order by VisOrder";// Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "65303":
                        query = "select * from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc) " + where + " order by VisOrder";// Nota Debito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OINV\" where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "179":
                        query = "select * from RIN1 where DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) " + where + " order by VisOrder";// Nota Crédito Clientes ANTES ERA INV1 PERO la tabla es RIN1
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"RIN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"ORIN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"VisOrder\"";
                        break;
                    case "140":
                        query = "select * from DLN1 where DocEntry = (select top 1 DocEntry from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) " + where + " order by LineNum";// Nota Crédito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"DLN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"ODLN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "143":
                        query = "select * from PDN1 where DocEntry = (select top 1 DocEntry from OPDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) " + where + " order by LineNum";// Nota Crédito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"PDN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OPDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "940":
                        query = "select * from WTR1 where DocEntry = (select top 1 DocEntry from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) " + where + "  order by LineNum";// Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"WTR1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OWTR\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "426":
                        query = "select * from VPM2 where DocNum = '" + pCodigoFactura + "'";// Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"VPM2\" where \"DocNum\" = (select top 1 \"DocEntry\" from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) ";
                        break;
                    case "182":
                        query = "select * from RPD1 where DocEntry = (select top 1 DocEntry from ORPD where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Devoluciones Compras
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"RPD1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"ORPD\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "180":
                        query = "select * from RDN1 where DocEntry = (select top 1 DocEntry from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Nota Crédito Clientes ANTES ERA INV1 PERO la tabla es RIN1
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"RDN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"ORDN\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    case "720":
                        query = "select * from IGE1 where DocEntry = (select top 1 DocEntry from OIGE where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Salida de Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select * from \"IGE1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from \"OIGE\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) order by \"LineNum\"";
                        break;
                    //case "426":
                    //    query = "select * from VPM2 where DocNum = (select top 1 DocEntry from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Resguardos
                    //    break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Obtener Articulos", ex.Message.ToString()); // Guarda log del Proceso

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerArticulosAnticipo(String codigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from DPI1 where DocEntry = '" + codigo + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from \"DPI1\" where \"DocEntry\" = \'" + codigo + "\'";

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset ObtenerDatosPreviosDocumento(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                // La tabla que tiene los articulos es INV1 y el campo como referencia es DocEntry
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 oin.DocEntry, oin.DocNum as Num_Factura, odl.DocNum as Num_Entrega, case when ord.DocNum is null then 0 else ord.DocNum end as Num_Pedido from OINV as oin " +
                        "inner join INV1 as inv on inv.DocEntry = oin.DocEntry inner join ODLN as odl on odl.DocEntry = inv.BaseEntry " +
                        "inner join DLN1 as dln on dln.DocEntry = odl.DocEntry inner join ORDR as ord on ord.DocEntry = dln.BaseEntry " +
                        "where oin.DocNum = '" + pCodigoFactura + "' and oin.DocSubType <> 'DN' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select top 1 oin.\"DocEntry\", oin.\"DocNum\" as Num_Factura, odl.\"DocNum\" as Num_Entrega, case when ord.\"DocNum\" is null then 0 else ord.\"DocNum\" end as Num_Pedido from \"OINV\" as oin " +
                            "inner join \"INV1\" as inv on inv.\"DocEntry\" = oin.\"DocEntry\" inner join ODLN as odl on odl.\"DocEntry\" = inv.\"BaseEntry\" " +
                            "inner join \"DLN1\" as dln on dln.\"DocEntry\" = odl.\"DocEntry\" inner join ORDR as ord on ord.\"DocEntry\" = dln.\"BaseEntry\" " +
                            "where oin.\"DocNum\" = \'" + pCodigoFactura + "\' and oin.\"DocSubType\" <> \'DN\' order by oin.\"DocEntry\" desc";
                        }
                        break;
                    case "60090":
                        query = "select top 1 oin.DocEntry, oin.DocNum as Num_Factura, odl.DocNum as Num_Entrega, case when ord.DocNum is null then 0 else ord.DocNum end as Num_Pedido from OINV as oin " +
                        "inner join INV1 as inv on inv.DocEntry = oin.DocEntry inner join ODLN as odl on odl.DocEntry = inv.BaseEntry " +
                        "inner join DLN1 as dln on dln.DocEntry = odl.DocEntry inner join ORDR as ord on ord.DocEntry = dln.BaseEntry " +
                        "where oin.DocNum = '" + pCodigoFactura + "' and oin.DocSubType <> 'DN' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select top 1 oin.\"DocEntry\", oin.\"DocNum\" as Num_Factura, odl.\"DocNum\" as Num_Entrega, case when ord.\"DocNum\" is null then 0 else ord.\"DocNum\" end as Num_Pedido from \"OINV\" as oin " +
                            "inner join \"INV1\" as inv on inv.\"DocEntry\" = oin.\"DocEntry\" inner join ODLN as odl on odl.\"DocEntry\" = inv.\"BaseEntry\" " +
                            "inner join \"DLN1\" as dln on dln.\"DocEntry\" = odl.\"DocEntry\" inner join ORDR as ord on ord.\"DocEntry\" = dln.\"BaseEntry\" " +
                            "where oin.\"DocNum\" = \'" + pCodigoFactura + "\' and oin.\"DocSubType\" <> \'DN\' order by oin.\"DocEntry\" desc";
                        }
                        break;
                    case "60091":
                        query = "select top 1 oin.DocEntry, oin.DocNum as Num_Factura, odl.DocNum as Num_Entrega, case when ord.DocNum is null then 0 else ord.DocNum end as Num_Pedido from OINV as oin " +
                        "inner join INV1 as inv on inv.DocEntry = oin.DocEntry inner join ODLN as odl on odl.DocEntry = inv.BaseEntry " +
                        "inner join DLN1 as dln on dln.DocEntry = odl.DocEntry inner join ORDR as ord on ord.DocEntry = dln.BaseEntry " +
                        "where oin.DocNum = '" + pCodigoFactura + "' and oin.DocSubType <> 'DN' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select top 1 oin.\"DocEntry\", oin.\"DocNum\" as Num_Factura, odl.\"DocNum\" as Num_Entrega, case when ord.\"DocNum\" is null then 0 else ord.\"DocNum\" end as Num_Pedido from \"OINV\" as oin " +
                            "inner join \"INV1\" as inv on inv.\"DocEntry\" = oin.\"DocEntry\" inner join ODLN as odl on odl.\"DocEntry\" = inv.\"BaseEntry\" " +
                            "inner join \"DLN1\" as dln on dln.\"DocEntry\" = odl.\"DocEntry\" inner join ORDR as ord on ord.\"DocEntry\" = dln.\"BaseEntry\" " +
                            "where oin.\"DocNum\" = \'" + pCodigoFactura + "\' and oin.\"DocSubType\" <> \'DN\' order by oin.\"DocEntry\" desc";
                        }
                        break;
                    case "65304":
                        query = "select top 1 oin.DocEntry, oin.DocNum as Num_Factura, odl.DocNum as Num_Entrega, case when ord.DocNum is null then 0 else ord.DocNum end as Num_Pedido from OINV as oin " +
                        "inner join INV1 as inv on inv.DocEntry = oin.DocEntry inner join ODLN as odl on odl.DocEntry = inv.BaseEntry " +
                        "inner join DLN1 as dln on dln.DocEntry = odl.DocEntry inner join ORDR as ord on ord.DocEntry = dln.BaseEntry " +
                        "where oin.DocNum = '" + pCodigoFactura + "' and oin.DocSubType = 'IB' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select top 1 oin.\"DocEntry\", oin.\"DocNum\" as Num_Factura, odl.\"DocNum\" as Num_Entrega, case when ord.\"DocNum\" is null then 0 else ord.\"DocNum\" end as Num_Pedido from \"OINV\" as oin " +
                            "inner join \"INV1\" as inv on inv.\"DocEntry\" = oin.\"DocEntry\" inner join ODLN as odl on odl.\"DocEntry\" = inv.\"BaseEntry\" " +
                            "inner join \"DLN1\" as dln on dln.\"DocEntry\" = odl.\"DocEntry\" inner join ORDR as ord on ord.\"DocEntry\" = dln.\"BaseEntry\" " +
                            "where oin.\"DocNum\" = \'" + pCodigoFactura + "\' and oin.\"DocSubType\" = \'IB\' order by oin.\"DocEntry\" desc";
                        }
                        break;
                    case "65307":
                        query = "select top 1 oin.DocEntry, oin.DocNum as Num_Factura, odl.DocNum as Num_Entrega, case when ord.DocNum is null then 0 else ord.DocNum end as Num_Pedido from OINV as oin " +
                        "inner join INV1 as inv on inv.DocEntry = oin.DocEntry inner join ODLN as odl on odl.DocEntry = inv.BaseEntry " +
                        "inner join DLN1 as dln on dln.DocEntry = odl.DocEntry inner join ORDR as ord on ord.DocEntry = dln.BaseEntry " +
                        "where oin.DocNum = '" + pCodigoFactura + "' and oin.DocSubType = 'IX' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select top 1 oin.\"DocEntry\", oin.\"DocNum\" as Num_Factura, odl.\"DocNum\" as Num_Entrega, case when ord.\"DocNum\" is null then 0 else ord.\"DocNum\" end as Num_Pedido from \"OINV\" as oin " +
                            "inner join \"INV1\" as inv on inv.\"DocEntry\" = oin.\"DocEntry\" inner join ODLN as odl on odl.\"DocEntry\" = inv.\"BaseEntry\" " +
                            "inner join \"DLN1\" as dln on dln.\"DocEntry\" = odl.\"DocEntry\" inner join ORDR as ord on ord.\"DocEntry\" = dln.\"BaseEntry\" " +
                            "where oin.\"DocNum\" = \'" + pCodigoFactura + "\' and oin.\"DocSubType\" = \'IX\' order by oin.\"DocEntry\" desc";
                        }
                        break;
                    case "65303":
                        query = "select top 1 oin.DocEntry, oin.DocNum as Num_Factura, odl.DocNum as Num_Entrega, case when ord.DocNum is null then 0 else ord.DocNum end as Num_Pedido from OINV as oin " +
                        "inner join INV1 as inv on inv.DocEntry = oin.DocEntry inner join ODLN as odl on odl.DocEntry = inv.BaseEntry " +
                        "inner join DLN1 as dln on dln.DocEntry = odl.DocEntry inner join ORDR as ord on ord.DocEntry = dln.BaseEntry " +
                        "where oin.DocNum = '" + pCodigoFactura + "' and oin.DocSubType <> 'DN' order by oin.DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select top 1 oin.\"DocEntry\", oin.\"DocNum\" as Num_Factura, odl.\"DocNum\" as Num_Entrega, case when ord.\"DocNum\" is null then 0 else ord.\"DocNum\" end as Num_Pedido from \"OINV\" as oin " +
                            "inner join \"INV1\" as inv on inv.\"DocEntry\" = oin.\"DocEntry\" inner join ODLN as odl on odl.\"DocEntry\" = inv.\"BaseEntry\" " +
                            "inner join \"DLN1\" as dln on dln.\"DocEntry\" = odl.\"DocEntry\" inner join ORDR as ord on ord.\"DocEntry\" = dln.\"BaseEntry\" " +
                            "where oin.\"DocNum\" = \'" + pCodigoFactura + "\' and oin.\"DocSubType\" <> \'DN\' order by oin.\"DocEntry\" desc";
                        }
                        break;
                    /*case "179":
                        query = "select * from RIN1 where DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Nota Crédito Clientes ANTES ERA INV1 PERO la tabla es RIN1
                        break;
                    case "140":
                        query = "select * from DLN1 where DocEntry = (select top 1 DocEntry from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Nota Crédito Clientes 
                        break;
                    case "940":
                        query = "select * from WTR1 where DocEntry = (select top 1 DocEntry from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) order by LineNum";// Transferencia de Stock
                        break;*/
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Obtener Datos Previos", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        // Obtener DocEntry del documento
        public int ObtenerDocEntryDocumento(String pCodigoFactura, String pFormFactura)
        {
            int res = 0;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                // La tabla que tiene los articulos es INV1 y el campo como referencia es DocEntry
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select DocEntry from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc)";// Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc)";
                        break;
                    case "60090":
                        query = "select DocEntry from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc)";// Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc)";
                        break;
                    case "60091":
                        query = "select DocEntry from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc)";// Factura Reserva de Clientes and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc)";
                        break;
                    case "65304":
                        query = "select DocEntry from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc)";// Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc)";
                        break;
                    case "65307":
                        query = "select DocEntry from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc)";// Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc)";
                        break;
                    case "65303":
                        query = "select DocEntry from INV1 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc)";// Nota Debito Clientes 
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"INV1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc)";
                        break;
                    case "179":
                        query = "select DocEntry from RIN1 where DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Nota Crédito Clientes ANTES ERA INV1 PERO la tabla es RIN1
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"RIN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "140":
                        query = "select DocEntry from DLN1 where DocEntry = (select top 1 DocEntry from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"DLN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ODLN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "143":
                        query = "select DocEntry from PDN1 where DocEntry = (select top 1 DocEntry from OPDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"PDN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OPDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "426":
                        query = "select top 1 DocEntry from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";// Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"OVPM\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "940":
                        query = "select DocEntry from WTR1 where DocEntry = (select top 1 DocEntry from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"WTR1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OWTR where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "182":
                        query = "select DocEntry from RPD1 where DocEntry = (select top 1 DocEntry from ORPD where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Remitos de Compras
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"RPD1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ORPD where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "180":
                        query = "select DocEntry from RDN1 where DocEntry = (select top 1 DocEntry from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Remitos de Compras
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"RDN1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "141":
                        query = "select DocEntry from PCH1 where DocEntry = (select top 1 DocEntry from OPCH where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Compras Proveedores
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"PCH1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OPCH where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "181":
                        query = "select DocEntry from RPC1 where DocEntry = (select top 1 DocEntry from ORPC where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// NC Proveedores
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"RPC1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ORPC where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "720":
                        query = "select DocEntry from IGE1 where DocEntry = (select top 1 DocEntry from OIGE where DocNum = '" + pCodigoFactura + "' order by DocEntry desc)";// Salida Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select \"DocEntry\" from \"IGE1\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OIGE where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc)";
                        break;
                    case "170":
                        query = "SELECT top 1 DocEntry from ORCT where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";// Pagos Recibidos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "SELECT top 1 \"DocEntry\" from \"ORCT\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    default:
                        query = "";
                        break;
                }

                if (!String.IsNullOrEmpty(query.ToString()))
                {
                    oRSMyTable.DoQuery(query);
                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            res = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value);
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura, pCodigoFactura, "ERROR al Obtener DocEntry del documento", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }

        }

        public SAPbobsCOM.Recordset ObtenerCuotas(String pCodigoFactura, String pFormFactura, String pMoneda)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                // La tabla que tiene los articulos es INV1 y el campo como referencia es DocEntry
                String query = ""; string campo = "InsTotal";

                if (!String.IsNullOrEmpty(pCodigoFactura))
                {
                    if (!pMoneda.Equals("UYU"))
                        campo = "InsTotalFC";

                    // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                    string caseSwitch = pFormFactura;
                    switch (caseSwitch)
                    {
                        case "133":
                            query = "select count(*) as Cant," + campo + " from INV6 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) group by " + campo + " order by Cant desc";// Factura Clientes
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"INV6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";
                            break;
                        case "60090":
                            query = "select count(*) as Cant," + campo + " from INV6 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) group by " + campo + " order by Cant desc";// Factura Clientes + Pago
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"INV6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";
                            break;
                        case "60091":
                            query = "select count(*) as Cant," + campo + " from INV6 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc) group by " + campo + " order by Cant desc";// Factura Reserva de Clientes InstlmntID,DueDate,InsTotal,InsTotalFC and UpdInvnt = 'C'
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"INV6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";
                            break;
                        case "65304":
                            query = "select count(*) as Cant," + campo + " from INV6 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc) group by " + campo + " order by Cant desc";// Boleta
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"INV6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";
                            break;
                        case "65307":
                            query = "select count(*) as Cant," + campo + " from INV6 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc) group by " + campo + " order by Cant desc";// Factura Exportacion
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"INV6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";
                            break;
                        case "65303":
                            query = "select count(*) as Cant," + campo + " from INV6 where DocEntry = (select top 1 DocEntry from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc) group by " + campo + " order by Cant desc";// // Nota Debito Clientes 
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"INV6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";
                            break;
                        case "179":
                            query = "select count(*) as Cant," + campo + " from RIN6 where DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) group by " + campo + " order by Cant desc";// Nota Crédito Clientes 
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"RIN6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";// Nota Crédito Clientes 
                            break;
                        case "180":
                            query = "select count(*) as Cant," + campo + " from RDN6 where DocEntry = (select top 1 DocEntry from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc) group by " + campo + " order by Cant desc";// Nota Crédito Clientes 
                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                query = "select count(*) as Cant,\"" + campo + "\" from \"RDN6\" where \"DocEntry\" = (select top 1 \"DocEntry\" from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc) group by \"" + campo + "\" order by Cant desc";// Nota Crédito Clientes 
                            break;
                        default:
                            query = "";
                            break;
                    }

                    oRSMyTable.DoQuery(query);
                }

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pCodigoFactura.ToString(), pCodigoFactura.ToString(), "ERROR al Obtener ObtenerCuotas", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }

        }

        public SAPbobsCOM.Recordset obtenerDocumentoReferenciaRecibo(String pCodigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT ROW_NUMBER() OVER (PARTITION BY T100.DocEntry ORDER BY T100.DocEntry) as NroLinRef, " +
                 "T100.ObjType, T100.DocEntry, T100.TpoDocRef, T100.FolioPref, T100.FolioNum, T100.IndGlobal as IndGlobal " +
                "FROM(SELECT T10.ObjType as ObjType, T10.DocEntry as DocEntry, T12.Tipo as TpoDocRef, T12.FolioPrefijo as FolioPref, T12.FolioNumero as FolioNum, " +
                "NULL as IndGlobal FROM ORCT T10 INNER JOIN RCT2 T11 ON T11.DocEntry = T10.DocEntry " +
                "INNER JOIN dbo.ControlFE T12 ON T12.ObjType = T11.ObjType AND T12.DocEntry = T11.DocEntry " +
                //"UNION ALL SELECT T10.ObjType as ObjType, T10.DocEntry as DocEntry, NULL as TpoDocRef, NULL as FolioPref, NULL as FolioNum, " +
                //"1 as IndGlobal FROM ORCT T10 " +
                //"LEFT JOIN RCT2 T11 ON T11.DocNum = T10.DocNum " +
                //"LEFT JOIN dbo.ControlFE T12 ON T12.ObjType = T11.ObjType AND T12.DocEntry = T11.DocEntry " +
                //"LEFT JOIN OINV T13 ON T13.DocEntry = T11.DocEntry " +
                //"WHERE T12.DocEntry is NULL
                ") as T100 " +
                "WHERE 1 = 1 AND T100.DocEntry = '" + pCodigo + "' ";

                oRSMyTable.DoQuery(query);
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("170", pCodigo.ToString(), "ERROR al Obtener documento Referencia Recibo", ex.Message.ToString()); // Guarda log del Proceso

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }

            return oRSMyTable;
        }

        // Obtener Facturas de Referencia a Nota de Credito
        public SAPbobsCOM.Recordset obtenerDocumentoReferenciaNotaCredito(String pCodigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                //oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                //String query = "select case when r.BaseRef is null then 0 else r.BaseRef end as BaseRef,case when r.BaseType is null then 0 else r.BaseType end as BaseType,case when r.BaseEntry is null then 0 else r.BaseEntry end as BaseEntry," +
                //"case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum,case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, case when o.Ref2 is null then 0 else o.Ref2 end as Ref2 from RIN1 as r " +
                ////"inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                //"inner join OINV as o on r.ObjType = 13 and r.BaseEntry = o.DocEntry  "+
                //"where r.DocEntry = '" + pCodigo + "' group by BaseRef, BaseType, BaseEntry,o.FolioNum, o.FolioPref, o.Ref2";
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select case when r.BaseType is null then 0 else r.BaseType end as BaseType,case when r.BaseEntry is null then 0 else r.BaseEntry end as BaseEntry," +
                "case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum,case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, case when o." + campoReferencia + " is null then 0 else o." + campoReferencia + " end as Ref2 from RIN1 as r " +
                //"inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                "inner join INV1 as oi on oi.DocEntry = r.BaseEntry and r.BaseType = 13 " +
                "inner join OINV as o on oi.DocEntry = o.DocEntry  " +
                "where r.DocEntry = '" + pCodigo + "' " +
                "group by r.BaseType, r.BaseEntry,o.FolioNum, o.FolioPref, o." + campoReferencia + "";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select case when r.\"BaseType\" is null then 0 else r.\"BaseType\" end as BaseType,case when r.\"BaseEntry\" is null then 0 else r.\"BaseEntry\" end as BaseEntry," +
                        "case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum,case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, case when o.\"" + campoReferencia + "\" is null then 0 else o.\"" + campoReferencia + "\" end as Ref2 from \"RIN1\" as r " +
                        //"inner join OINV as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                        "inner join \"INV1\" as oi on r.\"BaseType\" = 13 and r.\"BaseEntry\" = oi.\"DocEntry\" " +
                        "inner join \"OINV\" as o on oi.\"DocEntry\" = o.\"DocEntry\" " +
                        "where r.\"DocEntry\" = \'" + pCodigo + "\' group by r.\"BaseType\", r.\"BaseEntry\",o.\"FolioNum\", o.\"FolioPref\", \"" + campoReferencia + "\"";
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("179", pCodigo.ToString(), "ERROR al Obtener documento Referencia Nota Credito", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset obtenerDocumentoReferenciaRemitoCancelacion(String pCodigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                //oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                //String query = "select case when r.BaseRef is null then 0 else r.BaseRef end as BaseRef,case when r.BaseType is null then 0 else r.BaseType end as BaseType,case when r.BaseEntry is null then 0 else r.BaseEntry end as BaseEntry," +
                //"case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum,case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, case when o.Ref2 is null then 0 else o.Ref2 end as Ref2 from RIN1 as r " +
                ////"inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                //"inner join OINV as o on r.ObjType = 13 and r.BaseEntry = o.DocEntry  "+
                //"where r.DocEntry = '" + pCodigo + "' group by BaseRef, BaseType, BaseEntry,o.FolioNum, o.FolioPref, o.Ref2";
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select case when r.BaseType is null then 0 else r.BaseType end as BaseType,case when r.BaseEntry is null then 0 else r.BaseEntry end as BaseEntry," +
                "case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum,case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, case when o." + campoReferencia + " is null then 0 else o." + campoReferencia + " end as Ref2 from RIN1 as r " +
                //"inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                "inner join INV1 as oi on oi.DocEntry = r.BaseEntry and r.BaseType = 13 " +
                "inner join OINV as o on oi.DocEntry = o.DocEntry  " +
                "where r.DocEntry = '" + pCodigo + "' " +
                "group by r.BaseType, r.BaseEntry,o.FolioNum, o.FolioPref, o." + campoReferencia + "";


                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select case when r.\"BaseType\" is null then 0 else r.\"BaseType\" end as BaseType,case when r.\"BaseEntry\" is null then 0 else r.\"BaseEntry\" end as BaseEntry," +
                        "case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum,case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, case when o.\"" + campoReferencia + "\" is null then 0 else o.\"" + campoReferencia + "\" end as Ref2 from \"RIN1\" as r " +
                        //"inner join OINV as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                        "inner join \"INV1\" as oi on r.\"BaseType\" = 13 and r.\"BaseEntry\" = oi.\"DocEntry\" " +
                        "inner join \"OINV\" as o on oi.\"DocEntry\" = o.\"DocEntry\" " +
                        "where r.\"DocEntry\" = \'" + pCodigo + "\' group by r.\"BaseType\", r.\"BaseEntry\",o.\"FolioNum\", o.\"FolioPref\", \"" + campoReferencia + "\"";
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("179", pCodigo.ToString(), "ERROR al Obtener documento Referencia Nota Credito", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        public SAPbobsCOM.Recordset obtenerDocumentoReferenciaResguardo(String pCodigo, string pTipoClienteProveedor)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string tabla = "OINV"; string tablaNC = "ORIN";
                if (pTipoClienteProveedor.ToString().Equals("S"))
                { tabla = "OPCH"; tablaNC = "ORPC"; }

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                /*String query = "select case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum," +
                "case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, " +
                "case when o." + campoReferencia + " is null then 0 else o." + campoReferencia + " end as Ref2 from VPM2 as r  " +
                "inner join " + tabla + " as o on o.DocEntry = r.Baseabs where r.DocEntry = '" + pCodigo + "' group by FolioNum, o.FolioPref, o." + campoReferencia + "";
                */

                String query = "select case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum," +
                "case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, " +
                "case when o." + campoReferencia + " is null then 0 else o." + campoReferencia + " end as Ref2 from VPM2 as r  " +
                "inner join OVPM as ov on ov.DocNum = r.DocNum inner join " + tabla + " as o on o.DocEntry = r.Baseabs " +
                "where r.DocNum= '" + pCodigo + "' and (r.InvType = 13 or r.Invtype = 18) " +
                "UNION " +
                "select case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum," +
                "case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, " +
                "case when o." + campoReferencia + " is null then 0 else o." + campoReferencia + " end as Ref2 from VPM2 as r  " +
                "inner join OVPM as ov on ov.DocNum = r.DocNum inner join " + tablaNC + " as o on o.DocEntry = r.Baseabs " +
                "where r.DocNum= '" + pCodigo + "' and (r.InvType = 14 or r.Invtype = 19) ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum," +
                    "case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, " +
                    "case when o.\"" + campoReferencia + "\" is null then 0 else o.\"" + campoReferencia + "\" end as Ref2 from \"VPM2\" as r  " +
                    "inner join \"OVPM\" as ov on ov.\"DocEntry\" = r.\"DocNum\" inner join \"" + tabla + "\" as o on o.\"DocEntry\" = r.\"baseAbs\" " +
                    "where ov.\"DocNum\"= \'" + pCodigo + "\' and (r.\"InvType\" = \'13\' or r.\"InvType\" = \'18\') " +
                    "UNION " +
                    "select case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum," +
                    "case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, " +
                    "case when o.\"" + campoReferencia + "\" is null then 0 else o.\"" + campoReferencia + "\" end as Ref2 from \"VPM2\" as r  " +
                    "inner join \"OVPM\" as ov on ov.\"DocEntry\" = r.\"DocNum\" inner join \"" + tablaNC + "\" as o on o.\"DocEntry\" = r.\"baseAbs\" " +
                    "where ov.\"DocNum\"= \'" + pCodigo + "\' and (r.\"InvType\" = \'14\' or r.\"InvType\" = \'19\') ";
                }

                //if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                //{
                //    query = "select case when r.\"BaseRef\" is null then 0 else r.\"BaseRef\" end as BaseRef,case when r.\"BaseType\" is null then 0 else r.\"BaseType\" end as BaseType,case when r.\"BaseEntry\" is null then 0 else r.\"BaseEntry\" end as BaseEntry," +
                //"case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum,case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, case when o.\"Ref2\" is null then 0 else o.\"Ref2\" end as Ref2 from RIN1 as r " +
                //"inner join OINV as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                //"where r.\"DocEntry\" = \'" + pCodigo + "\' group by \"BaseRef\", \"BaseType\", \"BaseEntry\",o.\"FolioNum\", o.\"FolioPref\", \"Ref2\"";
                //}

                oRSMyTable.DoQuery(query);

                return oRSMyTable;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("179", pCodigo.ToString(), "ERROR al Obtener documento Referencia Resguardo", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return null;
            }
        }

        public SAPbobsCOM.Recordset obtenerDocumentoReferenciaBoletaCancelacion(String pCodigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select case when r.BaseType is null then 0 else r.BaseType end as BaseType,case when r.BaseEntry is null then 0 else r.BaseEntry end as BaseEntry," +
                "case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum,case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, case when o." + campoReferencia + " is null then 0 else o." + campoReferencia + " end as Ref2 from RPC1 as r " +
                //"inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                "inner join PCH1 as oi on oi.DocEntry = r.BaseEntry and r.BaseType = 18 " +
                "inner join OPCH as o on oi.DocEntry = o.DocEntry  " +
                "where r.DocEntry = '" + pCodigo + "' " +
                "group by r.BaseType, r.BaseEntry,o.FolioNum, o.FolioPref, o." + campoReferencia + "";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select case when r.\"BaseType\" is null then 0 else r.\"BaseType\" end as BaseType,case when r.\"BaseEntry\" is null then 0 else r.\"BaseEntry\" end as BaseEntry," +
                        "case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum,case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, case when o.\"" + campoReferencia + "\" is null then 0 else o.\"" + campoReferencia + "\" end as Ref2 from \"RPC1\" as r " +
                        //"inner join OINV as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                        "inner join \"PCH1\" as oi on r.\"BaseType\" = 18 and r.\"BaseEntry\" = oi.\"DocEntry\" " +
                        "inner join \"OPCH\" as o on oi.\"DocEntry\" = o.\"DocEntry\" " +
                        "where r.\"DocEntry\" = \'" + pCodigo + "\' group by r.\"BaseType\", r.\"BaseEntry\",o.\"FolioNum\", o.\"FolioPref\", \"" + campoReferencia + "\"";
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("179", pCodigo.ToString(), "ERROR al Obtener documento Referencia Nota Credito", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        // Devuelve true si proviene de una factura Manual
        public bool obtenerDocumentoReferenciaNotaCreditoEsManual(String pDocNum)
        {
            bool esMan = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);


                String query = "select o.Handwrtten from RIN1 as r " +
                "inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                "where r.DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pDocNum + "' order by DocEntry desc) group by o.Handwrtten";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select o.\"Handwrtten\" from \"RIN1\" as r " +
                "inner join \"OINV\" as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                "where r.\"DocEntry\" = (select top 1 \"DocEntry\" from ORIN where \"DocNum\" = \'" + pDocNum + "\' order by \"DocEntry\" desc) group by o.\"Handwrtten\"";
                }

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        if (oRSMyTable.Fields.Item("Handwrtten").Value == "Y")
                            esMan = true; // Es manual
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return esMan;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("179", pDocNum.ToString(), "ERROR al Obtener documento Referencia Nota Credito Manual", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return esMan;
            }
        }

        // Devuelve true si proviene de una factura Exportacion
        public bool obtenerDocumentoReferenciaEsExportacion(String pDocNum)
        {
            bool esMan = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                /*String query = "select case when r.BaseType is null then 0 else r.BaseType end as BaseType,case when r.BaseEntry is null then 0 else r.BaseEntry end as BaseEntry," +
                "case when o.FolioNum is null then 0 else o.FolioNum end as FolioNum,case when o.FolioPref is null then '' else o.FolioPref end as FolioPref, case when o.Ref2 is null then 0 else o.Ref2 end as Ref2 from RIN1 as r " +
                    //"inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                "inner join INV1 as oi on oi.DocEntry = r.BaseEntry and r.BaseType = 13 " +
                "inner join OINV as o on oi.DocEntry = o.DocEntry  " +
                "where r.DocEntry = '" + pDocNum + "' " +
                "group by r.BaseType, r.BaseEntry,o.FolioNum, o.FolioPref, o.Ref2";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select case when r.\"BaseType\" is null then 0 else r.\"BaseType\" end as BaseType,case when r.\"BaseEntry\" is null then 0 else r.\"BaseEntry\" end as BaseEntry," +
                        "case when o.\"FolioNum\" is null then 0 else o.\"FolioNum\" end as FolioNum,case when o.\"FolioPref\" is null then '' else o.\"FolioPref\" end as FolioPref, case when o.\"Ref2\" is null then 0 else o.\"Ref2\" end as Ref2 from RIN1 as r " +
                        //"inner join OINV as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                        "inner join INV1 as oi on r.\"BaseType\" = 13 and r.\"BaseEntry\" = oi.\"DocEntry\" " +
                        "inner join OINV as o on oi.\"DocEntry\" = o.\"DocEntry\" " +
                        "where r.\"DocEntry\" = \'" + pDocNum + "\' group by r.\"BaseType\", r.\"BaseEntry\",o.\"FolioNum\", o.\"FolioPref\", \"Ref2\"";
                }*/

                String query = "select o." + campoReferencia + " as Ref2 from RIN1 as r " +
                "inner join OINV as o on o.DocEntry = r.BaseEntry and o.DocNum = r.BaseRef and o.ObjType = r.BaseType " +
                "where r.DocEntry = (select top 1 DocEntry from ORIN where DocNum = '" + pDocNum + "' order by DocEntry desc) group by o." + campoReferencia + "";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select o.\"" + campoReferencia + "\" as Ref2 from \"RIN1\" as r " +
                    //"inner join OINV as o on o.\"DocEntry\" = r.\"BaseEntry\" and o.\"DocNum\" = r.\"BaseRef\" and o.\"ObjType\" = r.\"BaseType\" " +
                    "inner join \"INV1\" as oi on r.\"BaseType\" = 13 and r.\"BaseEntry\" = oi.\"DocEntry\" " +
                    "inner join \"OINV\" as o on oi.\"DocEntry\" = o.\"DocEntry\" " +
                    "where r.\"DocEntry\" = (select top 1 \"DocEntry\" from ORIN where \"DocNum\" = \'" + pDocNum + "\' order by \"DocEntry\" desc) group by o.\"" + campoReferencia + "\"";
                }

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string ref2 = oRSMyTable.Fields.Item("Ref2").Value;
                        if (!String.IsNullOrEmpty(ref2.ToString()))
                        {
                            if (ref2.ToString().Equals("121"))
                                esMan = true; // Es Exportacion

                            /*int referencia = 0;
                            bool result = int.TryParse(ref2, out referencia);
                            if (referencia == 121)
                                esMan = true; // Es Exportacion*/
                        }
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return esMan;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("179", pDocNum.ToString(), "ERROR al Obtener documento Referencia Nota Credito Exportacion", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return esMan;
            }
        }

        // Devuelve true si proviene de una factura de Reserva y se selecciono el item de Exportacion
        public bool verificarEsFacturaExportacionDeReserva(String pDocNum)
        {
            bool esMan = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select r.Name from OIDC as r inner join OINV as o on o.Indicator = r.Code where o.DocNum = '" + pDocNum + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select r.\"Name\" from \"OIDC\" as r inner join OINV as o on o.\"Indicator\" = r.\"Code\" where o.\"DocNum\" = \'" + pDocNum + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string seleccionado = oRSMyTable.Fields.Item("Name").Value;
                        if (seleccionado.Contains("Exportacion") || seleccionado.Contains("Factura de Exp"))
                            esMan = true; // Es Exportacion
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return esMan;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("140", pDocNum.ToString(), "ERROR al Obtener si es Factura de Exportacion por Reserva", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return esMan;
            }
        }

        //// Devuelve true si proviene de una factura Exportacion
        //public bool obtenerRemitoEsExportacion(String pDocNum, string pFormFactura)
        //{
        //    bool esMan = false;
        //    SAPbobsCOM.Recordset oRSMyTable = null;
        //    try
        //    {
        //        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
        //        string table = "ODLN";
        //        if (pFormFactura.ToString().Equals("180"))
        //            table = "ORDN";

        //        String query = "select U_REMITO_EXPORT from " + table + " as r where r.DocNum = '" + pDocNum + "'";

        //        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
        //            query = "select \"U_REMITO_EXPORT\" from " + table + " as r where r.\"DocNum\" = \'" + pDocNum + "\'";

        //        oRSMyTable.DoQuery(query);

        //        if (oRSMyTable != null)
        //        {
        //            while (!oRSMyTable.EoF)
        //            {
        //                if (oRSMyTable.Fields.Item("U_REMITO_EXPORT").Value == 1)
        //                    esMan = true; // Es Exportacion
        //                oRSMyTable.MoveNext();
        //            }
        //        }

        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;

        //        return esMan;
        //    }
        //    catch (Exception ex)
        //    {
        //        if (guardaLog == true)
        //            guardaLogProceso("140", pDocNum.ToString(), "ERROR al Obtener si Remito corresponde es de Exportacion", ex.Message.ToString()); // Guarda log del Proceso
        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;
        //        return esMan;
        //    }
        //}

        // Devuelve true si es una Nota de Credito de Exportacion
        public bool esCfeManualNotaCreditoExportacion(String pDocNum)
        {
            bool esExportacion = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select U_TIPOCFEMANUAL from ORIN as r where r.DocNum = '" + pDocNum + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"U_TIPOCFEMANUAL\" from \"ORIN\" as r where r.\"DocNum\" = \'" + pDocNum + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string valor = oRSMyTable.Fields.Item("U_TIPOCFEMANUAL").Value;
                        if (!String.IsNullOrEmpty(valor.ToString()))
                        {
                            if (!valor.ToString().Equals("-") && !valor.ToString().Equals("XXX"))
                            {
                                if (Convert.ToInt32(oRSMyTable.Fields.Item("U_TIPOCFEMANUAL").Value) == 122)
                                    esExportacion = true;
                            }
                        }

                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return esExportacion;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("140", pDocNum.ToString(), "ERROR al Obtener si es NC de Exportacion", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return esExportacion;
            }
        }

        // Devuelve true si es una Factura de Exportacion
        public bool esCfeManualFacturaExportacion(String pDocNum)
        {
            bool esExportacion = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select U_TIPOCFEMANUAL from ORIN as r where r.DocNum = '" + pDocNum + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"U_TIPOCFEMANUAL\" from \"ORIN\" as r where r.\"DocNum\" = \'" + pDocNum + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string valor = oRSMyTable.Fields.Item("U_TIPOCFEMANUAL").Value;
                        if (!String.IsNullOrEmpty(valor.ToString()))
                        {
                            if (!valor.ToString().Equals("-") && !valor.ToString().Equals("XXX"))
                            {
                                if (Convert.ToInt32(oRSMyTable.Fields.Item("U_TIPOCFEMANUAL").Value) == 121)
                                    esExportacion = true;
                            }
                        }

                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return esExportacion;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("140", pDocNum.ToString(), "ERROR al Obtener si es NC de Exportacion", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return esExportacion;
            }
        }

        // Obtengo la ruta donde se guardaran los documentos 
        public String obtenerRutaDocumentos()
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select AttachPath from OADP";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"AttachPath\" from \"OADP\"";

                oRSMyTable.DoQuery(query);
                String res = "";
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("AttachPath").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo los datos de Conexion a Facturacion Electronica
        public bool obtenerDatosConexion(bool pUsaRutaAnexos, bool pVerificoModoImpresion)
        {
            bool res = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select U_USUARIO,U_CLAVE,U_RUCEMISOR,U_TENANT,U_RUTAPDF,U_RUTAWS,U_IMPRIME,U_GUARDAQR,U_REMITOCFE,U_IMPRIMECOPIACRE,U_GUARDALOGPROCESO,U_ENVIAAUTO,U_RUTAQR,U_DESC_EMPRESA,U_RESGUARDOCFE,U_GUARDADATOSCFE,U_FECHA_INICIO from [@ADDCFESICFE]";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "Select \"U_USUARIO\",\"U_CLAVE\",\"U_RUCEMISOR\",\"U_TENANT\",\"U_RUTAPDF\",\"U_RUTAWS\",\"U_IMPRIME\",\"U_GUARDAQR\",\"U_REMITOCFE\",\"U_IMPRIMECOPIACRE\",\"U_GUARDALOGPROCESO\",\"U_ENVIAAUTO\",\"U_RUTAQR\",\"U_DESC_EMPRESA\",\"U_RESGUARDOCFE\",\"U_GUARDADATOSCFE\",\"U_FECHA_INICIO\" from \"@ADDCFESICFE\"";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        sicfePassword = oRSMyTable.Fields.Item("U_CLAVE").Value;
                        sicfeUser = oRSMyTable.Fields.Item("U_USUARIO").Value;
                        sicfeTenant = oRSMyTable.Fields.Item("U_TENANT").Value;
                        rucEmisorSicfe = oRSMyTable.Fields.Item("U_RUCEMISOR").Value;
                        sicfeRutaWS = oRSMyTable.Fields.Item("U_RUTAWS").Value;
                        descEmpresa = oRSMyTable.Fields.Item("U_DESC_EMPRESA").Value;

                        fechaInicioFE = Convert.ToDateTime(oRSMyTable.Fields.Item("U_FECHA_INICIO").Value);

                        if (pVerificoModoImpresion == true) // Si verifica la variable de modo de impresion
                        {
                            if (oRSMyTable.Fields.Item("U_IMPRIME").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_IMPRIME").Value.ToString().Equals("si"))
                                imprimePDFDefecto = true;
                            else
                                imprimePDFDefecto = false;
                        }

                        if (oRSMyTable.Fields.Item("U_GUARDAQR").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_GUARDAQR").Value.ToString().Equals("si"))
                            guardaImagenQR = true;
                        else
                            guardaImagenQR = false;

                        if (oRSMyTable.Fields.Item("U_REMITOCFE").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_REMITOCFE").Value.ToString().Equals("si"))
                            realizarRemitos = true;
                        else
                            realizarRemitos = false;

                        if (oRSMyTable.Fields.Item("U_RESGUARDOCFE").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_RESGUARDOCFE").Value.ToString().Equals("si"))
                            realizarResguardos = true;
                        else
                            realizarResguardos = false;

                        if (oRSMyTable.Fields.Item("U_IMPRIMECOPIACRE").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_IMPRIMECOPIACRE").Value.ToString().Equals("si"))
                            imprimre2ViasCredito = true;
                        else
                            imprimre2ViasCredito = false;

                        if (oRSMyTable.Fields.Item("U_GUARDALOGPROCESO").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_GUARDALOGPROCESO").Value.ToString().Equals("si"))
                            guardaLog = true;
                        else
                            guardaLog = false;

                        if (oRSMyTable.Fields.Item("U_ENVIAAUTO").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_ENVIAAUTO").Value.ToString().Equals("si"))
                            enviaAuto = true;
                        else
                            enviaAuto = false;

                        if (oRSMyTable.Fields.Item("U_GUARDADATOSCFE").Value.ToString().Equals("SI") || oRSMyTable.Fields.Item("U_GUARDADATOSCFE").Value.ToString().Equals("si"))
                            guardaDatosRespCFE = true;
                        else
                            guardaDatosRespCFE = false;

                        if (!pUsaRutaAnexos) // Si es false entonces uso la ruta que está guardada en la tabla
                            if (!String.IsNullOrEmpty(oRSMyTable.Fields.Item("U_RUTAPDF").Value))
                                rutaDefecto = oRSMyTable.Fields.Item("U_RUTAPDF").Value;

                        if (!String.IsNullOrEmpty(oRSMyTable.Fields.Item("U_RUTAQR").Value))
                            rutaDefectoQR = oRSMyTable.Fields.Item("U_RUTAQR").Value;

                        oRSMyTable.MoveNext();
                    }
                }

                esNuevaVersionDGI = true;

                if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("OBRIN") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WELLS") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("THRIF") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("CIMSA") || descEmpresa.ToString().Equals("PORTV") || descEmpresa.ToString().Equals("FRUTI") || descEmpresa.ToString().Equals("NAVIP") || descEmpresa.ToString().Equals("MILDA ") || descEmpresa.ToString().Equals("DEIMI") || descEmpresa.ToString().Equals("TORIN") || descEmpresa.ToString().Equals("BRIGN") || descEmpresa.ToString().Equals("RENOV") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("GENIA") || descEmpresa.ToString().Equals("ETARE") || descEmpresa.ToString().Equals("MAVIN") || descEmpresa.ToString().Equals("TECHM") || descEmpresa.ToString().Equals("AEG") || descEmpresa.ToString().Equals("OPRUM"))// || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("RURAL") 
                {
                    sumaDescuentos = false;
                    muestraDescuentoGlobal = true;
                }

                if (descEmpresa.ToString().Equals("POCHA"))
                { realizarBoletaEntrada = true; versionSicfe = "1.37.3"; }
                else if (descEmpresa.ToString().Equals("ENGRW"))
                { realizarBoletaEntrada = true; versionSicfe = null; } // Con versión 0 toma la última instalada
                else if (descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("TRIGE"))
                    versionSicfe = null;

                //if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("ANCAL") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("PURAT") || descEmpresa.ToString().Equals("INVEN") || descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("RURAL") || descEmpresa.ToString().Equals("OBRIN") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WELLS") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("THRIF") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN")) //
                //{
                //    esNuevaVersionDGI = true;

                //    if (descEmpresa.ToString().Equals("BOSCH") || descEmpresa.ToString().Equals("REMIL") || descEmpresa.ToString().Equals("SOLGE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("OBRIN") || descEmpresa.ToString().Equals("ENGRW") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("WELLS") || descEmpresa.ToString().Equals("TRIGE") || descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("THRIF") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("SCHIN"))// || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("RURAL") 
                //    {
                //        sumaDescuentos = false;
                //        muestraDescuentoGlobal = true;
                //    }
                //}

                if (descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("TRIAL") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("WYST") || descEmpresa.ToString().Equals("RENOV") || descEmpresa.ToString().Equals("CIMSA") || descEmpresa.ToString().Equals("TENTA") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("ETARE") || descEmpresa.ToString().Equals("TECHM") || descEmpresa.ToString().Equals("MAVIN") || descEmpresa.ToString().Equals("PROND") || descEmpresa.ToString().Equals("UPR"))
                    formatoFecha = "dd-MM-yyyy";

                if (descEmpresa.ToString().Equals("FITCO") || descEmpresa.ToString().Equals("FIOCI"))
                    campoReferencia = "U_SI_OrdNum"; // Es el campo que utiliza Fitco para Ref2

                if (descEmpresa.ToString().Equals("CIMSA"))
                    sucursalesActivadas = true;

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                res = true;

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", "", "ERROR al leer los campos de la BD", ex.Message.ToString()); // Guarda log del Proceso

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("Ha ocurrido un error al leer los campos de la BD.");
                return res;
            }
        }

        public decimal ObtenerImpuesto(String pCodigoIva)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from OSTC where Code = '" + pCodigoIva + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from OSTC where \"Code\" = \'" + pCodigoIva + "\'";

                oRSMyTable.DoQuery(query);
                decimal imp = 0;
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        imp = (decimal)oRSMyTable.Fields.Item("Rate").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return imp;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("ERROR AL OBTENER IMPUESTOS DE LA FACTURA" + ex.Message);
                return 0;
            }
        }

        public string obtenerPackingFitco(String pCode)
        {
            string res = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT U_SI_Packin as Pack from [@SIR_PACK] WHERE Code = '" + pCode + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("Pack").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER Packing DE LA FACTURA" + ex.Message);
                return res;
            }
        }

        public string obtenerNombreBanco(String pCode)
        {
            string res = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT BankName from ODSC WHERE BankCode = '" + pCode + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("BankName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER Nombre de Banco DE LA FACTURA" + ex.Message);
                return res;
            }
        }

        public string obtenerMarcaArtPortvan(string pItemCode)
        {
            string res = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "SELECT U_Marca as Marca from OITM where ItemCode = '" + pItemCode + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("Marca").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER Marca del Item" + ex.Message);
                return res;
            }
        }

        public bool articuloInventario(string pItemCode)
        {
            bool res = true;
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "SELECT InvntItem from OITM where ItemCode = '" + pItemCode + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        string invntItem = (string)oRSMyTable.Fields.Item("InvntItem").Value;
                        if (invntItem.ToString().Equals("N"))
                            res = false; // No es un artículo de Inventario
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER Artículo Inventario" + ex.Message);
                return res;
            }
        }

        public string obtenerUserTextArticulo(String pItemCode)
        {
            string res = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT UserText from OITM WHERE ItemCode = '" + pItemCode + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("UserText").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                SBO_Application.MessageBox("ERROR AL OBTENER UserText del Artículo" + ex.Message);
                return res;
            }
        }

        public string ObtenerMonedaLocal()
        {
            string res = "";
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "Select MainCurncy from OADM";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"MainCurncy\" from OADM";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("MainCurncy").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                if (res.ToString().Equals("$") || res.ToString().Equals("UYU"))
                {
                    monedaStrISO = "UYU"; monedaStrSimbolo = "$";
                }
                else if (res.ToString().Equals("U$S") || res.ToString().Equals("USD"))
                {
                    monedaStrISO = "USD"; monedaStrSimbolo = "U$S";
                }
                else if (res.ToString().Equals("CLP") || res.ToString().Equals("PCH"))
                {
                    monedaStrISO = "CLP"; monedaStrSimbolo = "CLP";
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("ERROR AL OBTENER MONEDA LOCAL" + ex.Message);
                return res;
            }
        }

        // Obtiene los datos por cada tipo de documento
        public bool obtenerCFEConfDocumento(int pObjTypeDocumento, string pDocSubType)
        {
            bool res = false; // Por defecto no envía el documento. 
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select U_GeneraCFE,U_EnvioAutomatico,U_RutaPDF,U_RutaQR,U_CampoReferencia,U_ModoImpresion,U_DocSubType,U_ObjTypeDocumento from [@ADDFECONFDOCUMENTOS] where U_ObjTypeDocumento = '" + pObjTypeDocumento + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"U_GeneraCFE\",\"U_EnvioAutomatico\",\"U_RutaPDF\",\"U_RutaQR\",\"U_CampoReferencia\",\"U_ModoImpresion\",\"U_DocSubType\",\"U_ObjTypeDocumento\" from \"@ADDFECONFDOCUMENTOS\" where \"U_ObjTypeDocumento\" = \'" + pObjTypeDocumento + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        limpiarObjetoConfDocumento();
                        rutaDefecto = oRSMyTable.Fields.Item("U_RutaPDF").Value;
                        rutaDefectoQR = oRSMyTable.Fields.Item("U_RutaQR").Value;
                        campoReferencia = oRSMyTable.Fields.Item("U_CampoReferencia").Value;

                        int enviaAutoDocumento = (int)oRSMyTable.Fields.Item("U_EnvioAutomatico").Value;
                        if (enviaAutoDocumento == 0)
                            enviaAuto = false;
                        else
                            enviaAuto = true;

                        string modoImpresionDocumento = oRSMyTable.Fields.Item("U_ModoImpresion").Value;

                        // Validación para el modo de impresión
                        if (modoImpresionDocumento.ToString().Equals("CYR")) // Configurado para imprimir por Crystal Report
                            imprimePDFDefecto = false;
                        else if (modoImpresionDocumento.ToString().Equals("PDF")) // Configurado para imprimir por PDF
                            imprimePDFDefecto = true;
                        else if (modoImpresionDocumento.ToString().Equals("NOI")) // Configurado para NO IMPRIMIR de ningun modo
                        {
                            imprimePDFDefecto = true; // Lo cambio a true para que entre en la funcion imprimirPDF donde tengo el control para que no imprima
                            noImprimeNingunModo = true;
                        }
                        else if (modoImpresionDocumento.ToString().Equals("FOX")) // Configurado para imprimir por Foxit Reader
                        {
                            imprimePDFDefecto = true; // Lo cambio a true para que entre en la funcion imprimirPDF donde tengo el control para que no imprima
                            softwareImpresion = "Foxit"; // Cambio el modo de impresión a Foxit Reader
                        }

                        res = true; // Si encuentra registro para el ObjType entonces envía el documento

                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("ERROR AL OBTENER CONFIGURACION DE DOCUMENTO" + ex.Message);
                return res;
            }
        }

        void limpiarObjetoConfDocumento()
        {
            try
            {
                objConfigDocumento.CampoReferencia = "";
                objConfigDocumento.EnviaAutomaticamente = enviaAuto;
                objConfigDocumento.ModoImpresion = "";
                objConfigDocumento.RutaPDF = "";
                objConfigDocumento.RutaQR = "";
            }
            catch (Exception ex)
            { }
        }

        // Crea una lista con las referencias del documento
        public List<clsObjeto> crearListaReferencia(string pTexto)
        {
            List<clsObjeto> res = new List<clsObjeto>();
            try
            {
                String[] textoCortado = pTexto.Split(new char[] { ',' });
                try
                {
                    for (int i = 0; i < textoCortado.Length; i++)
                    {
                        clsObjeto doc = new clsObjeto();
                        String[] serieFolio = textoCortado[i].Split(new char[] { '-' });
                        doc.Serie = serieFolio[0].ToString().Trim().Replace(" ", "");
                        doc.Folio = serieFolio[1].ToString().Trim().Replace(" ", "");
                        res.Add(doc);
                    }

                    //// Si tiene CNPJ en FreeText
                    //int inicialChar = freeText.LastIndexOf("CNPJ");
                    //int finalChar = freeText.Length;
                    //string textoReemplazar = freeText.Substring(inicialChar, finalChar - inicialChar);

                    //textoReemplazar = textoReemplazar.Substring(0, 24);
                    //cnpj = textoReemplazar.Replace("CNPJ", "").Replace("=", "").Replace(":", "").Replace(".", "").Replace("-", "").Replace("/", "").Replace(" ", "");
                }
                catch (Exception ex)
                { }


                return res;
            }
            catch (Exception ex)
            { }
            return res;
        }

        // Esta funcion devuelve el Separador Decimal configurado en SAP
        public string obtenerSeparadorDecimal()
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT DecSep FROM OADM";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "SELECT \"DecSep\" FROM OADM";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("DecSep").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Esta funcion devuelve el Separador Miles configurado en SAP
        public string obtenerSeparadorMiles()
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT ThousSep FROM OADM";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "SELECT \"ThousSep\" FROM OADM";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = (string)oRSMyTable.Fields.Item("ThousSep").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Departamento
        public string obtenerDepartamento(String pCodigoDepart, string pCodigoPais)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string depto = "";

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from OCST where Code = '" + pCodigoDepart + "'";

                if (!String.IsNullOrEmpty(pCodigoPais.ToString())) // Si recibe un codigo de País por parámetro
                {
                    if (pCodigoPais.Length >= 2)
                    {
                        pCodigoPais = pCodigoPais.Substring(0, 2);
                        pCodigoPais = pCodigoPais.ToUpper();

                        query += " and Country = '" + pCodigoPais + "'";
                    }
                }

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select * from \"OCST\" where \"Code\" = \'" + pCodigoDepart + "\'";

                    if (!String.IsNullOrEmpty(pCodigoPais.ToString())) // Si recibe un codigo de País por parámetro
                    {
                        if (pCodigoPais.Length >= 2)
                        {
                            pCodigoPais = pCodigoPais.Substring(0, 2);
                            pCodigoPais = pCodigoPais.ToUpper();

                            query += " and \"Country\" = '" + pCodigoPais + "'";
                        }
                    }
                }

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        depto = oRSMyTable.Fields.Item("Name").Value;
                        oRSMyTable.MoveNext();
                    }
                }
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }

            return depto;
        }

        // Descripcion del Medio de Pago
        public string obtenerDescripcionMedioPago(string pCode)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string medioPago = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "select Name from [@ADDMEDIOSPAGOS] where Code = '" + pCode + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"Name\" from \"@ADDMEDIOSPAGOS\" where \"Code\" = \'" + pCode + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        medioPago = oRSMyTable.Fields.Item("Name").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return medioPago;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return medioPago;
            }
        }

        // Cantidad de Cajas para Almena
        public string obtenerCantidadCajasAlmena(int pUgpEntry)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string dscItem = "";
            decimal cantidad = 0;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "SELECT BaseQty FROM UGP1 T0 WHERE UgpEntry ='" + pUgpEntry + "' and UomEntry = 2";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        cantidad = (decimal)oRSMyTable.Fields.Item("BaseQty").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                dscItem = cantidad.ToString();

                if (dscItem.Length == 0)
                    dscItem = "[000CS]";
                else if (dscItem.Length == 1)
                    dscItem = "[00" + dscItem + "CS]";
                else if (dscItem.Length == 2)
                    dscItem = "[0" + dscItem + "CS]";
                else if (dscItem.Length == 3)
                    dscItem = "[" + dscItem + "CS]";

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return dscItem;
            }
            catch (Exception ex)
            {
                guardaLogProceso("", "", "ERROR al ObtenerCantidadCajasAlmena", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return dscItem;
            }
        }

        // Cantidad de Cajas para Almena
        public string obtenerCantidadCajasAlmenaItemCode(string pItemCode)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string dscItem = "";
            decimal cantidad = 0;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "SELECT T0.BaseQty FROM UGP1 T0 " +
                "inner join OITM as T1 on T1.UgpEntry = T0.UgpEntry and UomEntry = 2 " +
                "WHERE T1.ItemCode ='" + pItemCode + "' ";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        cantidad = (decimal)oRSMyTable.Fields.Item("BaseQty").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                dscItem = cantidad.ToString();

                if (dscItem.Length == 0)
                    dscItem = "[000CS]";
                else if (dscItem.Length == 1)
                    dscItem = "[00" + dscItem + "CS]";
                else if (dscItem.Length == 2)
                    dscItem = "[0" + dscItem + "CS]";
                else if (dscItem.Length == 3)
                    dscItem = "[" + dscItem + "CS]";

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return dscItem;
            }
            catch (Exception ex)
            {
                guardaLogProceso("", "", "ERROR al ObtenerCantidadCajasAlmena", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return dscItem;
            }
        }

        // Obtiene el nombre de tipo de CFE
        public string obtenerNombreTipoCFE(String pTipoCFE)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string tipoCFE = pTipoCFE;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select Name from [@ADDTIPOSCFE] where Code = '" + pTipoCFE + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \'Name\' from \"@ADDTIPOSCFE\" where \"Code\" = \'" + pTipoCFE + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        tipoCFE = oRSMyTable.Fields.Item("Name").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return tipoCFE;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return tipoCFE;
            }
        }

        // Obtengo los datos de la Sociedad con los que cargare los datos del Emisor
        public SAPbobsCOM.Recordset obtenerDatosEmisor()
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from OADM as oa inner join ADM1 as ad on ad.Code = oa.Code";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from OADM as oa inner join ADM1 as ad on ad.\"Code\" = oa.\"Code\"";

                oRSMyTable.DoQuery(query);
                return oRSMyTable;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return oRSMyTable;
            }
        }

        // Obtengo los datos de la sucursale
        public SAPbobsCOM.Recordset obtenerDatosSucursal()
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select suc.* from [@SUC_DGI] as suc inner join OUBR as oub on oub.Name = suc.U_SUC_SIST where oub.Code = '" + idSucursalUsuario + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select suc.* from \"@SUC_DGI\" as suc inner join \"OUBR\" as oub on oub.\"Name\" = suc.\"U_SUC_SIST\" where oub.\"Code\" = \'" + idSucursalUsuario + "\'";

                if (sucursalesActivadas == true)
                    query = "select suc.* from [@SUC_DGI] as suc where suc.U_SUC_SIST = '" + idSucursalUsuario + "'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable.RecordCount == 0)
                {
                    if (idSucursalUsuario < 0)
                    {
                        query = "select suc.* from [@SUC_DGI] as suc where suc.Code = '" + 1 + "'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select suc.* from \"@SUC_DGI\" as suc where suc.\"Code\" = \'" + 1 + "\'";
                    }

                    oRSMyTable.DoQuery(query);
                }

                if (oRSMyTable.RecordCount == 0)
                {
                    query = "select * from [@SUC_DGI]";
                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query = "select * from \"@SUC_DGI\"";

                    oRSMyTable.DoQuery(query);
                }

                return oRSMyTable;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura.ToString(), "ERROR al Buscar Datos Sucursal", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return oRSMyTable;
            }
        }

        // Obtengo el vendedor del documento
        public string obtenerVendedor(int pCodigoVendedor)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string res = "";

                if (pCodigoVendedor.ToString().Equals("-1")) // Si es -1 entonces no tiene un vendedor
                    return res;

                String query = "select * from OSLP where SlpCode = '" + pCodigoVendedor + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from OSLP where \"SlpCode\" = \'" + pCodigoVendedor + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("SlpName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo la Persona de Contacto del documento
        public string obtenerPersonaContacto(int pCntctCode)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string res = "";

                String query = "select FirstName, LastName from OCPR where CntctCode = '" + pCntctCode + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"FirstName\",\"LastName\" from OCPR where \"CntctCode\" = \'" + pCntctCode + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("FirstName").Value + " " + oRSMyTable.Fields.Item("LastName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                guardaLogProceso("", idUsuarioLogueado.ToString(), "ERROR al Buscar Persona de Contacto", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo el vendedor del documento
        public string obtenerCorreoVendedor(int pCodigoVendedor)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string res = "";

                if (pCodigoVendedor.ToString().Equals("-1")) // Si es -1 entonces no tiene un vendedor
                    return res;

                String query = "select Email from OSLP where SlpCode = '" + pCodigoVendedor + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"Email\" from \"OSLP\" where \"SlpCode\" = \'" + pCodigoVendedor + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("Email").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo los datos de Cuenta Ajena
        public clsDatosCuentaAjena obtenerDatosCuentaAjena()
        {
            clsDatosCuentaAjena datosCtaAjena = new clsDatosCuentaAjena();
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select top 1 U_RUC_EMISOR, U_CODIGO_TIPO_DOC, U_CODIGO_PAIS, U_NUMERO_DOC, U_NOMBRE from [@ADDVENTACTAAJENA]";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select top 1 \"U_RUC_EMISOR\", \"U_CODIGO_TIPO_DOC\", \"U_CODIGO_PAIS\", \"U_NUMERO_DOC\", \"U_NOMBRE\" from \"@ADDVENTACTAAJENA\"";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        datosCtaAjena.DocMdte = oRSMyTable.Fields.Item("U_NUMERO_DOC").Value;
                        datosCtaAjena.NombreMdte = oRSMyTable.Fields.Item("U_NOMBRE").Value;
                        datosCtaAjena.Pais = oRSMyTable.Fields.Item("U_CODIGO_PAIS").Value;
                        datosCtaAjena.RucEmisor = oRSMyTable.Fields.Item("U_RUC_EMISOR").Value;
                        datosCtaAjena.TipoDocMdte = (int)oRSMyTable.Fields.Item("U_CODIGO_TIPO_DOC").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return datosCtaAjena;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return datosCtaAjena;
            }
        }

        // Obtengo el Lote de una línea de documento
        public string obtenerLote(String pItem, String pDocEnt, String pRowNum, String pObjType)
        {
            string res = "";
            SAPbobsCOM.Recordset oRSMyTable = null;
            string query = "";

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                //ASPL - 2019.10.31, Comentado por nuevo query solicitado.
                //ASPL - 2019.03.18 - Comentado no obtiene Lote, diferencia entre linenum vs baseLinNum.
                //string query = "select isnull(T5.\"BatchNum\", '') as LoteBatchNum from IBT1 as T5 " +
                //"where T5.\"BaseEntry\" = '" + pLinea.DocEntry + "' and T5.\"Itemcode\" = '" + pLinea.ItemCode + "' and T5.\"Basetype\" = '" + pLinea.ObjType + "'"; // and T5.\"BaseLinNum\" = '" + pLinea.LineNum + "'"; 

                //ASPL - 2019.10.31, Nuevo query para obtencion de numero de lotes, numero de series, numero de motor.
                //ASPL - 2020.02.07 Nuevo cambio de query, por campo "U_LOTE".

                if (descEmpresa.ToString().Equals("RURAL"))
                {
                    query = "SELECT CASE WHEN T1.\"ManBtchNum\" = 'Y' AND T2.\"U_Familia\" <> 'J' THEN T3.\"BatchNum\" " +
                    "WHEN T1.\"ManSerNum\" = 'Y' THEN T5.\"IntrSerial\" ELSE T0.\"U_LOTE\" END AS LoteBatchNum " +
                    "FROM \"INV1\" T0 JOIN \"OITM\" T1 ON T1.\"ItemCode\" = T0.\"ItemCode\" " +
                    "LEFT JOIN \"OITB\" T2 ON T1.\"ItmsGrpCod\" = T2.\"ItmsGrpCod\" " +
                    "LEFT JOIN \"IBT1\" T3 ON T1.\"ItemCode\" = T3.\"ItemCode\" AND T3.\"BaseEntry\" = T0.\"DocEntry\" AND T3.\"BaseLinNum\"=T0.\"LineNum\" " +
                    "LEFT JOIN  \"SRI1\" T4 ON T1.\"ItemCode\" = T4.\"ItemCode\" AND T4.\"BaseEntry\" = T0.\"DocEntry\" AND T4.\"BaseLinNum\"=T0.\"LineNum\" " +
                    "LEFT JOIN \"OSRI\" T5 ON T1.\"ItemCode\" = T5.\"ItemCode\" and T5.\"SysSerial\" = T4.\"SysSerial\" " +
                    //"WHERE T0.\"DocEntry\"=" + pLinea.DocEntry + " AND T0.\"LineNum\" = '" + pLinea.LineNum + "' AND T1.\"ItemCode\" = '" + pLinea.ItemCode + "' " +
                    "UNION ALL " +
                    "SELECT CASE WHEN T1.\"ManBtchNum\" = 'Y' AND T2.\"U_Familia\" <> 'J' THEN T3.\"BatchNum\" " +
                    "WHEN T1.\"ManSerNum\" = 'Y' THEN T5.\"IntrSerial\" ELSE T0.\"U_LOTE\" END AS LoteBatchNum " +
                    "FROM \"RIN1\" T0 JOIN \"OITM\" T1 ON T1.\"ItemCode\" = T0.\"ItemCode\" " +
                    "LEFT JOIN \"OITB\" T2 ON T1.\"ItmsGrpCod\" = T2.\"ItmsGrpCod\" " +
                    "LEFT JOIN \"IBT1\" T3 ON T1.\"ItemCode\" = T3.\"ItemCode\" AND T3.\"BaseEntry\" = T0.\"DocEntry\" AND T3.\"BaseLinNum\"=T0.\"LineNum\" " +
                    "LEFT JOIN  \"SRI1\" T4 ON T1.\"ItemCode\" = T4.\"ItemCode\" AND T4.\"BaseEntry\" = T0.\"DocEntry\" AND T4.\"BaseLinNum\"=T0.\"LineNum\" " +
                    "LEFT JOIN \"OSRI\" T5 ON T1.\"ItemCode\" = T5.\"ItemCode\" and T5.\"SysSerial\" = T4.\"SysSerial\" " +
                    //"WHERE T0.\"DocEntry\"=" + pLinea.DocEntry + " AND T0.\"LineNum\" = '" + pLinea.LineNum + "' AND T1.\"ItemCode\" = '" + pLinea.ItemCode + "' ";
                    "";
                }
                else if (descEmpresa.ToString().Equals("CABIN"))
                {
                    /* query = "SELECT T2.DistNumber, T2.ExpDate FROM IBT1 T1 " +
                             "INNER JOIN OBTN T2 ON T2.DistNumber = T1.BatchNum " +
                             "WHERE T1.BaseEntry = '" + pDocEnt + "' and T1.ItemCode = '" + pItem + "' and T1.BaseType = '" + pObjType + "' and T1.BaseLinNum = '" + pRowNum + "' ";*/
                    query = "IF NOT EXISTS " +
                            "(SELECT T2.DistNumber, T2.ExpDate FROM IBT1 T1 INNER JOIN OBTN T2 ON T2.DistNumber = T1.BatchNum " +
                            "WHERE T1.BaseEntry = '" + pDocEnt + "' and T1.ItemCode = '" + pItem + "' and T1.BaseType = '" + pObjType + "' and T1.BaseLinNum = '" + pRowNum + "') " +
                            "BEGIN " +
                            "SELECT TOP 1 T2.DistNumber, T2.ExpDate FROM INV1 T3, IBT1 T1 INNER JOIN OBTN T2 ON T2.DistNumber = T1.BatchNum " +
                            "WHERE T3.DocEntry = '" + pDocEnt + "' and T1.BaseEntry = T3.BaseEntry and T1.ItemCode = '" + pItem + "' and T1.BaseType = 15 and T1.BaseLinNum = '" + pRowNum + "' " +  //Si no hay en factura de deudores que se fije en entrada de mercaderia, cambio lotes biodiagnostico Nicolás Pecoy 26/8/2021
                            "END " +
                            "ELSE " +
                            "SELECT T2.DistNumber, T2.ExpDate FROM IBT1 T1 INNER JOIN OBTN T2 ON T2.DistNumber = T1.BatchNum " +
                            "WHERE T1.BaseEntry = '" + pDocEnt + "' and T1.ItemCode = '" + pItem + "' and T1.BaseType = '" + pObjType + "' and T1.BaseLinNum = '" + pRowNum + "' ";
                }

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        if (descEmpresa.ToString().Equals("RURAL"))
                        {
                            if (!String.IsNullOrEmpty(res.ToString()))
                                res += "-";
                            res += oRSMyTable.Fields.Item("LOTEBATCHNUM").Value;
                        }
                        else if (descEmpresa.ToString().Equals("CABIN"))
                        {
                            DateTime fechaVenc = oRSMyTable.Fields.Item("ExpDate").Value;
                            res = oRSMyTable.Fields.Item("DistNumber").Value + " - " + fechaVenc.ToString(formatoFecha);
                        }

                        oRSMyTable.MoveNext();
                    }
                }

                return res;
            }
            catch (Exception ex)
            {
                return "";
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        // Obtengo la clase de envio del documento
        public string obtenerFormaEnvio(int pCodigoEnvio)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string res = "";

                if (pCodigoEnvio.ToString().Equals("-1")) // Si es -1 entonces no tiene una Forma de envio
                    return res;

                String query = "select * from OSHP where TrnspCode = '" + pCodigoEnvio + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from OSHP where \"TrnspCode\" = \'" + pCodigoEnvio + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("TrnspName").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo el Puerto seleccionado
        public string obtenerPuerto(string pCodigoPuerto)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = "";
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                string query = "select Name from [@ADDPUERTOS] where Code = '" + pCodigoPuerto + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"Name\" from \"@ADDPUERTOS\" where \"Code\" = \'" + pCodigoPuerto + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("Name").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo el Id de Usuario y el Id de Sucursal pasandole el id de Usuario
        public string obtenerUsuarioCreadorDocumento(int pIdUsuario)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string res = "";

                String query = "select U_NAME from OUSR where USERID = '" + pIdUsuario + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"U_NAME\" from OUSR where \"USERID\" = \'" + pIdUsuario + "\'";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("U_NAME").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                //if (idSucursalUsuario < 0) // Si la sucursal es menor a 0 entonces se usa la 1 por defecto
                //    idSucursalUsuario = 1;

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", idUsuarioLogueado.ToString(), "ERROR al Buscar Usuario que creo el documento", ex.Message.ToString()); // Guarda log del Proceso
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        public string obtenerVencimientos(string pCodigoDE)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            string res = string.Empty;

            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT T0.DueDate FROM INV6 T0 WHERE T0.DocEntry = '" + pCodigoDE + "' ORDER BY T0.DueDate";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    //query = "SELECT T0.\"DueDate\" FROM \"INV6\" T0 WHERE T0.\"DocEntry\" = \'" + pCodigoDE + "\' ORDER BY T0.\"DueDate\" ";
                    query = "SELECT T0.\"DocEntry\",T1.\"InstNum\", T2.\"DueDate\" FROM \"OINV\" T0 INNER JOIN \"OCTG\" T1 ON T0.\"GroupNum\" = T1.\"GroupNum\" " +
                            "INNER JOIN \"INV6\" T2 ON T0.\"DocEntry\" = T2.\"DocEntry\" WHERE T1.\"InstNum\" > 0 AND T0.\"DocEntry\" = '" + pCodigoDE + "' ORDER BY T2.\"DueDate\"";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        if (!String.IsNullOrEmpty(res.ToString()))
                            res += "-";
                        res += oRSMyTable.Fields.Item("DueDate").Value.ToString("dd/MM/yy");
                        oRSMyTable.MoveNext();
                    }
                }

                return res;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        // Obtengo la forma de pago del documento
        public string obtenerFormaPago(int pCodigoFormaPago, string pDocEntry = null)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string res = "Contado";

                if (pCodigoFormaPago.ToString().Equals("-1")) // Si es -1 entonces es contado
                    return res;

                String query = "select * from OCTG where GroupNum = '" + pCodigoFormaPago + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from \"OCTG\" where \"GroupNum\" = \'" + pCodigoFormaPago + "\'";

                //ASPL - 2020-04.27, Nuevo requerimiento, obtener condicion de pago sin condiciones.
                ////ASPL - 2019.10.30, Nuevo query por nuevo layput Scife para almacen rural.
                //if (descEmpresa.ToString().Equals("RURAL"))
                //{
                //    query = "SELECT CASE WHEN T0.\"GroupNum\" = 68 THEN T0.\"PymntGroup\" WHEN T0.\"InstNum\" > 0 THEN T0.\"PymntGroup\" ELSE TO_VARCHAR(T1.\"DocDueDate\",'DD/MM/YYYY') END AS PymntGroup " +
                //    "FROM \"OCTG\" T0 LEFT JOIN \"OINV\" T1 ON T0.\"GroupNum\" = T1.\"GroupNum\" " +
                //    "WHERE T0.\"GroupNum\" = '" + pCodigoFormaPago + "' ";

                //    if (!string.IsNullOrEmpty(pDocEntry))
                //        query += "AND T1.\"DocEntry\" = '" + pDocEntry + "'";
                //}

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("PymntGroup").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return "";
            }
        }

        // Obtengo Remarks desde Param Impresión
        public string obtenerRemarks(int pObjType)
        {
            string res = "";
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                string query = "SELECT Remark FROM ADP1 where ObjType = '" + pObjType + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"Remark\" from ADP1 where \"ObjType\" = \'" + pObjType + "\'";

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = oRSMyTable.Fields.Item("Remark").Value;
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        // Obtengo el nombre de los almacénes
        public string obtenerNombreAlmacen(string pCodigoAlmacen)
        {
            string res = "";
            try
            {
                if (!String.IsNullOrEmpty(pCodigoAlmacen))
                {
                    SAPbobsCOM.Recordset oRSMyTable = null;
                    oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                    String query = "select concat (WhsCode, '- ', WhsName) as Almacen from OWHS where WhsCode = '" + pCodigoAlmacen + "'";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query = "select concat (\"WhsCode\",\"WhsName\") as Almacen from OWHS where \"WhsCode\" = \'" + pCodigoAlmacen + "\'";

                    oRSMyTable.DoQuery(query);
                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            res = oRSMyTable.Fields.Item("Almacen").Value;
                            oRSMyTable.MoveNext();
                        }
                    }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                    oRSMyTable = null;
                }

                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        public string ObtenerCodigoBarra(string pItemCode)
        {
            string res = "";

            try
            {
                if (!String.IsNullOrEmpty(pItemCode))
                {
                    SAPbobsCOM.Recordset oRSMyTable = null;
                    oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                    String query = "SELECT \"U_CODIGORONDANET\" FROM \"OITM\" WHERE \"ItemCode\" = '" + pItemCode + "'";

                    oRSMyTable.DoQuery(query);
                    if (oRSMyTable != null)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            res = oRSMyTable.Fields.Item("U_CODIGORONDANET").Value;
                            oRSMyTable.MoveNext();
                        }
                    }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                    oRSMyTable = null;
                }

                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        ////// Convertir a Decimal 
        ////public decimal getDecimal(string pNumero)
        ////{
        ////    decimal res = 0;
        ////    try
        ////    {
        ////        res = decimal.Parse(pNumero, System.Globalization.CultureInfo.InvariantCulture);

        ////        return res;
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        return res;
        ////    }
        ////}

        // Convertir a Decimal 
        public decimal getDecimal(string pNumero)
        {
            decimal res = 0;
            try
            {
                string separadorDec = obtenerSeparadorDecimal();
                string separadorMil = obtenerSeparadorMiles();

                string cotizacionStr = String.Format("{0:0" + separadorMil + "0" + separadorDec + "######}", pNumero);

                res = decimal.Parse(cotizacionStr);

                decimal auxiliar = res;
                ////res = decimal.Parse(pNumero, System.Globalization.CultureInfo.InvariantCulture);

                //if (separadorDec.ToString().Equals(","))
                //    cotizacionStr = cotizacionStr.ToString().Replace(".", ",");

                try
                {
                    //res = Convert.ToDecimal(cotizacionStr);

                    if (!res.ToString().Contains(".") && !res.ToString().Contains(",") && !res.ToString().Equals("1") && res.ToString().Length > 2)
                    {
                        string depDecRegional = System.Globalization.CultureInfo.InvariantCulture.NumberFormat.CurrencyDecimalSeparator;

                        //cotizacionStr = cotizacionStr.ToString().Replace(separadorDec, depDecRegional);

                        int largoCadena = cotizacionStr.Length - 2;
                        auxiliar = Convert.ToDecimal(cotizacionStr.ToString().Substring(0, 2) + depDecRegional + cotizacionStr.ToString().Substring(3, largoCadena));

                        guardaLogProceso("10000", "10000", "NUEVO CALCULO TIPO CAMBIO", auxiliar.ToString() + " - " + cotizacionStr); // Guarda log del Proceso
                    }
                }
                catch (Exception exxx)
                { }

                res = auxiliar;

                return res;
            }
            catch (Exception ex)
            {
                return res;
            }
        }

        // Obtengo las cuotas dependiendo de la Forma de Pago
        public string obtenerDetalleCuotas(String pCodigoFactura, String pFormFactura, String pMoneda)
        {
            string res = "";
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = ObtenerCuotas(pCodigoFactura, pFormFactura, pMoneda);
                decimal importe = 0; decimal cantCuotas = 0;

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        cantCuotas = (decimal)oRSMyTable.Fields.Item("Cant").Value;

                        if (!pMoneda.Equals("UYU") && !pMoneda.Equals("$"))
                            importe = (decimal)oRSMyTable.Fields.Item("InsTotalFC").Value;
                        else
                            importe = (decimal)oRSMyTable.Fields.Item("InsTotal").Value;

                        if (cantCuotas != 0)
                        {
                            if (cantCuotas > 1)
                                res += cantCuotas + " cuotas de " + pMoneda + " " + importe + ". ";
                            else
                                res += cantCuotas + " cuota de " + pMoneda + " " + importe + ". ";

                        }
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
        }

        public IdCFE ObtenerIdCFEFactura(String pCodigoFactura, String pFormFactura)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                IdCFE id = new IdCFE();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc";
                        break;
                    case "60090":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc";
                        break;
                    case "60091":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType <> 'DN' order by DocEntry desc"; // Factura Reserva de Clientes and UpdInvnt = 'C'
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\' order by \"DocEntry\" desc";
                        break;
                    case "65304":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IB' order by DocEntry desc"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\' order by \"DocEntry\" desc";
                        break;
                    case "65307":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'IX' order by DocEntry desc"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\' order by \"DocEntry\" desc";
                        break;
                    case "65303":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\' order by \"DocEntry\" desc";
                        break;
                    case "179":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from ORIN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "426":
                        query = "select top 1 CounterRef," + campoReferencia + " as Ref2 from OVPM where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CounterRef\",\"" + campoReferencia + "\" as Ref2 from OVPM where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "140":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from ODLN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "143":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OPDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OPDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "940":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OWTR where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "182":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from ORPD where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from ORPD where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "180":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from ORDN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "720":
                        query = "select top 1 FolioPref,FolioNum," + campoReferencia + " as Ref2 from OIGE where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Salida Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"FolioPref\",\"FolioNum\",\"" + campoReferencia + "\" as Ref2 from OIGE where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    case "170":
                        query = "select top 1 CounterRef," + campoReferencia + " as Ref2 from ORCT where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "select top 1 \"CounterRef\",\"" + campoReferencia + "\" as Ref2 from \"ORCT\" where \"DocNum\" = \'" + pCodigoFactura + "\' order by \"DocEntry\" desc";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        if (!pFormFactura.ToString().Equals("426") && !pFormFactura.ToString().Equals("170"))
                        {
                            String serie = oRSMyTable.Fields.Item("FolioPref").Value;
                            int nro = oRSMyTable.Fields.Item("FolioNum").Value;
                            try
                            {
                                int tipoCFE = Convert.ToInt32(oRSMyTable.Fields.Item("Ref2").Value);
                                id.Tipo = tipoCFE;
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Obtener IdCFE ", ex.Message.ToString()); // Guarda log del Proceso
                            }

                            id.Numero = nro;
                            id.observado = 1;
                            id.rucemisor = rucEmisorSicfe.ToString(); // "110050930013";
                            id.Serie = serie;
                        }
                        else
                        {
                            String serie = oRSMyTable.Fields.Item("CounterRef").Value;
                            int nro = Convert.ToInt32(serie.Substring(1, serie.ToString().Length - 1));
                            serie = serie.Substring(0, 1);
                            try
                            {
                                int tipoCFE = Convert.ToInt32(oRSMyTable.Fields.Item("Ref2").Value);
                                id.Tipo = tipoCFE;
                            }
                            catch (Exception ex)
                            {
                                guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Obtener IdCFE ", ex.Message.ToString()); // Guarda log del Proceso
                            }

                            id.Numero = nro;
                            id.observado = 1;
                            id.rucemisor = rucEmisorSicfe.ToString(); // "110050930013";
                            id.Serie = serie;
                        }

                        // Codigo para version nueva, 1.33 y WSDL nuevo
                        ////id.NumeroSpecified = true;
                        ////id.observadoSpecified = true;
                        ////id.TipoSpecified = true;
                    }
                    catch (Exception ex)
                    {
                        guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Obtener IdCFE ", ex.Message.ToString()); // Guarda log del Proceso
                    }
                    oRSMyTable.MoveNext();
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return id;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Obtener IdCFE ", ex.Message.ToString()); // Guarda log del Proceso

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }

        }

        public IdCFE ObtenerIdCFEFacturaAnticipo(String codigo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                IdCFE id = new IdCFE();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select * from ODPI where DocNum = '" + codigo + "'";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select * from ODPI where \"DocNum\" = \'" + codigo + "\'";

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        String serie = oRSMyTable.Fields.Item("FolioPref").Value;
                        int nro = oRSMyTable.Fields.Item("FolioNum").Value;
                        try
                        {
                            int tipo = Int32.Parse(oRSMyTable.Fields.Item(campoReferencia).Value);
                            id.Tipo = tipo;
                        }
                        catch { }

                        id.Numero = nro;
                        id.observado = 1;
                        id.rucemisor = rucEmisorSicfe.ToString(); // "110050930013";
                        id.Serie = serie;

                    }
                    catch { }
                    oRSMyTable.MoveNext();
                }
                return id;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return null;
            }
        }

        ////public IdCFE ObtenerIdCFENotaCredito(String pCodigoFactura)
        ////{
        ////    SAPbobsCOM.Recordset oRSMyTable = null;
        ////    try
        ////    {
        ////        IdCFE id = new IdCFE();
        ////        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
        ////        String query = "select * from ORIN where DocNum = '" + pCodigoFactura + "'";
        ////        oRSMyTable.DoQuery(query);
        ////        while (!oRSMyTable.EoF)
        ////        {
        ////            try
        ////            {
        ////                String serie = oRSMyTable.Fields.Item("FolioPref").Value;
        ////                int nro = oRSMyTable.Fields.Item("FolioNum").Value;
        ////                try
        ////                {
        ////                    int tipoCFE = Convert.ToInt32(oRSMyTable.Fields.Item("Ref2").Value);
        ////                    id.Tipo = tipoCFE;
        ////                }
        ////                catch (Exception ex)
        ////                {
        ////                    if (guardaLog == true)
        ////                        guardaLogProceso("179", pCodigoFactura, "ERROR al Obtener IdCFE ", ex.Message.ToString()); // Guarda log del Proceso
        ////                }

        ////                id.Numero = nro;
        ////                id.observado = 1;
        ////                id.rucemisor = rucEmisorSicfe.ToString(); // "110050930013";
        ////                id.Serie = serie;
        ////            }
        ////            catch (Exception ex)
        ////            {
        ////                if (guardaLog == true)
        ////                    guardaLogProceso("179", pCodigoFactura, "ERROR al Obtener IdCFE ", ex.Message.ToString()); // Guarda log del Proceso
        ////            }
        ////            oRSMyTable.MoveNext();
        ////        }
        ////        return id;
        ////        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        ////        oRSMyTable = null;

        ////    }
        ////    catch
        ////    {
        ////        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        ////        oRSMyTable = null;
        ////        return null;
        ////    }
        ////}

        public bool EsContado(int formaPago)
        {
            //SAPbobsCOM.Recordset oRSMyTable = null;
            String query = "";

            try
            {
                if (descEmpresa.ToString().Equals("POCHA"))
                    return false;
                else if (formaPago == -1) // Si es -1 entonces es contado, de lo contrario es Credito u otro
                    return true;
                else
                {
                    if (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("CIMSA") || descEmpresa.ToString().Equals("RURAL"))
                    {
                        bool contado = false;
                        SAPbobsCOM.Recordset oRSMyTable = null;
                        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                        query = "select * from OCTG where GroupNum = '" + formaPago + "' and (PymntGroup like 'CONTADO%' or PymntGroup like 'Contado%' or PymntGroup like 'D - Contado%')";

                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "SELECT * from \"OCTG\" where \"GroupNum\" = '" + formaPago + "' and (\"PymntGroup\" like 'CONTADO%' or \"PymntGroup\" like 'Contado%' or \"PymntGroup\" like 'D - Contado%')";

                        oRSMyTable.DoQuery(query);
                        if (oRSMyTable != null)
                            if (oRSMyTable.RecordCount != 0)
                                contado = true;

                        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                        oRSMyTable = null;
                        return contado;
                    }
                    else
                        return false;
                }
                //bool contado = false;
                //oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                //String query = "select * from OCTG where GroupNum = '" + formaPago + "'";
                //oRSMyTable.DoQuery(query);
                //if (oRSMyTable != null)
                //{
                //    while (!oRSMyTable.EoF)
                //    {

                //        int diasExtras = oRSMyTable.Fields.Item("ExtraDays").Value;
                //        int mesesExtras = oRSMyTable.Fields.Item("ExtraMonth").Value;
                //        if (diasExtras == 0 && mesesExtras == 0)
                //        {
                //            contado = true;
                //        }
                //        oRSMyTable.MoveNext();
                //    }
                //}

                //System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                //oRSMyTable = null;
                //return contado;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR al Verificar si el documento es Contado", ex.Message.ToString()); // Guarda log del Proceso
                return true;
            }
        }

        #region "Funciones_Fitco"
        public bool EsContadoFitco(string pPaymentTerms)
        {
            bool contado = true;
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT isnull(U_CredCont, 0) as CC FROM [@SIR_PAYT] where Code = '" + pPaymentTerms + "'";

                oRSMyTable.DoQuery(query);

                while (!oRSMyTable.EoF)
                {
                    int cc = (int)oRSMyTable.Fields.Item("CC").Value;
                    if (cc == 1)
                        contado = false;
                    oRSMyTable.MoveNext();
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return contado;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR al Verificar si el documento es Contado Fitco", ex.Message.ToString()); // Guarda log del Proceso
                return true;
            }
        }

        public string obtenerLineaTextoFitco(string pDocEntry, string pRowNumber, string pObjType)
        {
            string linea = "";
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = null;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "SELECT LineText from INV10 where DocEntry = '" + pDocEntry + "' and ObjType = '" + pObjType + "' and AftLineNum = '" + pRowNumber + "'";

                if (descEmpresa.Equals("HANNA"))
                    query = "SELECT \"LineText\" from \"INV10\" where \"DocEntry\" = \'" + pDocEntry + "\' and \"ObjType\" = \'" + pObjType + "\' and \"AftLineNum\" = \'" + pRowNumber + "\'";

                oRSMyTable.DoQuery(query);

                while (!oRSMyTable.EoF)
                {
                    linea = oRSMyTable.Fields.Item("LineText").Value;
                    oRSMyTable.MoveNext();
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return linea;
            }
            catch (Exception ex)
            {
                guardaLogProceso(codigoFactura.ToString(), codigoFactura, "ERROR al Verificar si existe Linea INV10", ex.Message.ToString()); // Guarda log del Proceso
                return linea;
            }
        }

        public SAPbobsCOM.Recordset obtenerDatosAdendaFitco(string pDocEntry, string pObjType)  // Obtengo la referencia del Resguardo que va a cancelar
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string pTabla = "OINV";
                if (pObjType.Equals("14"))
                    pTabla = "ORIN";

                String query = "SELECT U_SI_Vessel as VesselReference, sv.Name as Vessel, lp.Name as LoadingPort, dp.Name as DischargePort,dt.Name as DeliveryTerms, ori.Name as Origen,  pr.Name as Procedencia, pt.Name as PaymentTerms FROM " + pTabla + " as o " +
                "left join [@SIR_VESS] as sv on sv.Code = o.U_SI_VesNam " +
                "left join [@SIR_LPOR] as lp on lp.Code = o.U_SI_LoaPor " +
                "left join [@SIR_DPOR] as dp on dp.Code = o.U_SI_DisPor " +
                "left join [@SIR_DELT] as dt on dt.Code = o.U_SI_DelivT " +
                "left join [@SIR_COUN] as ori on ori.Code = o.U_SI_CtyOri " +
                "left join [@SIR_COUN] as pr on pr.Code = o.U_SI_CtyPro " +
                "left join [@SIR_PAYT] as pt on pt.Code = o.U_SI_PayTer " +
                "where o.DocEntry = '" + pDocEntry + "'";

                oRSMyTable.DoQuery(query);
                return oRSMyTable;

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pDocEntry.ToString(), pDocEntry, "ERROR al Obtener datos adenda Fitco", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return oRSMyTable;
            }
        }
        #endregion

        public void GuardarSerieYNumeroFactura(String pFormFactura, String pSerie, int pNro, int pTipo)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oInvoices);

                if (!String.IsNullOrEmpty(pTipo.ToString()))
                {
                    if (!codigoFactura.ToString().Equals("") && !String.IsNullOrEmpty(pSerie.ToString()) && pNro != 0)
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento

                        if (!pFormFactura.Equals("170"))
                        {
                            if (oDoc.GetByKey(docEntry))
                            {
                                oDoc.FolioNumber = pNro;
                                oDoc.FolioPrefixString = pSerie;
                                oDoc.Printed = PrintStatusEnum.psYes;

                                if (campoReferencia.ToString().Equals("Ref2"))
                                    oDoc.Reference2 = pTipo.ToString();
                                else
                                    oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                                //oDoc.NumAtCard = codigoFactura;
                                int res = oDoc.Update();
                                if (res < 0)
                                    guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                            }
                        }
                        else
                            guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);

                        guardarControlFE(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry, 1, ""); // Guardo en la tabla ControlFE
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Guardar Numero de Folio", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void GuardarSerieYNumeroBoletaEntrada(String pFormFactura, String pSerie, int pNro, int pTipo)
        {
            try
            {
                if (pFormFactura.Equals("141")) // Factura de Compras de Proveedores
                {
                    SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oPurchaseInvoices);

                    if (!String.IsNullOrEmpty(pTipo.ToString()))
                    {
                        if (!codigoFactura.ToString().Equals("") && !String.IsNullOrEmpty(pSerie.ToString()) && pNro != 0)
                        {
                            int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                            //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                            if (oDoc.GetByKey(docEntry))
                            {
                                oDoc.FolioNumber = pNro;
                                oDoc.FolioPrefixString = pSerie;
                                oDoc.Printed = PrintStatusEnum.psYes;

                                if (campoReferencia.ToString().Equals("Ref2"))
                                    oDoc.Reference2 = pTipo.ToString();
                                else
                                    oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                                //oDoc.NumAtCard = codigoFactura;
                                int res = oDoc.Update();
                                if (res < 0)
                                    guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                            }

                            guardarControlFE(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry, 1, ""); // Guardo en la tabla ControlFE
                        }
                    }
                }
                else
                {   // Nota de Crédito de Proveedores
                    SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oPurchaseCreditNotes);

                    if (!String.IsNullOrEmpty(pTipo.ToString()))
                    {
                        if (!codigoFactura.ToString().Equals("") && !String.IsNullOrEmpty(pSerie.ToString()) && pNro != 0)
                        {
                            int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                            //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                            if (oDoc.GetByKey(docEntry))
                            {
                                oDoc.FolioNumber = pNro;
                                oDoc.FolioPrefixString = pSerie;
                                oDoc.Printed = PrintStatusEnum.psYes;

                                if (campoReferencia.ToString().Equals("Ref2"))
                                    oDoc.Reference2 = pTipo.ToString();
                                else
                                    oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                                //oDoc.NumAtCard = codigoFactura;
                                int res = oDoc.Update();
                                if (res < 0)
                                    guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                            }

                            guardarControlFE(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry, 1, ""); // Guardo en la tabla ControlFE
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Guardar Numero de Folio Boleta entrada", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void darBajaManualEnvDoc(int pTipo, int pCodigoFact, int pDocEntry, string pForm, string pCodResguardo)
        {
            try
            {
                if (pForm.ToString().Equals("133"))
                {
                    SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oInvoices);

                    if (!pCodigoFact.ToString().Equals(""))
                    {
                        //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                        if (oDoc.GetByKey(pDocEntry))
                        {
                            if (campoReferencia.ToString().Equals("Ref2"))
                                oDoc.Reference2 = pTipo.ToString();
                            else
                                oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                            //oDoc.NumAtCard = codigoFactura;
                            int res = oDoc.Update();
                            if (res < 0)
                                guardarRefBajaManual(codigoFactura, pForm, pTipo, pDocEntry);

                            guardarControlFE(codigoFactura, pForm, "", 0, 0, pDocEntry, 2, ""); // Guardo en la tabla ControlFE
                        }
                    }
                }
                else if (pForm.ToString().Equals("179"))
                {
                    SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oCreditNotes);

                    if (!pCodigoFact.ToString().Equals(""))
                    {
                        //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                        if (oDoc.GetByKey(pDocEntry))
                        {
                            if (campoReferencia.ToString().Equals("Ref2"))
                                oDoc.Reference2 = pTipo.ToString();
                            else
                                oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                            //oDoc.NumAtCard = codigoFactura;
                            int res = oDoc.Update();
                            if (res < 0)
                                guardarRefBajaManual(codigoFactura, pForm, pTipo, pDocEntry);

                            guardarControlFE(codigoFactura, pForm, "", 0, 0, pDocEntry, 2, ""); // Guardo en la tabla ControlFE
                        }
                    }
                }
                else
                    guardarControlFE(codigoFactura, pForm, "", 0, 0, pDocEntry, 2, pCodResguardo); // Guardo en la tabla ControlFE

                guardaLogProceso(codigoFactura, codigoFactura, "Baja Manual por " + usuarioLogueado.ToString(), ""); // Guarda log del Proceso
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pDocEntry.ToString(), pCodigoFact.ToString(), "ERROR al Dar Baja Manual", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public SAPbobsCOM.Recordset obtenerReferenciaResguardoProveedor(string pDocNum, string pDocEntry, string pCodResguardo)  // Obtengo la referencia del Resguardo que va a cancelar
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select top 1 cfe.Tipo as TIPO, CodResguardo as CODRESGUARDO,cfe.FolioNumero as FOLIONUMERO,cfe.FolioPrefijo as FOLIOPREF , rpc.BaseEntry,rpc.BaseRef, rpc.BaseType from ORPC as orp " +
                "inner join RPC1 as rpc on rpc.DocEntry = orp.DocEntry " +
                "inner join ControlFE as cfe on cfe.DocEntry = rpc.BaseEntry and cfe.ObjType = 18 " +
                "where orp.DocEntry = " + pDocEntry + " and cfe.CodResguardo = '" + pCodResguardo + "' ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select top 1 cfe.\"TIPO\", cfe.\"CODRESGUARDO\" ,cfe.\"FOLIONUMERO\",cfe.\"FOLIOPREF\" , rpc.\"BaseEntry\",rpc.\"BaseRef\", rpc.\"BaseType\" from ORPC as orp " +
                    "inner join \"RPC1\" as rpc on rpc.\"DocEntry\" = orp.\"DocEntry\" " +
                    "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = rpc.\"BaseEntry\" and cfe.\"OBJTYPE\" = \'18\' " +
                    "where orp.\"DocEntry\" = \'" + pDocEntry + "\' and cfe.CodResguardo = \'" + pCodResguardo + "\'";
                }

                oRSMyTable.DoQuery(query);
                return oRSMyTable;

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pDocNum.ToString(), pDocNum, "ERROR al Obtener documento referencia eResguardo", ex.Message.ToString());
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return oRSMyTable;
            }
        }

        public Boolean guardarControlFE(String pCodigoFactura, String pFormFactura, String pSerieFolio, int pNumeroFolio, int pTipo, int pDocEntry, int pEstado, string pCodigoResguardo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                // Se actualiza la tabla ControlFE
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string objType = "13"; // Factura
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "179":
                        objType = "14"; // Nota de Crédito
                        break;
                    case "141":
                        objType = "18"; // Factura de Proveedor
                        break;
                    case "181":
                        objType = "19"; // Nota de Credito de Proveedor
                        break;
                    case "140":
                        objType = "15"; // Entrega a cliente
                        break;
                    case "143":
                        objType = "20"; // Entrada de Mercancias
                        break;
                    case "180":
                        objType = "16"; // Devolución de Cliente
                        break;
                    case "182":
                        objType = "21"; // Devolución a Proveedor
                        break;
                    case "940":
                        objType = "67"; // Transferencia de Stock
                        break;
                    case "426":
                        objType = "46"; // Pago Efectuado
                        break;
                    case "720":
                        objType = "60"; // Salida Mercancias
                        break;
                    case "170":
                        objType = "24"; // Pagos Recibidos
                        break;
                    default:
                        objType = "13";
                        break;
                }

                string query = "Update ControlFE set Estado = '" + pEstado + "' ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "Update \"ControlFE\" set \"ESTADO\" = '" + pEstado + "' ";

                if (!String.IsNullOrEmpty(pTipo.ToString())) // Si manda un Tipo lo actualiza, de lo contrario no.
                {
                    if (pTipo > 0)
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += ", Tipo = '" + pTipo.ToString() + "' ";
                        else
                            query += ", \"TIPO\" = \'" + pTipo.ToString() + "\' ";
                    }
                }

                if (!String.IsNullOrEmpty(pSerieFolio.ToString()))
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += ", FolioNumero = '" + pNumeroFolio.ToString() + "', FolioPrefijo = '" + pSerieFolio + "' ";
                    else
                        query += ", \"FOLIONUMERO\" = \'" + pNumeroFolio.ToString() + "\', \"FOLIOPREF\" = \'" + pSerieFolio + "\' ";
                }

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += " where DocEntry = '" + pDocEntry.ToString() + "' and ObjType = '" + objType.ToString() + "'";
                else
                    query += " where \"DOCENTRY\" = \'" + pDocEntry.ToString() + "\' and \"OBJTYPE\" = \'" + objType.ToString() + "\'";

                if (!String.IsNullOrEmpty(pCodigoResguardo.ToString())) // Si manda un CodigoResguardo
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and CodResguardo like '" + pCodigoResguardo.ToString() + "%' ";
                    else
                        query += " and \"CODRESGUARDO\" like \'" + pCodigoResguardo.ToString() + "%\' ";
                }
                else
                {
                    if (pFormFactura.Equals("141") || pFormFactura.Equals("181")) // Si es eBoleta de Entrada se fija que esté vacío
                    {
                        /*if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " AND isnull(CodResguardo, '') = '' ";
                        else
                            query += " AND IFNULL (\"CODRESGUARDO\", NULL) = \'\' ";*/
                    }
                }

                oRSMyTable.DoQuery(query);

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                /*SAPbobsCOM.UserTables tablaUsuario = oCompany.GetBusinessObject(BoObjectTypes.);
                    
                    if (tablaUsuario.Item("ControlFE").GetByKey(docEntry.ToString()))
                    {
                        tablaUsuario.Item("ControlFE").UserFields.Fields.Item("Estado").Value = 1; // Enviado
                        tablaUsuario.Item("ControlFE").UserFields.Fields.Item("Tipo").Value = pTipo.ToString();
                        int resFE = tablaUsuario.Item("ControlFE").Update();
                        if (resFE < 0)
                        {
                            SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                            string query = "Update ControlFE set Estado = '1', Tipo = '" + pTipo.ToString() + "'";
                            oRSMyTable.DoQuery(query);

                            System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                            oRSMyTable = null;
                        }
                    }*/
                return true;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Guardar en ControlFE", ex.Message.ToString()); // Guarda log del Proceso
                return false;
            }
        }

        // Guarda en la BD la serie y numero obtenidos en SICFE
        public Boolean guardarNroSerieYNumero(String pCodigoFactura, String pFormFactura, String serie, int nro, int tipo, int pDocEntry)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = ""; String queryAsientos = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "UPDATE OINV set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Clientes
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OINV where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OINV set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\') ";
                        }
                        break;
                    case "60090":
                        query = "UPDATE OINV set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Clientes + Pago
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OINV where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OINV set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\') ";
                        }
                        break;
                    case "60091":
                        query = "UPDATE OINV set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Reserva de Clientes
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OINV where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OINV set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\') ";
                        }
                        break;
                    case "65304":
                        query = "UPDATE OINV set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IB'"; // Boleta
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OINV where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IB') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OINV set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IB\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IB\') ";
                        }
                        break;
                    case "65307":
                        query = "UPDATE OINV set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IX'"; // Factura Exportacion
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OINV where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IX') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OINV set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IX\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IX\') ";
                        }
                        break;
                    case "65303":
                        query = "UPDATE OINV set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'DN'"; // Nota Debito Clientes
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OINV where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'DN') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OINV set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'DN\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OINV where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'DN\') ";
                        }
                        break;
                    case "179":
                        query = "UPDATE ORIN set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Nota Debito Clientes
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from ORIN where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE ORIN set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from ORIN where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "140":
                        query = "UPDATE ODLN set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from ODLN where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE ODLN set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from ODLN where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "143":
                        query = "UPDATE OPDN set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OPDN where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OPDN set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OPDN where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "426":
                        string counterRef = serie.ToString() + " " + nro.ToString();
                        query = "UPDATE OVPM set CounterRef = '" + counterRef.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "'"; // Resguardos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OVPM set \"CounterRef\" = \'" + counterRef.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'"; // Resguardos
                        break;
                    case "940":
                        query = "UPDATE OWTR set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OWTR set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' "; // Transferencia de Stock
                        break;
                    case "182":
                        query = "UPDATE ORPD set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos Compras
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from ORPD where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE ORPD set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' "; // Remitos Compras
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from ORPD where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "180":
                        query = "UPDATE ORDN set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Devoluciones
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from ORDN where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE ORDN set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' "; // Remitos Compras
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from ORDN where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "720":
                        query = "UPDATE OIGE set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Salida Mercancias
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OIGE where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OIGE set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' "; // Salida Mercancias
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OIGE where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "141":
                        query = "UPDATE OPCH set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Factura de Proveedor
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from OPCH where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE OPCH set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' "; // Salida Mercancias
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from OPCH where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "181":
                        query = "UPDATE ORPC set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "',Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Factura de Proveedor
                        queryAsientos = "UPDATE OJDT set FolioPref = '" + serie.ToString() + "', FolioNum = '" + nro.ToString() + "' where TransId = (select TransId from ORPC where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "') ";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "UPDATE ORPC set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' "; // Salida Mercancias
                            queryAsientos = "UPDATE OJDT set \"FolioPref\" = \'" + serie.ToString() + "\', \"FolioNum\" = \'" + nro.ToString() + "\' where \"TransId\" = (select \"TransId\" from ORPC where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\') ";
                        }
                        break;
                    case "170":
                        string countRef = serie.ToString() + " " + nro.ToString();
                        query = "UPDATE ORCT set CounterRef = '" + countRef.ToString() + "', " + campoReferencia + " = '" + tipo.ToString() + "', Printed = 'Y' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "'"; // Pagos recibidos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"ORCT\" set \"CounterRef\" = \'" + countRef.ToString() + "\', \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\',\"Printed\" = \'Y\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'"; // Pagos Recibidos
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

                if (!pFormFactura.ToString().Equals("426") && !pFormFactura.ToString().Equals("940") && !pFormFactura.Equals("170"))
                    oRSMyTable.DoQuery(queryAsientos);

                //if (guardaLog == true)
                //    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "Guarda Numero de Folio Manualmente", ""); // Guarda log del Proceso
                guardarControlFE(pCodigoFactura, pFormFactura, serie, nro, tipo, pDocEntry, 1, "");
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return true;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Guardar Numero de Folio", ex.Message.ToString()); // Guarda log del Proceso
                //SBO_Application.MessageBox("ERROR-> Al guardar serie y Número"+ ex.Message);
                return false;
            }
        }

        // Cambiar estado documento manualmente
        public Boolean CambiarEstadoDocumentoManualmente(String pCodigoFactura, String pFormFactura, int pDocEntry, String pEstado)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "UPDATE OINV set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> 'DN'";
                        break;
                    case "60090":
                        query = "UPDATE OINV set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> 'DN'";
                        break;
                    case "60091":
                        query = "UPDATE OINV set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> 'DN'";
                        break;
                    case "65304":
                        query = "UPDATE OINV set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IB'"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IB\'";
                        break;
                    case "65307":
                        query = "UPDATE OINV set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IX'"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IX\'";
                        break;
                    case "65303":
                        query = "UPDATE OINV set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'DN\'";
                        break;
                    case "179":
                        query = "UPDATE ORIN set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ORIN set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "140":
                        query = "UPDATE ODLN set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ODLN set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "143":
                        query = "UPDATE OPDN set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OPDN set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "940":
                        query = "UPDATE OWTR set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OWTR set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "180":
                        query = "UPDATE ORDN set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ORDN set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "720":
                        query = "UPDATE OIGE set Printed = '" + pEstado + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Salida Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OIGE set \"Printed\" = \'" + pEstado + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "Cambia estado documento Manualmente", ""); // Guarda log del Proceso

                return true;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Cambia estado documento", ex.Message.ToString()); // Guarda log del Proceso
                //SBO_Application.MessageBox("ERROR-> Al guardar serie y Número"+ ex.Message);
                return false;
            }
        }

        // Guarda en la BD la serie y numero obtenidos en SICFE
        public Boolean guardarRefBajaManual(String pCodigoFactura, String pFormFactura, int tipo, int pDocEntry)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "UPDATE OINV set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OINV\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\'";
                        break;
                    case "60090":
                        query = "UPDATE OINV set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OINV\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\'";
                        break;
                    case "60091":
                        query = "UPDATE OINV set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType <> 'DN'"; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OINV\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" <> \'DN\'";
                        break;
                    case "65304":
                        query = "UPDATE OINV set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IB'"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OINV\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IB\'";
                        break;
                    case "65307":
                        query = "UPDATE OINV set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'IX'"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OINV\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'IX\'";
                        break;
                    case "65303":
                        query = "UPDATE OINV set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OINV\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\' and \"DocSubType\" = \'DN\'";
                        break;
                    case "179":
                        query = "UPDATE ORIN set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"ORIN\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "140":
                        query = "UPDATE ODLN set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"ODLN\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "143":
                        query = "UPDATE OPDN set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OPDN\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "940":
                        query = "UPDATE OWTR set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OWTR\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "180":
                        query = "UPDATE ORDN set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Devoluciones
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"ORDN\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    case "720":
                        query = "UPDATE OIGE set " + campoReferencia + " = '" + tipo.ToString() + "' where DocNum = '" + pCodigoFactura + "' and DocEntry = '" + pDocEntry + "' "; // Salida Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE \"OIGE\" set \"" + campoReferencia + "\" = \'" + tipo.ToString() + "\' where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocEntry\" = \'" + pDocEntry + "\'";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return true;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Dar de Baja Manual", ex.Message.ToString()); // Guarda log del Proceso
                //SBO_Application.MessageBox("ERROR-> Al guardar serie y Número"+ ex.Message);
                return false;
            }
        }

        // Guarda en la BD la serie y numero obtenidos en SICFE
        public Boolean cambiaEstadoDocumentoPorErrorANulo(String pCodigoFactura, String pFormFactura, String pDocEntry, String tipo)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "";

                if (pFormFactura.ToString().Equals("99999"))
                    pFormFactura = "426";

                // Hago un case para verificar que tipo de documento estoy recibiendo y así ir a la tabla que corresponde
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        query = "UPDATE OINV set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ and DocSubType <> 'DN'"; // Factura Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\'";
                        break;
                    case "60090":
                        query = "UPDATE OINV set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ and DocSubType <> 'DN'"; // Factura Clientes + Pago
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\'";
                        break;
                    case "60091":
                        query = "UPDATE OINV set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ and DocSubType <> 'DN'"; // Factura Reserva de Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" <> \'DN\'";
                        break;
                    case "65304":
                        query = "UPDATE OINV set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ and DocSubType = 'IB'"; // Boleta
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IB\'";
                        break;
                    case "65307":
                        query = "UPDATE OINV set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ and DocSubType = 'IX'"; // Factura Exportacion
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'IX\'";
                        break;
                    case "65303":
                        query = "UPDATE OINV set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ and DocSubType = 'DN'"; // Nota Debito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OINV set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\' and \"DocSubType\" = \'DN\'";
                        break;
                    case "179":
                        query = "UPDATE ORIN set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Nota Credito Clientes
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ORIN set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "140":
                        query = "UPDATE ODLN set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ODLN set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "143":
                        query = "UPDATE OPDN set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Remitos
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OPDN set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "940":
                        query = "UPDATE OWTR set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Transferencia de Stock
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OWTR set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "182":
                        query = "UPDATE ORDN set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Devolucion Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ORDN set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "180":
                        query = "UPDATE ORDN set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Devolucion Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE ORDN set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "426":
                        query = "UPDATE OVPM set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Devolucion Proveedor
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OVPM set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    case "720":
                        query = "UPDATE OIGE set " + campoReferencia + " = null where DocNum = '" + pCodigoFactura + "' /*and DocEntry = '" + pDocEntry + "'*/ "; // Salida Mercancias
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "UPDATE OIGE set \"" + campoReferencia + "\" = null where \"DocNum\" = \'" + pCodigoFactura + "\'";
                        break;
                    default:
                        query = "";
                        break;
                }

                oRSMyTable.DoQuery(query);

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return true;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), pCodigoFactura, "ERROR al Dar de Baja Manuala", ex.Message.ToString()); // Guarda log del Proceso
                //SBO_Application.MessageBox("ERROR-> Al guardar serie y Número"+ ex.Message);
                return false;
            }
        }

        public void GuardarSerieYNumeroNotaCredito(String pFormFactura, String pSerie, int pNro, int pTipo)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oCreditNotes);

                if (!String.IsNullOrEmpty(pTipo.ToString()))
                {
                    if (!codigoFactura.ToString().Equals("") && !String.IsNullOrEmpty(pSerie.ToString()) && pNro != 0)
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                        if (oDoc.GetByKey(docEntry))
                        {
                            oDoc.FolioNumber = pNro;
                            oDoc.FolioPrefixString = pSerie;
                            oDoc.Printed = PrintStatusEnum.psYes;

                            if (campoReferencia.ToString().Equals("Ref2"))
                                oDoc.Reference2 = pTipo.ToString();
                            else
                                oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                            //oDoc.NumAtCard = codigoFactura;
                            int res = oDoc.Update();
                            if (res < 0)
                                guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                        }

                        guardarControlFE(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry, 1, ""); // Guardo en la tabla ControlFE
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Guardar Numero de Folio", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void GuardarSerieYNumeroRemito(String pFormFactura, String pSerie, int pNro, int pTipo)
        {
            try
            {
                ////SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oStockTransfer);

                ////if (!codigoFactura.ToString().Equals(""))
                ////{
                ////    int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                ////    //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                ////    if (oDoc.GetByKey(docEntry))
                ////    {
                ////        oDoc.FolioNumber = pNro;
                ////        oDoc.FolioPrefixString = pSerie;
                ////        oDoc.Reference2 = pTipo.ToString();
                ////        //oDoc.NumAtCard = codigoFactura;
                ////        int res = oDoc.Update();
                ////        if (res < 0)
                ////            guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                ////    }
                ////}
                if (!String.IsNullOrEmpty(pTipo.ToString()))
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                        guardarControlFE(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry, 1, ""); // Guardo en la tabla ControlFE
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Guardar Numero de Folio", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void GuardarSerieYNumeroFacturaAnticipo(String pFormFactura, String pSerie, int pNro, int pTipo)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oDownPayments);

                if (!codigoFactura.ToString().Equals(""))
                {
                    int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                    //if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                    if (oDoc.GetByKey(docEntry))
                    {
                        oDoc.FolioNumber = pNro;
                        oDoc.FolioPrefixString = pSerie;
                        oDoc.Printed = PrintStatusEnum.psYes;

                        if (campoReferencia.ToString().Equals("Ref2"))
                            oDoc.Reference2 = pTipo.ToString();
                        else
                            oDoc.UserFields.Fields.Item(campoReferencia).Value = pTipo.ToString();
                        //oDoc.NumAtCard = codigoFactura;
                        int res = oDoc.Update();
                        if (res < 0)
                            guardarNroSerieYNumero(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry);
                    }

                    guardarControlFE(codigoFactura, pFormFactura, pSerie, pNro, pTipo, docEntry, 1, ""); // Guardo en la tabla ControlFE
                }
            }
            catch (Exception ex)
            { }
        }

        // Imprimir documento por Crystal Reports
        public bool imprimirDocumentoCrystalReport(String pDocEntryDocumento, String pDocNumDocumento, String pFormFactura, int pIntento)
        {
            bool res = false;
            try
            {
                Thread.Sleep(500);

                string busquedaTipoDoc = verificarExisteFacturaBusquedaImpreCrystal(pDocNumDocumento, pFormFactura);

                if (!String.IsNullOrEmpty(busquedaTipoDoc))
                {
                    SAPbouiCOM.Form fo = null;

                    if (busquedaTipoDoc.ToString().Equals("133") || busquedaTipoDoc.ToString().Equals("60090") || busquedaTipoDoc.ToString().Equals("60091") || busquedaTipoDoc.ToString().Equals("65304"))
                        fo = SBO_Application.OpenForm(BoFormObjectEnum.fo_Invoice, "", codigoDocEntry.ToString()); // Otra opción para abrir un Form
                    else if (busquedaTipoDoc.ToString().Equals("179"))
                        fo = SBO_Application.OpenForm(BoFormObjectEnum.fo_InvoiceCreditMemo, "", codigoDocEntry.ToString()); // Otra opción para abrir un Form
                    else
                    {
                        string tipoForm = "";
                        string caseSwitch = busquedaTipoDoc; // Numero de Formulario de documento
                        switch (caseSwitch)
                        {
                            case "133":
                                tipoForm = "2053";
                                break;
                            case "60090":
                                tipoForm = "2054";
                                break;
                            case "60091":
                                tipoForm = "2056";
                                break;
                            case "65304":
                                tipoForm = "2065";
                                break;
                            case "65307":
                                tipoForm = "2067";
                                break;
                            case "179":
                                tipoForm = "2055";
                                break;
                            case "65303":
                                tipoForm = "2064";
                                break;
                            case "140":
                                tipoForm = "2051";
                                break;
                            case "143":
                                tipoForm = "2306";
                                break;
                            case "940":
                                tipoForm = "3080";
                                break;
                            case "426":
                                tipoForm = "2818";
                                break;
                            case "182":
                                tipoForm = "2307";
                                break;
                            case "180":
                                tipoForm = "2052";
                                break;
                            case "720":
                                tipoForm = "3079";
                                break;
                            default:
                                tipoForm = "2053";
                                break;
                                /*case "65303":
                                query = "select top 1 * from OINV where DocNum = '" + pCodigoFactura + "' and DocSubType = 'DN' order by DocEntry desc"; // Nota Debito Clientes
                                break;*/
                                /* case "140":
                                query = "select top 1 * from ODLN where DocNum = '" + pCodigoFactura + "' order by DocEntry desc";
                                break;
                            case "940":
                                query = "select top 1 * from OWTR where DocNum = '" + pCodigoFactura + "' order by DocEntry desc"; // Transferencia de Stock
                                break;*/
                        }

                        SBO_Application.ActivateMenuItem(tipoForm); // Abro el formulario de busqueda correspondiente al documento creado
                        fo = SBO_Application.Forms.ActiveForm;

                        fo.Mode = SAPbouiCOM.BoFormMode.fm_FIND_MODE;

                        SAPbouiCOM.EditText oStatic;
                        if (!busquedaTipoDoc.ToString().Equals("426"))
                            oStatic = fo.Items.Item("8").Specific; // Numero del documento
                        else if (!busquedaTipoDoc.ToString().Equals("940"))
                            oStatic = fo.Items.Item("11").Specific; // Numero del documento
                        else
                            oStatic = fo.Items.Item("3").Specific; // Numero del documento, si es Resguardo entra aca

                        oStatic.Value = pDocNumDocumento; // Numero de la factura (el docEntry)

                        fo.Items.Item("1").Click();
                    }

                    try
                    {
                        if (SBO_Application.Menus.Item("520").Enabled == false) // Para verificar si está habilitado o no
                            SBO_Application.Menus.Item("520").Enabled = true; // PRUEBA
                    }
                    catch (Exception ex)
                    { }

                    res = true;

                    SBO_Application.Menus.Item("520").Activate(); // Open printing dialog
                    fo.Items.Item("1").Click(); // Cierro el formulario de la factura

                    if (guardaLog == true && pIntento != 0)
                        guardaLogProceso(pFormFactura.ToString(), pDocNumDocumento, "Imprimio por Crystal Report.", "Usuario: " + usuarioLogueado.ToString() + ". Intento: " + pIntento.ToString()); // Guarda log del Proceso
                }
                else
                    res = false;

                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true && pIntento != 0)
                    guardaLogProceso(pFormFactura.ToString(), pDocNumDocumento, "ERROR al Imprimir por Crystal Report. Usuario: " + usuarioLogueado.ToString() + ". Intento: " + pIntento, ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }

        public void CambiarEstadoFactura(String pFormFactura)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oInvoices);

                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        if (oDoc.GetByKey(docEntry))
                        {
                            oDoc.Printed = PrintStatusEnum.psYes;

                            int res = oDoc.Update();
                            if (res < 0)
                                CambiarEstadoDocumentoManualmente(codigoFactura, pFormFactura, docEntry, "Y");
                            //guardarNroSerieYNumero(codigoFactura, pFormFactura, serie, nro, tipo);
                        }
                    }
                }

                ////if (!codigoFactura.ToString().Equals(""))
                ////{
                ////    if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                ////    {
                ////        oDoc.Printed = PrintStatusEnum.psYes;
                ////        int res = oDoc.Update();
                ////        if (generoPDF) // Si generoPDF es true entonces se creo el PDF correspondiente al documento
                ////            cambiarEstadoFactura(codigoFactura, pFormFactura, "Y"); // Lo paso en Y para saber que el mismo fue impreso, es decir el pdf fue generado
                ////    }
                ////}
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cambiar el estado del Documento", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void CambiarEstadoRemito(String pFormFactura)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oDeliveryNotes);

                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        if (oDoc.GetByKey(docEntry))
                        {
                            oDoc.Printed = PrintStatusEnum.psYes;

                            int res = oDoc.Update();
                            //guardarNroSerieYNumero(codigoFactura, pFormFactura, serie, nro, tipo);
                        }
                    }
                }

                ////if (!codigoFactura.ToString().Equals(""))
                ////{
                ////    if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                ////    {
                ////        oDoc.Printed = PrintStatusEnum.psYes;
                ////        int res = oDoc.Update();
                ////        if (generoPDF) // Si generoPDF es true entonces se creo el PDF correspondiente al documento
                ////            cambiarEstadoFactura(codigoFactura, pFormFactura, "Y"); // Lo paso en Y para saber que el mismo fue impreso, es decir el pdf fue generado
                ////    }
                ////}
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cambiar el estado del Documento", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void CambiarEstadoRemitoSalidaMercancias(String pFormFactura)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oInventoryGenExit);

                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        if (oDoc.GetByKey(docEntry))
                        {
                            oDoc.Printed = PrintStatusEnum.psYes;

                            int res = oDoc.Update();
                            //guardarNroSerieYNumero(codigoFactura, pFormFactura, serie, nro, tipo);
                        }
                    }
                }

                ////if (!codigoFactura.ToString().Equals(""))
                ////{
                ////    if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                ////    {
                ////        oDoc.Printed = PrintStatusEnum.psYes;
                ////        int res = oDoc.Update();
                ////        if (generoPDF) // Si generoPDF es true entonces se creo el PDF correspondiente al documento
                ////            cambiarEstadoFactura(codigoFactura, pFormFactura, "Y"); // Lo paso en Y para saber que el mismo fue impreso, es decir el pdf fue generado
                ////    }
                ////}
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cambiar el estado del Documento", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void CambiarEstadoRemitoCompras(String pFormFactura)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oReturns);

                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        if (oDoc.GetByKey(docEntry))
                        {
                            oDoc.Printed = PrintStatusEnum.psYes;

                            int res = oDoc.Update();
                            //guardarNroSerieYNumero(codigoFactura, pFormFactura, serie, nro, tipo);
                        }
                    }
                }

                ////if (!codigoFactura.ToString().Equals(""))
                ////{
                ////    if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                ////    {
                ////        oDoc.Printed = PrintStatusEnum.psYes;
                ////        int res = oDoc.Update();
                ////        if (generoPDF) // Si generoPDF es true entonces se creo el PDF correspondiente al documento
                ////            cambiarEstadoFactura(codigoFactura, pFormFactura, "Y"); // Lo paso en Y para saber que el mismo fue impreso, es decir el pdf fue generado
                ////    }
                ////}
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cambiar el estado del Documento", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void CambiarEstadoTransferenciaStock(String pFormFactura)
        {
            try
            {

                //SAPbobsCOM.StockTransfer oDoc = oCompany.GetBusinessObject(BoObjectTypes.oStockTransfer);

                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        CambiarEstadoDocumentoManualmente(codigoFactura, pFormFactura, docEntry, "Y");
                        //if (oDoc.GetByKey(docEntry))
                        //{
                        //    oDoc.Printed = PrintStatusEnum.psYes;

                        //    int res = oDoc.Update();
                        ////    guardarNroSerieYNumero(codigoFactura, pFormFactura, serie, nro, tipo);
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cambiar el estado del Documento", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void CambiarEstadoNotaCredito(String pFormFactura)
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oCreditNotes);

                if (generoPDF || !imprimePDFDefecto) // Si es true ó si no Imprime el PDF Automáticamente
                {
                    if (!codigoFactura.ToString().Equals(""))
                    {
                        int docEntry = ObtenerDocEntryDocumento(codigoFactura, pFormFactura); // Obtengo el DocEntry del documento
                        if (oDoc.GetByKey(docEntry))
                        {
                            oDoc.Printed = PrintStatusEnum.psYes;

                            int res = oDoc.Update();
                            //guardarNroSerieYNumero(codigoFactura, pFormFactura, serie, nro, tipo);
                        }
                    }
                }

                ////if (!codigoFactura.ToString().Equals(""))
                ////{
                ////    if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                ////    {
                ////        oDoc.Printed = PrintStatusEnum.psYes;
                ////        int res = oDoc.Update();
                ////        if (generoPDF) // Si generoPDF es true entonces se creo el PDF correspondiente al documento
                ////            cambiarEstadoFactura(codigoFactura, pFormFactura, "Y"); // Lo paso en Y para saber que el mismo fue impreso, es decir el pdf fue generado
                ////    }
                ////}
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pFormFactura.ToString(), codigoFactura, "ERROR al Cambiar el estado del Documento", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        public void CambiarEstadoFacturaAnticipo()
        {
            try
            {
                SAPbobsCOM.Documents oDoc = oCompany.GetBusinessObject(BoObjectTypes.oDownPayments);

                if (oDoc.GetByKey(Int32.Parse(codigoFactura)))
                {
                    oDoc.Printed = PrintStatusEnum.psYes;
                    int res = oDoc.Update();
                }
            }
            catch (Exception ex)
            { }
        }

        public string obtenerObjTypeDocumento(string pFormFactura)
        {
            string res = "13"; // Por defecto facturas
            try
            {
                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "179":
                        res = "14"; // Nota de Crédito
                        break;
                    /*case "65307":
                        res += "IX"; // Factura de Exportacion
                        break;
                    case "65303":
                        res += "DN"; // Nota de Debito
                        break;
                    case "65304":
                        res += "IB"; // Boleta
                        break;*/
                    case "140":
                        res = "15"; // Entrega a cliente
                        break;
                    case "180":
                        res = "16"; // Devolución de Cliente
                        break;
                    case "182":
                        res = "21"; // Devolución a Proveedor
                        break;
                    case "143":
                        res = "20"; // Entrada de mercancías a Proveedor
                        break;
                    case "940":
                        res = "67"; // Transferencia de Stock
                        break;
                    case "426":
                        res = "46"; // Pago Efectuado
                        break;
                    case "141":
                        res = "18"; // Resguardo desde Factura Proveedor
                        break;
                    case "181":
                        res = "19"; // Resguardo desde NC Proveedor
                        break;
                    case "720":
                        res = "60"; // Salida Mercancias
                        break;
                    default:
                        res = "13";
                        break;
                }

                return res;
            }
            catch (Exception ex)
            { }
            return res;
        }

        ////// Guarda en la BD los datos del Codigo QR
        ////public Boolean guardarDatosQR(SICFERespuestaEnvioCFE pRespuesta, string pCodigo)
        ////{
        ////    SAPbobsCOM.Recordset oRSMyTable = null;
        ////    try
        ////    {
        ////        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
        ////        String query = "";

        ////        if (pRespuesta.ImagenQR != null)
        ////            query = "INSERT INTO [@DATOSQR] (Code, DocEntry, U_CODIGO,U_IMAGENQR,U_LINKQR,U_TIPOCFE) VALUES (" + pCodigo + "," + pCodigo + ",'" + pCodigo + "','" + pRespuesta.ImagenQR.ToString() + "','" + pRespuesta.LinkQR.ToString() + "','" + pRespuesta.IdCFE.Tipo.ToString() + "')";
        ////        else
        ////            query = "INSERT INTO [@DATOSQR] (Code, DocEntry, U_CODIGO,U_IMAGENQR,U_LINKQR,U_TIPOCFE) VALUES (" + pCodigo + "," + pCodigo + ",'" + pCodigo + "','QR NULO','" + pRespuesta.LinkQR.ToString() + "','" + pRespuesta.IdCFE.Tipo.ToString() + "')";

        ////        oRSMyTable.DoQuery(query);

        ////        return true;
        ////        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        ////        oRSMyTable = null;
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        return false;
        ////    }
        ////}

        // Guarda en la BD un log de todo el proceso

        public Boolean guardaRespuestaFE(String pTipoDocumento, String pCodigoFactura, SICFERespuestaEnvioCFE pRespuesta, string pFormFactura, string pCodigoEnvio)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                //int docEntry = obtenerDocEntryDatosCFE();
                //long docEntry = obtenerDocEntryLogProceso();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                if (pRespuesta != null)
                {
                    if (pRespuesta.hash != null)
                    {
                        string codigoSeguridad = pRespuesta.hash.ToString();

                        if (codigoSeguridad.ToString().Length >= 6)
                            codigoSeguridad = codigoSeguridad.Substring(0, 6);

                        DateTime fechaHoy = DateTime.Now;
                        String query = "INSERT INTO [@ADDDATOSCFE] (Code, Name, U_TIPODOCUMENTO,U_CODIGOSEGURIDAD, U_NUMERODOCUMENTO, U_CREATE_DATE, U_CAE) VALUES ('" + pCodigoEnvio + "','" + pCodigoEnvio + "','" + pTipoDocumento + "','" + codigoSeguridad + "','" + pCodigoFactura + "','" + fechaHoy.ToString(formatoFecha + " HH:mm:ss") + "','" + pRespuesta.datosCAE.nauto.ToString() + "')";

                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "INSERT INTO \"@ADDDATOSCFE\" (\"Code\", \"Name\", \"U_TIPODOCUMENTO\",\"U_CODIGOSEGURIDAD\", \"U_NUMERODOCUMENTO\", \"U_CREATE_DATE\", \"U_CAE\") VALUES ('" + pCodigoEnvio + "','" + pCodigoEnvio + "','" + pTipoDocumento + "','" + codigoSeguridad + "','" + pCodigoFactura + "','" + fechaHoy.ToString(formatoFecha + " HH:mm:ss") + "','" + pRespuesta.datosCAE.nauto.ToString() + "')";

                        oRSMyTable.DoQuery(query);
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return true;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pCodigoEnvio.ToString(), codigoFactura, "ERROR al guardar los datos de Respuesta", ex.Message.ToString());
                //SBO_Application.MessageBox("Ha ocurrido un error al guardar en DATOSCFE.");
                return false;
            }
        }

        public Boolean existeRespuestaFE(String pTipoDocumento, String pCodigoFactura, SICFERespuestaEnvioCFE pRespuesta, string pFormFactura, string pCodigoEnvio)
        {
            Boolean res = false;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                if (pRespuesta != null)
                {
                    if (pRespuesta.hash != null)
                    {
                        string codigoSeguridad = pRespuesta.hash.ToString();

                        if (codigoSeguridad.ToString().Length >= 6)
                            codigoSeguridad = codigoSeguridad.Substring(0, 6);

                        DateTime fechaHoy = DateTime.Now;
                        string query = "SELECT Code from [@ADDDATOSCFE] where Code = '" + pCodigoEnvio + "' and U_NUMERODOCUMENTO = '" + pCodigoFactura + "' and U_TIPODOCUMENTO = '" + pTipoDocumento + "'";

                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query = "SELECT \"Code\" from \"@ADDDATOSCFE\" where \"Code\" =\'" + pCodigoEnvio + "\' and \"U_NUMERODOCUMENTO\" = \'" + pCodigoFactura + "\' and \"U_TIPODOCUMENTO\" = \'" + pTipoDocumento + "\'";

                        oRSMyTable.DoQuery(query);
                        if (oRSMyTable.RecordCount != 0)
                            res = true;
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso(pCodigoEnvio.ToString(), codigoFactura, "ERROR al consultar por los datos de Respuesta", ex.Message.ToString());
                //SBO_Application.MessageBox("Ha ocurrido un error al guardar en DATOSCFE.");
                return res;
            }
        }

        public Boolean guardaLogProceso(String pFormFactura, String pCodigoFactura, String pAccion, String pXML)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                long docEntry = obtenerDocEntryLogProceso();
                DateTime fechaHoy = DateTime.Now;
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "INSERT INTO [@ADDONLOGS] (Code, Name, U_PANTALLA, U_CODIGO,U_ACCION,U_LOGXML, U_FECHA, U_CREATE_DATE) VALUES (" + docEntry + ",'" + docEntry + "','" + pFormFactura + "','" + pCodigoFactura + "','" + pAccion + "','" + pXML.ToString() + "','" + fechaHoy.ToString(formatoFecha + " HH:mm:ss") + "','" + fechaHoy.ToString(formatoFecha + " HH:mm:ss") + "')";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "INSERT INTO \"@ADDONLOGS\" (\"Code\", \"Name\", \"U_PANTALLA\", \"U_CODIGO\",\"U_ACCION\",\"U_LOGXML\", \"U_FECHA\", \"U_CREATE_DATE\") VALUES (" + docEntry + ",'" + docEntry + "','" + pFormFactura + "','" + pCodigoFactura + "','" + pAccion + "','" + pXML.ToString() + "','" + fechaHoy.ToString(formatoFecha + " HH:mm:ss") + "','" + fechaHoy.ToString(formatoFecha + " HH:mm:ss") + "')";

                oRSMyTable.DoQuery(query);

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                return true;
            }
            catch (Exception ex)
            {
                //SBO_Application.MessageBox("LP: " + ex.Message.ToString());
                return false;
            }
        }

        // Guarda en la BD un log de todo el proceso
        public Boolean borrarLog()
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "delete from [@ADDONLOGS] ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "delete from \"@ADDONLOGS\"";

                oRSMyTable.DoQuery(query);

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        // Obtengo el último DocEntry de la tabla LOGPROCESO
        //public int obtenerDocEntryLogProceso()
        //{
        //    int res = 1;
        //    SAPbobsCOM.Recordset oRSMyTable = null;
        //    try
        //    {
        //        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
        //        String query = "select case when MAX(CAST(DocEntry AS Int)) is null then 1 else MAX(CAST(DocEntry AS Int)) + 1 end as Prox from [@LOGPROCESO]";

        //        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
        //            query = "select case when MAX(CAST(\"DocEntry\" AS Int)) is null then 1 else MAX(CAST(\"DocEntry\" AS Int)) + 1 end as Prox from \"@LOGPROCESO\"";

        //        oRSMyTable.DoQuery(query);

        //        if (oRSMyTable != null)
        //        {
        //            while (!oRSMyTable.EoF)
        //            {
        //                res = Convert.ToInt32(oRSMyTable.Fields.Item("Prox").Value);
        //                oRSMyTable.MoveNext();
        //            }
        //        }

        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;

        //        return res;
        //    }
        //    catch (Exception ex)
        //    {
        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;
        //        SBO_Application.MessageBox("Ha ocurrido un error al buscar el proximo DocEntry de LogProceso.");
        //        return res;
        //    }
        //}

        //Obtengo el último DocEntry de la tabla LOGPROCESO
        public long obtenerDocEntryLogProceso()
        {
            long res = 1;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                /*String query = "select case when MAX(CAST(DocEntry AS Int)) is null then 1 else MAX(CAST(DocEntry AS Int)) + 1 end as Prox from [@LOGPROCESO]";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select case when MAX(CAST(\"DocEntry\" AS Int)) is null then 1 else MAX(CAST(\"DocEntry\" AS Int)) + 1 end as Prox from \"@LOGPROCESO\"";
                */

                String query = "select case when MAX(CAST(Code AS bigint)) is null then 1 else MAX(CAST(Code AS bigint)) + 1 end as Prox from [@ADDONLOGS]";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select case when MAX(CAST(\"Code\" AS bigint)) is null then 1 else MAX(CAST(\"Code\" AS bigint)) + 1 end as Prox from \"@ADDONLOGS\"";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = Convert.ToInt64(oRSMyTable.Fields.Item("Prox").Value);
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("Ha ocurrido un error al buscar el proximo DocEntry de LogProceso.");
                return res;
            }
        }

        // Obtengo el último DocEntry de la tabla DATOSCFE

        //public int obtenerDocEntryDatosCFE()
        //{
        //    int res = 1;
        //    SAPbobsCOM.Recordset oRSMyTable = null;
        //    try
        //    {
        //        oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
        //        String query = "select  case when MAX(CAST(DocEntry AS Int)) is null then 1 else MAX(CAST(DocEntry AS Int)) + 1 end as Prox from [@DATOSCFE]";

        //        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
        //            query = "select case when MAX(CAST(\"DocEntry\" AS Int)) is null then 1 else MAX(CAST(\"DocEntry\" AS Int)) + 1 end as Prox from \"@DATOSCFE\"";

        //        oRSMyTable.DoQuery(query);

        //        if (oRSMyTable != null)
        //        {
        //            while (!oRSMyTable.EoF)
        //            {
        //                res = Convert.ToInt32(oRSMyTable.Fields.Item("Prox").Value);
        //                oRSMyTable.MoveNext();
        //            }
        //        }

        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;

        //        return res;
        //    }
        //    catch (Exception ex)
        //    {
        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
        //        oRSMyTable = null;
        //        SBO_Application.MessageBox("Ha ocurrido un error al buscar el proximo DocEntry de DocCFE.");
        //        return res;
        //    }
        //}

        // Obtengo el último DocEntry de la tabla DATOSCFE

        public long obtenerDocEntryDatosCFE()
        {
            long res = 1;
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                String query = "select  case when MAX(CAST(Code AS bigint)) is null then 1 else MAX(CAST(Code AS bigint)) + 1 end as Prox from [@ADDDATOSCFE]";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select case when MAX(CAST(\"Code\" AS bigint)) is null then 1 else MAX(CAST(\"Code\" AS bigint)) + 1 end as Prox from \"@ADDDATOSCFE\"";

                oRSMyTable.DoQuery(query);

                if (oRSMyTable != null)
                {
                    while (!oRSMyTable.EoF)
                    {
                        res = Convert.ToInt64(oRSMyTable.Fields.Item("Prox").Value);
                        oRSMyTable.MoveNext();
                    }
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;

                return res;
            }
            catch (Exception ex)
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
                SBO_Application.MessageBox("Ha ocurrido un error al buscar el proximo DocEntry de DocCFE.");
                return res;
            }
        }

        public List<DocumentoElectronico> ObtenerDocumentosElectronicos(int codigo, DateTime fechaDesde, DateTime fechaHasta)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                List<DocumentoElectronico> docs = new List<DocumentoElectronico>();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select DocEntry,DocNum, DocDate, CardName, " + campoReferencia + " as Ref2, FolioPref, FolioNum, case when DocSubType <> 'DN' then 'Factura' else 'Nota Debito ' end as Tipo from OINV where FolioNum is not null and FolioPref is not null and " + campoReferencia + " is not null ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", \"" + campoReferencia + "\" as Ref2, \"FolioPref\", \"FolioNum\", case when \"DocSubType\" <> \'DN\' then 'Factura' else 'Nota Debito ' end as Tipo from \"OINV\" where \"FolioNum\" is not null and \"FolioPref\" is not null and \"" + campoReferencia + "\" is not null ";

                if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum = '" + codigo + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" = \'" + codigo + "\'";
                }

                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                }

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += " order by DocNum";  // Factura Clientes
                else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query += " order by \"DocNum\"";  // Factura Clientes

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        DocumentoElectronico doc = new DocumentoElectronico();
                        String serie = oRSMyTable.Fields.Item("FolioPref").Value;
                        int nro = oRSMyTable.Fields.Item("FolioNum").Value;
                        String cli = oRSMyTable.Fields.Item("CardName").Value;
                        String tipo = oRSMyTable.Fields.Item("Ref2").Value;
                        int cod = oRSMyTable.Fields.Item("DocNum").Value;
                        DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                        doc.Cliente = cli;
                        doc.DocNum = cod;
                        doc.fecha = fecha.Date.ToShortDateString();
                        doc.numero = nro;
                        doc.serie = serie;
                        doc.tipo = tipo;
                        docs.Add(doc);
                    }
                    catch (Exception ex)
                    { }
                    oRSMyTable.MoveNext();
                }

                query = "select DocEntry,DocNum, DocDate, CardName, " + campoReferencia + " as Ref2, FolioPref, FolioNum, 'Nota Credito' as Tipo from ORIN where FolioNum is not null and FolioPref is not null and " + campoReferencia + " is not null ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query = "select \"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", \"" + campoReferencia + "\" as Ref2, \"FolioPref\", \"FolioNum\", 'Nota Credito' as Tipo from \"ORIN\" where \"FolioNum\" is not null and \"FolioPref\" is not null and \"" + campoReferencia + "\" is not null ";

                if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum = '" + codigo + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" = \'" + codigo + "\'";
                }

                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                }

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += " order by DocNum";  // Nota de Creditos
                else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query += " order by \"DocNum\"";  // Nota de Creditos

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        DocumentoElectronico doc = new DocumentoElectronico();
                        String serie = oRSMyTable.Fields.Item("FolioPref").Value;
                        int nro = oRSMyTable.Fields.Item("FolioNum").Value;
                        String cli = oRSMyTable.Fields.Item("CardName").Value;
                        String tipo = oRSMyTable.Fields.Item("Ref2").Value;
                        int cod = oRSMyTable.Fields.Item("DocNum").Value;
                        DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                        doc.Cliente = cli;
                        doc.DocNum = cod;
                        doc.fecha = fecha.Date.ToShortDateString();
                        doc.numero = nro;
                        doc.serie = serie;
                        doc.tipo = tipo;
                        docs.Add(doc);
                    }
                    catch (Exception ex)
                    { }
                    oRSMyTable.MoveNext();
                }

                if (realizarResguardos == true) // && tipoConexionBaseDatos.Equals("SQL"))
                {
                    query = "select DocEntry,DocNum, DocDate, CardName, isnull(" + campoReferencia + " ,'') as Ref2, SUBSTRING(isnull(CounterRef ,'') , 0 ,2) as FolioPref, SUBSTRING(isnull(CounterRef ,'') , 3 , LEN(isnull(CounterRef ,''))) as FolioNum, 'eResguardo' as Tipo from OVPM where CounterRef is not null and " + campoReferencia + " is not null ";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query = "select \"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", \"" + campoReferencia + "\" as Ref2, SUBSTRING(IFNULL(\"CounterRef\",'') , 0 ,2) as FolioPref, SUBSTRING(IFNULL(\"CounterRef\",'') , 3 , IFNULL(\"CounterRef\",'')) as FolioNum, 'eResguardo' as Tipo from \"OVPM\" where \"CounterRef\" is not null and \"" + campoReferencia + "\" is not null ";

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Nota de Creditos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Nota de Creditos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoElectronico doc = new DocumentoElectronico();
                            string serie = oRSMyTable.Fields.Item("FolioPref").Value;
                            string nro = oRSMyTable.Fields.Item("FolioNum").Value;
                            string cli = oRSMyTable.Fields.Item("CardName").Value;
                            string tipo = oRSMyTable.Fields.Item("Ref2").Value;
                            int cod = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            doc.Cliente = cli;
                            doc.DocNum = cod;
                            doc.fecha = fecha.Date.ToShortDateString();
                            doc.numero = Convert.ToInt32(nro.ToString());
                            doc.serie = serie;
                            doc.tipo = tipo;
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }

                if (realizarRemitos) // ASPL - 2020.10.21 - Se agrega para listar Remitos.
                {
                    query = "select DocEntry,DocNum, DocDate, CardName, isnull(" + campoReferencia + " ,'') as Ref2, FolioPref, FolioNum, 'eRemito' as Tipo from ODLN FolioNum is not null and FolioPref is not null and " + campoReferencia + " is not null ";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query = "select \"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", \"" + campoReferencia + "\" as Ref2, \"FolioPref\", \"FolioNum\", 'eRemito' as Tipo from \"ODLN\" where \"FolioNum\" is not null and \"FolioPref\" is not null and \"" + campoReferencia + "\" is not null ";

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Nota de Creditos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Nota de Creditos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoElectronico doc = new DocumentoElectronico();
                            string serie = oRSMyTable.Fields.Item("FolioPref").Value;
                            int nro = oRSMyTable.Fields.Item("FolioNum").Value;
                            string cli = oRSMyTable.Fields.Item("CardName").Value;
                            string tipo = oRSMyTable.Fields.Item("Ref2").Value;
                            int cod = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            doc.Cliente = cli;
                            doc.DocNum = cod;
                            doc.fecha = fecha.Date.ToShortDateString();
                            doc.numero = nro;
                            doc.serie = serie;
                            doc.tipo = tipo;
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    query = "select DocEntry,DocNum, DocDate, CardName, isnull(" + campoReferencia + " ,'') as Ref2, FolioPref, FolioNum, 'eRemito' as Tipo from ORDN FolioNum is not null and FolioPref is not null and " + campoReferencia + " is not null ";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query = "select \"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", \"" + campoReferencia + "\" as Ref2, \"FolioPref\", \"FolioNum\", 'eRemito' as Tipo from \"ORDN\" where \"FolioNum\" is not null and \"FolioPref\" is not null and \"" + campoReferencia + "\" is not null ";

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoElectronico doc = new DocumentoElectronico();
                            string serie = oRSMyTable.Fields.Item("FolioPref").Value;
                            int nro = oRSMyTable.Fields.Item("FolioNum").Value;
                            string cli = oRSMyTable.Fields.Item("CardName").Value;
                            string tipo = oRSMyTable.Fields.Item("Ref2").Value;
                            int cod = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            doc.Cliente = cli;
                            doc.DocNum = cod;
                            doc.fecha = fecha.Date.ToShortDateString();
                            doc.numero = nro;
                            doc.serie = serie;
                            doc.tipo = tipo;
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                }

                return docs;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        public List<DocumentoNOElectronico> ObtenerDocumentosNOElectronicos(int codigo, DateTime fechaDesde, DateTime fechaHasta, int numeroDesde, int numeroHasta)
        {
            SAPbobsCOM.Recordset oRSMyTable = null;

            try
            {
                string filtroViaje = ""; string joinViaje = "";

                if (descEmpresa.Equals("MAVIN"))
                {
                    SAPbouiCOM.ComboBox oStaticCombo = oFormEnviarDocumento.Items.Item("cmbViaje").Specific;
                    if (!String.IsNullOrEmpty(oStaticCombo.Value.ToString()))
                        if (!oStaticCombo.Value.ToString().Equals("T") && !oStaticCombo.Value.ToString().Equals("N"))
                            filtroViaje = " and U_VIAJE = '" + oStaticCombo.Selected.Value + "' ";
                }

                List<DocumentoNOElectronico> docs = new List<DocumentoNOElectronico>();
                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                String query = "select DISTINCT oin.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, case when DocSubType = 'DN' then 'Nota Debito ' else case when DocSubType = 'IX' then 'Factura Exportacion' else 'Factura' end end as Tipo ";

                if (descEmpresa.Equals("MAVIN"))
                    query += ", isnull(oin.U_VIAJE, '') as Viaje from OINV as oin ";
                else
                    query += ", 0 as Viaje from OINV as oin ";

                query += "inner join ControlFE as cfe on cfe.DocEntry = oin.DocEntry and cfe.ObjType = 13 " +
                "where Canceled = 'N' and (cfe.Estado = '0' or cfe.Estado is null) ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select oin.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\",case when \"DocCur\" = \'" + monedaStrSimbolo.ToString() + "\' or \"DocCur\" = \'" + monedaStrISO.ToString() + "\' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, case when \"DocSubType\" = \'DN\' then 'Nota Debito ' else case when \"DocSubType\" = \'IX\' then 'Factura Exportacion' else 'Factura' end end as Tipo, 0 as Viaje from \"OINV\" as oin " +
                    "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = oin.\"DocEntry\" and cfe.\"OBJTYPE\" = \'13\' " +
                    "where \"CANCELED\" = 'N' and (cfe.\"ESTADO\" = \'0\' or cfe.\"ESTADO\" is null) ";
                }

                if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum = '" + codigo + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" = \'" + codigo + "\'";
                }

                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                }

                if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                }

                /*// Control para las facturas de contingencia
                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    {
                        if (fechaDesde <= Convert.ToDateTime("01/12/2015"))
                        {
                            if (descEmpresa.ToString().Equals("BOSCH"))
                                query += " and U_NumRojo >= 7901 and U_NumRojo <= 10400 ";
                            else if (descEmpresa.ToString().Equals("REMIL"))
                                query += " and ((U_NumFactura >= 67501 and U_NumFactura <= 70500) or (U_NumFactura >= 74001 and U_NumFactura <= 77200)) ";
                            else if (descEmpresa.ToString().Equals("SOLGE"))
                                query += " and U_NumFactura >= 187901 and U_NumFactura <= 198050 ";
                        }
                    }
                }*/

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += filtroViaje + " order by DocNum";  // Factura Clientes
                else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query += filtroViaje + " order by \"DocNum\"";  // Factura Clientes

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        DocumentoNOElectronico doc = new DocumentoNOElectronico();
                        double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                        int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                        String cliente = oRSMyTable.Fields.Item("CardName").Value;
                        String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                        int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                        DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;
                        string viaje = ""; int viajeInt = oRSMyTable.Fields.Item("Viaje").Value;
                        if (viajeInt > 0)
                            viaje = viajeInt.ToString();

                        total = Math.Round(total, 2);

                        doc.Cliente = cliente;
                        doc.DocNum = docNum;
                        doc.Fecha = fecha.Date.ToShortDateString();
                        doc.DocEntry = docEntry;
                        doc.Monto = total;
                        doc.Tipo = tipo;
                        doc.Viaje = viaje;
                        docs.Add(doc);
                    }
                    catch (Exception ex)
                    { }
                    oRSMyTable.MoveNext();
                }

                query = "select DISTINCT oin.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Nota Credito' as Tipo ";

                if (descEmpresa.Equals("MAVIN"))
                    query += ", isnull(oin.U_VIAJE, '') as Viaje from ORIN as oin ";
                else
                    query += ", 0 as Viaje from ORIN as oin ";

                query += "inner join ControlFE as cfe on cfe.DocEntry = oin.DocEntry and cfe.ObjType = 14 " +
                "where Canceled = 'N' and (cfe.Estado = '0' or cfe.Estado is null) ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select oin.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\",case when \"DocCur\" = \'" + monedaStrSimbolo.ToString() + "\' or \"DocCur\" = \'" + monedaStrISO.ToString() + "\' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, 'Nota Credito' as Tipo, 0 as Viaje from \"ORIN\" as oin " +
                    "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = oin.\"DocEntry\" and cfe.\"OBJTYPE\" = \'14\' " +
                    "where \"CANCELED\" = 'N' and (cfe.\"ESTADO\" = \'0\' or cfe.\"ESTADO\" is null) ";
                }

                if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum = '" + codigo + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" = \'" + codigo + "\'";
                }

                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                }

                if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                }

                /*// Control para las facturas de contingencia
                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    {
                        if (fechaDesde <= Convert.ToDateTime("01/12/2015"))
                        {
                            if (descEmpresa.ToString().Equals("BOSCH"))
                                query += " and U_NumRojo >= 7901 and U_NumRojo <= 10400 ";
                            else if (descEmpresa.ToString().Equals("REMIL"))
                                query += " and ((U_NumFactura >= 67501 and U_NumFactura <= 70500) or (U_NumFactura >= 74001 and U_NumFactura <= 77200)) ";
                            else if (descEmpresa.ToString().Equals("SOLGE"))
                                query += " and U_NumFactura >= 187901 and U_NumFactura <= 198050 ";
                        }
                    }
                }*/

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += filtroViaje + " order by DocNum";  // Notas de Creditos
                else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query += filtroViaje + " order by \"DocNum\"";  // Notas de Creditos

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        DocumentoNOElectronico doc = new DocumentoNOElectronico();
                        double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                        int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                        String cliente = oRSMyTable.Fields.Item("CardName").Value;
                        String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                        int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                        DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;
                        string viaje = ""; int viajeInt = oRSMyTable.Fields.Item("Viaje").Value;
                        if (viajeInt > 0)
                            viaje = viajeInt.ToString();

                        total = Math.Round(total, 2);

                        doc.Cliente = cliente;
                        doc.DocNum = docNum;
                        doc.Fecha = fecha.Date.ToShortDateString();
                        doc.DocEntry = docEntry;
                        doc.Monto = total;
                        doc.Tipo = tipo;
                        doc.Viaje = viaje;
                        docs.Add(doc);
                    }
                    catch (Exception ex)
                    { }
                    oRSMyTable.MoveNext();
                }

                if (realizarResguardos == true && !descEmpresa.ToString().Equals("POCHA") && !descEmpresa.ToString().Equals("SCHIN") && !descEmpresa.ToString().Equals("OBRIN") && !descEmpresa.ToString().Equals("CABIN") && !descEmpresa.ToString().Equals("FRUTI") /*&& !descEmpresa.ToString().Equals("TECHM")*/) // Si Realiza los resguardos
                {
                    query = "select DISTINCT ovp.DocEntry,DocNum, DocDate, CardName, case when DocCurr = '" + monedaStrSimbolo.ToString() + "' or DocCurr = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, case when Canceled = 'N' then 'Resguardo Pago' else 'Cancelacion eResg' end as Tipo from OVPM as ovp " +
                     "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 46 " +
                     " where cfe.Estado = '0' and ovp.U_CODIGODGI is not null and ovp.U_CODIGODGI <> '' and ovp.U_CODIGODGI <> '-' and (/*(" + campoReferencia + " is null and*/ ovp.Canceled = 'N'/*)*/  or (ovp.Canceled = 'Y' and " + campoReferencia + " > 0 )) "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select ovp.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCurr\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCurr\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, case when \"Canceled\" = 'N' then 'Resguardo Pago' else 'Cancelacion eResg' end as Tipo from \"OVPM\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'46\' " +
                           " where cfe.\"ESTADO\" = \'0\' and ovp.\"U_CODIGODGI\" is not null and ovp.\"U_CODIGODGI\" <> \'\' and ovp.\"U_CODIGODGI\" <> \'-\' and (/*(\"" + campoReferencia + "\" is null and*/ ovp.\"Canceled\" = \'N\'/*)*/  or (ovp.\"Canceled\" = \'Y\' and \"" + campoReferencia + "\" > \'0\' )) "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }

                //ASPL - 2019.04.22 - Removido ENGRAW de logica standar de obtencion de Resguardos y Cancelaciones, por nuevo cambio de logica propia.
                if (realizarResguardos == true && (descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("SCHIN") || descEmpresa.ToString().Equals("OBRIN") || descEmpresa.ToString().Equals("CABIN") || descEmpresa.ToString().Equals("FRUTI") || descEmpresa.ToString().Equals("AEG") || descEmpresa.ToString().Equals("OPRUM") /*|| descEmpresa.ToString().Equals("TECHM")*/)) // Si Realiza los resguardos y es Granja Pocha
                {
                    query = "select DISTINCT CodResguardo as DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, case when Canceled = 'N' then 'Resguardo' else 'Cancelacion eResg' end as Tipo from OPCH as ovp " +
                     "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 18 " +
                     " where cfe.Estado = '0' AND CodResguardo is not null and CodResguardo <> '' and Canceled = 'N' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select \"CODRESGUARDO\" as DocEntry,\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, case when \"CANCELED\" = 'N' then 'Resguardo' else 'Cancelacion eResg' end as Tipo from \"OPCH\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'18\' " +
                           " where (cfe.\"ESTADO\" = \'0\' or cfe.\"ESTADO\" is null) and \"CODRESGUARDO\" is not null and \"CODRESGUARDO\" <> \'\' and \"CANCELED\" = \'N\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    // Notas de créditos de Proveedor
                    query = "select DISTINCT CodResguardo as DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Cancelacion eResg' as Tipo from ORPC as ovp " +
                     "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 19 " +
                     " where cfe.Estado = '0' AND CodResguardo is not null and CodResguardo <> '' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select \"CODRESGUARDO\" as DocEntry,\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal,'Cancelacion eResg' as Tipo from \"ORPC\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'19\' " +
                           " where cfe.\"ESTADO\" = \'0\' and \"CODRESGUARDO\" is not null and \"CODRESGUARDO\" <> \'\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }

                //ASPL - 2019.04.22 - Nuevo cambio solo ENGRAW, moneda local en USD, se debe mostrar moneda del sistema en UYU.
                if (realizarResguardos == true && descEmpresa.ToString().Equals("ENGRW"))
                {
                    query = "select DISTINCT DocNum as DocEntry,DocNum, DocDate, ovp.CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotalSy else DocTotal end as DocTotal, case when Canceled = 'N' then 'Resguardo' else 'Cancelacion eResg' end as Tipo from OPCH as ovp " +
                     "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 18 " +
                     "inner join OCRD as oc on oc.CardCode = ovp.CardCode and oc.CardType = 'S' " +
                     " where cfe.Estado = '0' AND QryGroup19 = 'N' AND CodResguardo is not null and CodResguardo <> '' and Canceled = 'N' ";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select \"CODRESGUARDO\" as DocEntry,\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, case when \"CANCELED\" = 'N' then 'Resguardo' else 'Cancelacion eResg' end as Tipo from \"OPCH\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'18\' " +
                           " where cfe.\"ESTADO\" = \'0\' and \"CODRESGUARDO\" is not null and \"CODRESGUARDO\" <> \'\' and \"CANCELED\" = \'N\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    // Notas de créditos de Proveedor
                    query = "select CodResguardo as DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotalSy else DocTotal end as DocTotal, 'Cancelacion eResg' as Tipo from ORPC as ovp " +
                     "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 19 " +
                     " where cfe.Estado = '0' AND CodResguardo is not null and CodResguardo <> '' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select \"CODRESGUARDO\" as DocEntry,\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal,'Cancelacion eResg' as Tipo from \"ORPC\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'19\' " +
                           " where cfe.\"ESTADO\" = \'0\' and \"CODRESGUARDO\" is not null and \"CODRESGUARDO\" <> \'\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }

                if (realizarRemitos == true && (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA") || descEmpresa.ToString().Equals("MONTE") || descEmpresa.ToString().Equals("OLDSO") || descEmpresa.ToString().Equals("HENDE") || descEmpresa.ToString().Equals("FRUTI"))) // Si Realiza los remitos y si es Dreghal
                {
                    query = "select owt.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Trsf Stock' as Tipo from OWTR as owt " +
                   "inner join OWHS as owh on owh.WhsCode = owt.Filler " +
                   "inner join ControlFE as cfe on cfe.DocEntry = owt.DocEntry and cfe.ObjType = 67 " +
                   " where cfe.Estado = '0' and owt.Canceled = 'N' " +
                   " and owh.U_EREMITO = '1' and owt.U_GENERA_REMITO <> '0' and owt.Filler <> owt.ToWhsCode  "; // Verifica que almacen de Origen genere Remito y que el almacen origen y destino no sea el mismo

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select owt.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\",  case when \"DocCur\" = \'" + monedaStrSimbolo.ToString() + "\' or \"DocCur\" = \'" + monedaStrISO.ToString() + "\' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, 'Trsf Stock' as Tipo from \"OWTR\" as owt " +
                         "inner join \"OWHS\" as owh on owh.\"WhsCode\" = owt.\"Filler\" " +
                          "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = owt.\"DocEntry\" and cfe.\"OBJTYPE\" = \'67\' " +
                          " where cfe.ESTADO = \'0\' and owt.\"CANCELED\" = \'N\'  " +
                          " and owt.\"Filler\" <> owt.\"ToWhsCode\"  "; // Verifica que almacen de Origen genere Remito y que el almacen origen y destino no sea el mismo
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";
                    else
                        query += " order by \"DocNum\"";

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    if (descEmpresa.ToString().Equals("POCHA"))
                    {
                        query = "select owt.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Salida Mercancias ' as Tipo from OIGE as owt " +
                        "inner join ControlFE as cfe on cfe.DocEntry = owt.DocEntry and cfe.ObjType = 60 " +
                        " where cfe.Estado = '0' and owt.Canceled = 'N' " +
                        " and (select count(U_MOTIVO_DESCARTE) from IGE1 as ig " +
                            "inner join [@MOTIVOS_DESCARTE] AS m on m.Code = ig.U_MOTIVO_DESCARTE  " +
                            "where m.U_GENERA_REMITO = 1 and ig.DocEntry = owt.DocEntry " +
                            "group by ig.U_MOTIVO_DESCARTE ) >= 1  ";

                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        {
                            query = "select owt.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = \'" + monedaStrSimbolo.ToString() + "\' or \"DocCur\" = \'" + monedaStrISO.ToString() + "\' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, 'Salida Mercancias ' as Tipo from \"OIGE\" as owt " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = owt.\"DocEntry\" and cfe.\"OBJTYPE\" = 60 " +
                           " where cfe.\"ESTADO\" = \'0\' and owt.\"CANCELED\" = \'N\' " +
                           " and (select count(\"U_MOTIVO_DESCARTE\") from IGE1 as ig " +
                               "inner join \"@MOTIVOS_DESCARTE\" AS m on m.\"Code\" = ig.\"U_MOTIVO_DESCARTE\"  " +
                               "where m.\"U_GENERA_REMITO\" = \'1\' and ig.\"DocEntry\" = owt.\"DocEntry\" " +
                               "group by ig.\"U_MOTIVO_DESCARTE\" ) >= \'1\'  ";
                        }

                        if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                        {
                            if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                                query += " and DocNum = '" + codigo + "'";
                            else
                                query += " and \"DocNum\" = \'" + codigo + "\'";
                        }

                        if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                        {
                            if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                                query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                            else
                                query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                        }

                        if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                        {
                            if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                                query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                            else
                                query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                        }

                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " order by DocNum";
                        else
                            query += " order by \"DocNum\"";

                        oRSMyTable.DoQuery(query);
                        while (!oRSMyTable.EoF)
                        {
                            try
                            {
                                DocumentoNOElectronico doc = new DocumentoNOElectronico();
                                double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                                int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                                String cliente = oRSMyTable.Fields.Item("CardName").Value;
                                String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                                int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                                DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                                total = Math.Round(total, 2);

                                doc.Cliente = cliente;
                                doc.DocNum = docNum;
                                doc.Fecha = fecha.Date.ToShortDateString();
                                doc.DocEntry = docEntry;
                                doc.Monto = total;
                                doc.Tipo = tipo;
                                doc.Viaje = "";
                                docs.Add(doc);
                            }
                            catch (Exception ex)
                            { }
                            oRSMyTable.MoveNext();
                        }
                    }
                }

                if (realizarRemitos == true && (descEmpresa.ToString().Equals("ALMEN") || descEmpresa.ToString().Equals("MEDIT"))) // Si Realiza los Remitos y si es Almena
                {
                    query = "select owt.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Remito' as Tipo from ORPD as owt " +
                    "inner join ControlFE as cfe on cfe.DocEntry = owt.DocEntry and cfe.ObjType = 21 " +
                   " where cfe.Estado = '0' and owt.Canceled = 'N' and U_GENERA_REMITO <> 0 ";

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Remitos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Remitos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    // Tambien lista los Remitos de Cancelacion
                    query = "select owt.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Remito Entrada' as Tipo from OPDN as owt " +
                    "inner join ControlFE as cfe on cfe.DocEntry = owt.DocEntry and cfe.ObjType = 20 " +
                  " where cfe.Estado = '0' and owt.Canceled = 'N' and U_GENERA_REMITO <> 0 ";

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Remitos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Remitos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }

                if (realizarRemitos == true && !descEmpresa.ToString().Equals("ALMEN") && !descEmpresa.ToString().Equals("MEDIT")) // Si Realiza los Remitos y si no es Dreghal !descEmpresa.ToString().Equals("DREG")
                {
                    query = "select owt.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Remito' as Tipo from ODLN as owt " +
                    "inner join ControlFE as cfe on cfe.DocEntry = owt.DocEntry and cfe.ObjType = 15 " +
             " where cfe.Estado = '0' and owt.Canceled = 'N' ";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select owt.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = \'" + monedaStrSimbolo.ToString() + "\' or \"DocCur\" = \'" + monedaStrISO.ToString() + "\' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, 'Remito' as Tipo from \"ODLN\" as owt " +
                          "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = owt.\"DocEntry\" and cfe.\"OBJTYPE\" = \'15\' " +
             " where cfe.ESTADO = \'0\' and owt.CANCELED = \'N\' ";
                    }

                    //if (descEmpresa.ToString().Equals("POCHA"))

                    //if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    //    query += " and (U_GENERA_REMITO = '1' or U_REMITO_EXPORT = '1') ";
                    //else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    //    query += " and (\"U_GENERA_REMITO\" = \'1\' or \"U_REMITO_EXPORT\" = \'1\') ";

                    ////if (descEmpresa.ToString().Equals("POCHA"))
                    ////{
                    ////    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    ////        query += " and (U_GENERA_REMITO = '1' or U_REMITO_EXPORT = '1') ";
                    ////    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    ////        query += " and (\"U_GENERA_REMITO\" = \'1\' or \"U_REMITO_EXPORT\" = \'1\') ";
                    ////}

                    if (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("POCHA"))
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and U_GENERA_REMITO <> '0' ";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"U_GENERA_REMITO\" <> \'0\' ";
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Remitos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Remitos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    query = "select owt.DocEntry,DocNum, DocDate, CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Devolucion' as Tipo from ORDN as owt " +
                  "inner join ControlFE as cfe on cfe.DocEntry = owt.DocEntry and cfe.ObjType = 16 " +
                    " where cfe.Estado = '0' and owt.Canceled = 'N' ";

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select owt.\"DocEntry\",\"DocNum\", \"DocDate\", \"CardName\", case when \"DocCur\" = \'" + monedaStrSimbolo.ToString() + "\' or \"DocCur\" = \'" + monedaStrISO.ToString() + "\' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, 'Devolucion' as Tipo from \"ORDN\" as owt " +
                             "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = owt.\"DocEntry\" and cfe.\"OBJTYPE\" = \'16\' " +
                    " where cfe.\"ESTADO\" = \'0\' and owt.\"CANCELED\" = \'N\' ";
                    }

                    //if (descEmpresa.ToString().Equals("POCHA"))

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and U_GENERA_REMITO <> '0' ";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"U_GENERA_REMITO\" <> \'0\' ";

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Remitos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Remitos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }

                if (realizarBoletaEntrada == true)
                {
                    query = "select DISTINCT ovp.DocEntry,DocNum, DocDate, ovp.CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, case when Canceled = 'N' then 'Boleta Entrada' else 'Cancelacion Boleta' end as Tipo from OPCH as ovp " +
                     "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 18 " +
                     "inner join OCRD as oc on oc.CardCode = ovp.CardCode and oc.CardType = 'S' " +
                     " where cfe.Estado = '0' AND QryGroup19 = 'Y' and Canceled = 'N' ";// AND isnull(CodResguardo, '') = '' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select ovp.\"DocEntry\",\"DocNum\", \"DocDate\", ovp.\"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, case when \"CANCELED\" = 'N' then 'Boleta Entrada' else 'Cancelacion Boleta' end as Tipo from \"OPCH\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'18\' " +
                            "inner join \"OCRD\" as oc on oc.\"CardCode\" = ovp.\"CardCode\" and oc.\"CardType\" = \'S\' " +
                           " where cfe.\"ESTADO\" = \'0\' AND \"QryGroup19\" = \'Y\' and \"CANCELED\" = \'N\' and IFNULL (\"CODRESGUARDO\", NULL) = \'\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }

                    query = "select ovp.DocEntry,DocNum, DocDate, ovp.CardName, case when DocCur = '" + monedaStrSimbolo.ToString() + "' or DocCur = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, 'Cancelacion Boleta' as Tipo from ORPC as ovp " +
                    "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 19 " +
                    "inner join OCRD as oc on oc.CardCode = ovp.CardCode and oc.CardType = 'S' " +
                    " where cfe.Estado = '0' AND QryGroup19 = 'Y' and Canceled = 'N' AND isnull(CodResguardo, '') = '' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA

                    if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    {
                        query = "select ovp.\"DocEntry\",\"DocNum\", \"DocDate\", ovp.\"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, 'Cancelacion Boleta' as Tipo from \"ORPC\" as ovp " +
                           "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'19\' " +
                            "inner join \"OCRD\" as oc on oc.\"CardCode\" = ovp.\"CardCode\" and oc.\"CardType\" = \'S\' " +
                           " where cfe.\"ESTADO\" = \'0\' AND \"QryGroup19\" = \'Y\' and \"CANCELED\" = \'N\' and IFNULL (\"CODRESGUARDO\", NULL) = \'\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                    }

                    if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0) // Si el codigo no es vacio filtra por ese campo
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum = '" + codigo + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" = \'" + codigo + "\'";
                    }

                    if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString())) // Si las fechas no son vacias filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                    }

                    if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                    {
                        if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                        else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                    }

                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " order by DocNum";  // Resguardos
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " order by \"DocNum\"";  // Resguardos

                    oRSMyTable.DoQuery(query);
                    while (!oRSMyTable.EoF)
                    {
                        try
                        {
                            DocumentoNOElectronico doc = new DocumentoNOElectronico();
                            double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                            int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                            String cliente = oRSMyTable.Fields.Item("CardName").Value;
                            String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                            int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                            DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                            total = Math.Round(total, 2);

                            doc.Cliente = cliente;
                            doc.DocNum = docNum;
                            doc.Fecha = fecha.Date.ToShortDateString();
                            doc.DocEntry = docEntry;
                            doc.Monto = total;
                            doc.Tipo = tipo;
                            doc.Viaje = "";
                            docs.Add(doc);
                        }
                        catch (Exception ex)
                        { }
                        oRSMyTable.MoveNext();
                    }
                }
                //Pagos Recibidos - factura cobranza
                query = "select ovp.DocEntry, DocNum, DocDate, ovp.CardName, case when ovp.DocCurr = '" + monedaStrSimbolo.ToString() + "' or ovp.DocCurr = '" + monedaStrISO.ToString() + "' then DocTotal else DocTotalFC end as DocTotal, case when Canceled = 'N' then 'Recibo' else 'Cancelacion Recibo' end as Tipo from ORCT as ovp " +
                         "inner join ControlFE as cfe on cfe.DocEntry = ovp.DocEntry and cfe.ObjType = 24 " +
                         "inner join OCRD as oc on oc.CardCode = ovp.CardCode " +
                         " where cfe.Estado = '0' and Canceled = 'N' ";

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select ovp.\"DocEntry\",\"DocNum\", \"DocDate\", ovp.\"CardName\", case when \"DocCur\" = '" + monedaStrSimbolo.ToString() + "' or \"DocCur\" = '" + monedaStrISO.ToString() + "' then \"DocTotal\" else \"DocTotalFC\" end as DocTotal, case when \"CANCELED\" = 'N' then 'Recibo' else 'Cancelacion Recibo' end as Tipo from \"ORCT\" as ovp " +
                       "inner join \"ControlFE\" as cfe on cfe.\"DOCENTRY\" = ovp.\"DocEntry\" and cfe.\"OBJTYPE\" = \'24\' " +
                        "inner join \"OCRD\" as oc on oc.\"CardCode\" = ovp.\"CardCode\" " +
                       " where cfe.\"ESTADO\" = \'0\' and \"CANCELED\" = \'N\' "; // inner join OACT as oac on oac.AcctCode = ovp.CashAcct   EL INNER ANTES SE USABA
                }

                if (!String.IsNullOrEmpty(codigo.ToString()) && codigo != 0)
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum = '" + codigo + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" = \'" + codigo + "\'";
                }

                if (!String.IsNullOrEmpty(fechaDesde.ToString()) && !String.IsNullOrEmpty(fechaHasta.ToString()))
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocDate >='" + fechaDesde.ToString(formatoFecha) + "' and DocDate <='" + fechaHasta.ToString(formatoFecha) + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocDate\" >=\'" + fechaDesde.ToString(formatoFecha) + "\' and \"DocDate\" <=\'" + fechaHasta.ToString(formatoFecha) + "\'";
                }

                if (!String.IsNullOrEmpty(numeroDesde.ToString()) && numeroDesde != 0 && !String.IsNullOrEmpty(numeroHasta.ToString()) && numeroHasta != 0) // Si pasa numeros desde y hasta filtra por ese rango
                {
                    if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                        query += " and DocNum >='" + numeroDesde.ToString() + "' and DocNum <='" + numeroHasta.ToString() + "'";
                    else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                        query += " and \"DocNum\" >=\'" + numeroDesde.ToString() + "\' and \"DocNum\" <=\'" + numeroHasta.ToString() + "\'";
                }

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += " order by DocNum";
                else if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                    query += " order by \"DocNum\"";

                oRSMyTable.DoQuery(query);
                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        DocumentoNOElectronico doc = new DocumentoNOElectronico();
                        double total = Convert.ToDouble(oRSMyTable.Fields.Item("DocTotal").Value);
                        int docEntry = Convert.ToInt32(oRSMyTable.Fields.Item("DocEntry").Value); // En el campo DocEntry carga el Codigo de Cuenta DGI
                        String cliente = oRSMyTable.Fields.Item("CardName").Value;
                        String tipo = oRSMyTable.Fields.Item("Tipo").Value;
                        int docNum = oRSMyTable.Fields.Item("DocNum").Value;
                        DateTime fecha = oRSMyTable.Fields.Item("DocDate").Value;

                        total = Math.Round(total, 2);

                        doc.Cliente = cliente;
                        doc.DocNum = docNum;
                        doc.Fecha = fecha.Date.ToShortDateString();
                        doc.DocEntry = docEntry;
                        doc.Monto = total;
                        doc.Tipo = tipo;
                        doc.Viaje = "";
                        docs.Add(doc);
                    }
                    catch (Exception ex)
                    { }
                    oRSMyTable.MoveNext();
                }

                return docs;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", "", "ERROR al Buscar Documentos para Enviar", ex.Message.ToString()); // Guarda log del Proceso

                return null;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        #endregion

        #region Formularios

        private void CargarFormulario()
        {
            try
            {
                oFormDatosPedido = SBO_Application.Forms.Item("ImprimirDocumento");
            }
            catch (Exception ex)
            {
                SAPbouiCOM.FormCreationParams fcp;
                fcp = SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_FormCreationParams);
                fcp.BorderStyle = SAPbouiCOM.BoFormBorderStyle.fbs_Sizable;
                fcp.FormType = "ImprimirDocumento";
                fcp.UniqueID = "ImprimirDocumento";
                try
                {
                    fcp.XmlData = LoadFromXML("ImprimirDocumentos.srf");

                    oFormDatosPedido = SBO_Application.Forms.AddEx(fcp);
                }
                catch (Exception exe)
                { }
            }

            try
            {
                DateTime fechaHoy = DateTime.Now;
                DateTime fechaAntes = DateTime.Now.AddDays(-1);

                SAPbouiCOM.EditText oStatic;
                oFormDatosPedido.DataSources.UserDataSources.Add("Date1", SAPbouiCOM.BoDataType.dt_DATE, 10);
                oFormDatosPedido.DataSources.UserDataSources.Add("Date2", SAPbouiCOM.BoDataType.dt_DATE, 10);
                oStatic = oFormDatosPedido.Items.Item("10").Specific; // Desde Fecha
                oStatic.DataBind.SetBound(true, "", "Date1");
                oStatic = oFormDatosPedido.Items.Item("12").Specific; // Hasta Fecha
                oStatic.DataBind.SetBound(true, "", "Date2");

                CargarGrilla();
                oFormDatosPedido.Visible = true;
            }
            catch (Exception ex)
            {
                //if (guardaLog == true)
                //    guardaLogProceso("", "", "ERROR al Cargar Grilla", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        private void CargarFormularioEnvDoc()
        {
            try
            {
                oFormEnviarDocumento = SBO_Application.Forms.Item("EnviarDocumento");
            }
            catch (Exception ex)
            {
                SAPbouiCOM.FormCreationParams fcp;
                fcp = SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_FormCreationParams);
                fcp.BorderStyle = SAPbouiCOM.BoFormBorderStyle.fbs_Sizable;
                fcp.FormType = "EnviarDocumento";
                fcp.UniqueID = "EnviarDocumento";
                try
                {
                    fcp.XmlData = LoadFromXML("EnviarDocumentos.srf");

                    oFormEnviarDocumento = SBO_Application.Forms.AddEx(fcp);
                }
                catch (Exception exe)
                { }
            }

            try
            {
                DateTime fechaHoy = DateTime.Now;
                DateTime fechaAntes = DateTime.Now.AddDays(-1);

                SAPbouiCOM.ComboBox oStaticCombo;
                oStaticCombo = oFormEnviarDocumento.Items.Item("18").Specific;
                llenarComboTiposDocumentos(oStaticCombo);

                SAPbouiCOM.EditText oStatic;
                oFormEnviarDocumento.DataSources.UserDataSources.Add("Date1", SAPbouiCOM.BoDataType.dt_DATE, 10);
                oFormEnviarDocumento.DataSources.UserDataSources.Add("Date2", SAPbouiCOM.BoDataType.dt_DATE, 10);
                oStatic = oFormEnviarDocumento.Items.Item("16").Specific; // Desde Fecha
                oStatic.DataBind.SetBound(true, "", "Date1");
                oStatic = oFormEnviarDocumento.Items.Item("10").Specific; // Hasta Fecha
                oStatic.DataBind.SetBound(true, "", "Date2");

                if (descEmpresa.Equals("MAVIN")) // Si es MAVIN carga el combo de Viajes
                {
                    oStaticCombo = oFormEnviarDocumento.Items.Item("cmbViaje").Specific;
                    llenarCombo(oStaticCombo, "select \"DocEntry\" as Code, \"DocNum\" as Name from [@VIAJES] order by \"Name\"", false, false, true);
                }
                else
                {
                    oStaticCombo = oFormEnviarDocumento.Items.Item("cmbViaje").Specific;
                    oStaticCombo.Item.Visible = false;
                    SAPbouiCOM.StaticText oText = oFormEnviarDocumento.Items.Item("lblViaje").Specific;
                    oText.Item.Visible = false;
                }

                CargarGrillaEnvDoc();
                oFormEnviarDocumento.Visible = true;
            }
            catch (Exception ex)
            {
                //if (guardaLog == true)
                //    guardaLogProceso("", "", "ERROR al Cargar Grilla", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        private void CargarFormularioConfigAddOn()
        {
            try
            {
                oFormConfigAddOn = SBO_Application.Forms.Item("ConfiguracionAddOn");
            }
            catch (Exception ex)
            {
                SAPbouiCOM.FormCreationParams fcp;
                fcp = SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_FormCreationParams);
                fcp.BorderStyle = SAPbouiCOM.BoFormBorderStyle.fbs_Sizable;
                fcp.FormType = "ConfiguracionAddOn";
                fcp.UniqueID = "ConfiguracionAddOn";
                try
                {
                    fcp.XmlData = LoadFromXML("ConfiguracionAddOn.srf");

                    oFormConfigAddOn = SBO_Application.Forms.AddEx(fcp);
                }
                catch (Exception exe)
                { }
            }

            try
            {
                DateTime fechaHoy = DateTime.Now;

                SAPbouiCOM.ComboBox oStaticCombo;
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbEmpresa").Specific;
                llenarComboEmpresas(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbPDF").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbQR").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbLog").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbCFE").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbEnvioA").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbCopiasC").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbRemitos").Specific;
                llenarComboConfiguraciones(oStaticCombo);
                oStaticCombo = oFormConfigAddOn.Items.Item("cmbResguar").Specific;
                llenarComboConfiguraciones(oStaticCombo);

                SAPbouiCOM.EditText oStatic;
                oFormConfigAddOn.DataSources.UserDataSources.Add("Date1", SAPbouiCOM.BoDataType.dt_DATE, 10);
                oStatic = oFormConfigAddOn.Items.Item("txtFechaIn").Specific; // Fecha Inicio
                oStatic.DataBind.SetBound(true, "", "Date1");

                CargarDatosFormularioConfig();
                oFormConfigAddOn.Visible = true;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", "", "ERROR al Cargar Formulario Configuracion", ex.Message.ToString()); // Guarda log del Proceso
            }
        }

        private void AddMenuItems()
        {
            SAPbouiCOM.Menus oMenus;
            SAPbouiCOM.MenuItem oMenuItem;
            oMenus = SBO_Application.Menus;

            if (!oMenus.Exists("FACT_SICFE"))
            {
                SAPbouiCOM.MenuCreationParams oCreationPackage;
                oCreationPackage = SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_MenuCreationParams);
                oMenuItem = SBO_Application.Menus.Item("43520"); // 43520

                sPath = System.Windows.Forms.Application.StartupPath;
                oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_POPUP;
                oCreationPackage.UniqueID = "FACT_SICFE";
                oCreationPackage.String = "Facturación Electrónica";
                oCreationPackage.Position = oMenuItem.SubMenus.Count + 1;

                oMenus = oMenuItem.SubMenus;

                try
                {
                    oMenus.AddEx(oCreationPackage);
                    oMenuItem = SBO_Application.Menus.Item("FACT_SICFE");
                    oMenus = oMenuItem.SubMenus;
                    oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_STRING;
                    oCreationPackage.UniqueID = "EnviarDocumento";
                    oCreationPackage.String = "Enviar Documentos Electronicos";
                    oMenus.AddEx(oCreationPackage);

                    oMenuItem = SBO_Application.Menus.Item("FACT_SICFE");
                    oMenus = oMenuItem.SubMenus;
                    oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_STRING;
                    oCreationPackage.UniqueID = "ImprimirDocumento";
                    oCreationPackage.String = "Imprimir Documentos Electrónicos";
                    oMenus.AddEx(oCreationPackage);

                    if (esSuperUsuario == true)
                    {
                        oMenuItem = SBO_Application.Menus.Item("FACT_SICFE");
                        oMenus = oMenuItem.SubMenus;
                        oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_STRING;
                        oCreationPackage.UniqueID = "ConfiguracionAddOn";
                        oCreationPackage.String = "Configuración de addOn";
                        oMenus.AddEx(oCreationPackage);
                    }

                }
                catch (Exception er)
                {
                    String msg = "";
                    if (er.Message.Equals("Menu - Already exists"))
                    {
                        msg = "Menú ya fue creado.";
                    }
                    else
                    {
                        msg = er.Message;
                    }
                }
            }
        }

        private void AddMenuItemsEnvDoc()
        {
            SAPbouiCOM.Menus oMenus;
            SAPbouiCOM.MenuItem oMenuItem;
            oMenus = SBO_Application.Menus;

            if (!oMenus.Exists("ENV_DOC"))
            {
                SAPbouiCOM.MenuCreationParams oCreationPackage;
                oCreationPackage = SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_MenuCreationParams);
                oMenuItem = SBO_Application.Menus.Item("43520");

                sPath = System.Windows.Forms.Application.StartupPath;
                oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_POPUP;
                oCreationPackage.UniqueID = "ENV_DOC";
                oCreationPackage.String = "Enviar Documentos";
                oCreationPackage.Position = oMenuItem.SubMenus.Count + 1;

                oMenus = oMenuItem.SubMenus;

                try
                {
                    oMenus.AddEx(oCreationPackage);
                    oMenuItem = SBO_Application.Menus.Item("ENV_DOC");
                    oMenus = oMenuItem.SubMenus;
                    oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_STRING;
                    oCreationPackage.UniqueID = "EnviarDocumento";
                    oCreationPackage.String = "Enviar Documentos Electronico";
                    oMenus.AddEx(oCreationPackage);
                }
                catch (Exception er)
                {
                    String msg = "";
                    if (er.Message.Equals("Menu - Already exists"))
                    {
                        msg = "Menú ya fue creado.";
                    }
                    else
                    {
                        msg = er.Message;
                    }
                }
            }
        }

        private void AddMenuItemsConfigAddOn()
        {
            SAPbouiCOM.Menus oMenus;
            SAPbouiCOM.MenuItem oMenuItem;
            oMenus = SBO_Application.Menus;

            if (!oMenus.Exists("CONF_ADD_SICFE"))
            {
                SAPbouiCOM.MenuCreationParams oCreationPackage;
                oCreationPackage = SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_MenuCreationParams);
                oMenuItem = SBO_Application.Menus.Item("43520");

                sPath = System.Windows.Forms.Application.StartupPath;
                oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_POPUP;
                oCreationPackage.UniqueID = "CONF_ADD_SICFE";
                oCreationPackage.String = "Configuración de addOn";
                oCreationPackage.Position = oMenuItem.SubMenus.Count + 1;

                oMenus = oMenuItem.SubMenus;

                try
                {
                    oMenus.AddEx(oCreationPackage);
                    oMenuItem = SBO_Application.Menus.Item("CONF_ADD_SICFE");
                    oMenus = oMenuItem.SubMenus;
                    oCreationPackage.Type = SAPbouiCOM.BoMenuType.mt_STRING;
                    oCreationPackage.UniqueID = "ConfiguracionAddOn";
                    oCreationPackage.String = "Configuración de addOn";
                    oMenus.AddEx(oCreationPackage);
                }
                catch (Exception er)
                {
                    String msg = "";
                    if (er.Message.Equals("Menu - Already exists"))
                    {
                        msg = "Menú ya fue creado.";
                    }
                    else
                    {
                        msg = er.Message;
                    }
                }
            }
        }

        private void AgregarClientesACombo()
        {
            if (!yaCargoClientes) // Si ya fueron cargados alguna vez no entra
            {
                SAPbouiCOM.ComboBox comboClientes = oFormDatosPedido.Items.Item("5").Specific;
                SAPbobsCOM.Recordset oRSMyTable = null;

                try
                {
                    oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);

                    oRSMyTable.DoQuery("SELECT * FROM OCRD WHERE CardType = 'C'");
                    while (!oRSMyTable.EoF)
                    {
                        String nombre = oRSMyTable.Fields.Item("CardName").Value;
                        String cod = oRSMyTable.Fields.Item("CardCode").Value;
                        comboClientes.ValidValues.Add(cod, nombre);
                        oRSMyTable.MoveNext();
                    }
                    yaCargoClientes = true; // Lo paso a true para saber que ya cargue los clientes
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                    oRSMyTable = null;
                    GC.Collect();
                }
                catch (Exception ex)
                {
                    if (oRSMyTable != null)
                    {
                        System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                    }
                    oRSMyTable = null;
                    GC.Collect();
                }
            }
        }

        private void CargarMatrix(int docNum, DateTime fechaDesde, DateTime fechaHasta)
        {
            SAPbouiCOM.Matrix matriz = null;
            try
            {
                if (oFormDatosPedido != null)
                {
                    matriz = oFormDatosPedido.Items.Item("2").Specific;
                }
                else
                {
                    oFormDatosPedido = SBO_Application.Forms.Item("OpenProject");
                    matriz = oFormDatosPedido.Items.Item("2").Specific;
                }

                List<DocumentoElectronico> docs = ObtenerDocumentosElectronicos(docNum, fechaDesde, fechaHasta);
                oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").Rows.Clear();
                oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").Rows.Add(docs.Count);
                int cont = 0;
                foreach (DocumentoElectronico doc in docs)
                {

                    oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").SetValue("ColNumDoc", cont, doc.DocNum);
                    oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").SetValue("ColFecha", cont, doc.fecha);
                    oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").SetValue("ColCliente", cont, doc.Cliente);
                    oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").SetValue("ColSerie", cont, doc.serie);
                    oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").SetValue("ColNumero", cont, doc.numero);
                    oFormDatosPedido.DataSources.DataTables.Item("DatosDoc").SetValue("ColTipo", cont, doc.tipo);
                    cont++;
                }

                matriz.Columns.Item("V_2").DataBind.Bind("DatosDoc", "ColNumDoc");
                matriz.Columns.Item("V_1").DataBind.Bind("DatosDoc", "ColFecha");
                matriz.Columns.Item("V_0").DataBind.Bind("DatosDoc", "ColCliente");
                matriz.Columns.Item("V_5").DataBind.Bind("DatosDoc", "ColSerie");
                matriz.Columns.Item("V_4").DataBind.Bind("DatosDoc", "ColNumero");
                matriz.Columns.Item("V_3").DataBind.Bind("DatosDoc", "ColTipo");
                matriz.LoadFromDataSource();
                matriz.AutoResizeColumns();
            }
            catch (Exception ex)
            {

            }
        }

        private void CargarMatrixEnvDoc(int docNum, DateTime fechaDesde, DateTime fechaHasta, int desdeNumero, int hastaNumero)
        {
            SAPbouiCOM.Matrix matriz = null;
            try
            {
                if (oFormEnviarDocumento != null)
                {
                    matriz = oFormEnviarDocumento.Items.Item("2").Specific;
                }
                else
                {
                    oFormEnviarDocumento = SBO_Application.Forms.Item("OpenProject");
                    matriz = oFormEnviarDocumento.Items.Item("2").Specific;
                }


                List<DocumentoNOElectronico> docs = ObtenerDocumentosNOElectronicos(docNum, fechaDesde, fechaHasta, desdeNumero, hastaNumero);
                oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").Rows.Clear();
                oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").Rows.Add(docs.Count);
                int cont = 0;
                foreach (DocumentoNOElectronico doc in docs)
                {
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColNumDoc", cont, doc.DocNum);
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColFecha", cont, doc.Fecha);
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColCliente", cont, doc.Cliente);
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColDocEntry", cont, doc.DocEntry);
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColMonto", cont, doc.Monto);
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColTipo", cont, doc.Tipo);
                    oFormEnviarDocumento.DataSources.DataTables.Item("DatosDoc").SetValue("ColViaje", cont, doc.Viaje);
                    cont++;
                }

                matriz.Columns.Item("V_2").DataBind.Bind("DatosDoc", "ColNumDoc");
                matriz.Columns.Item("V_1").DataBind.Bind("DatosDoc", "ColFecha");
                matriz.Columns.Item("V_0").DataBind.Bind("DatosDoc", "ColCliente");
                matriz.Columns.Item("V_5").DataBind.Bind("DatosDoc", "ColDocEntry");
                matriz.Columns.Item("V_4").DataBind.Bind("DatosDoc", "ColMonto");
                matriz.Columns.Item("V_3").DataBind.Bind("DatosDoc", "ColTipo");
                matriz.Columns.Item("V_6").DataBind.Bind("DatosDoc", "ColViaje");

                if (!descEmpresa.Equals("MAVIN"))
                    matriz.Columns.Item("V_6").Visible = false;

                matriz.LoadFromDataSource();
                matriz.AutoResizeColumns();

                SAPbouiCOM.StaticText oText;
                oText = oFormEnviarDocumento.Items.Item("22").Specific; // Cantidad de documentos
                oText.Caption = cont.ToString() + " documentos";
            }
            catch (Exception ex)
            { }
        }

        private void CargarGrilla()
        {
            try
            {
                SAPbouiCOM.EditText oStatic;
                oStatic = oFormDatosPedido.Items.Item("6").Specific;

                int num = 0;
                if (!String.IsNullOrEmpty(oStatic.String))
                    num = Convert.ToInt32(oStatic.String);

                DateTime fechaDesde = Convert.ToDateTime(DateTime.Now); //"01-01-1980"
                DateTime fechaHasta = Convert.ToDateTime(DateTime.Now);
                try
                {
                    oStatic = oFormDatosPedido.Items.Item("10").Specific; // Desde Fecha
                    if (String.IsNullOrEmpty(oStatic.String))
                        oStatic.String = fechaDesde.ToString("dd/MM/yyyy");

                    fechaDesde = Convert.ToDateTime(oStatic.String);

                    oStatic = oFormDatosPedido.Items.Item("12").Specific; // Hasta Fecha
                    if (String.IsNullOrEmpty(oStatic.String))
                        oStatic.String = fechaHasta.ToString("dd/MM/yyyy");

                    fechaHasta = Convert.ToDateTime(oStatic.String);
                }
                catch (Exception ex)
                { }

                CargarMatrix(num, fechaDesde, fechaHasta);
            }
            catch (Exception ex)
            { }
        }

        private void CargarGrillaEnvDoc()
        {
            try
            {
                SAPbouiCOM.EditText oStatic;
                //SAPbouiCOM.Form oForm = SBO_Application.Forms.GetForm("65303", 0);
                oStatic = oFormEnviarDocumento.Items.Item("6").Specific; // Numero del documento
                int num = 0;
                if (!String.IsNullOrEmpty(oStatic.String))
                    num = Convert.ToInt32(oStatic.String);

                int desde = 0; int hasta = 0;
                oStatic = oFormEnviarDocumento.Items.Item("12").Specific; // Desde numero
                if (!String.IsNullOrEmpty(oStatic.String))
                    desde = Convert.ToInt32(oStatic.String);
                oStatic = oFormEnviarDocumento.Items.Item("14").Specific; // Hasta numero
                if (!String.IsNullOrEmpty(oStatic.String))
                    hasta = Convert.ToInt32(oStatic.String);

                DateTime fechaDesde = Convert.ToDateTime(DateTime.Now); //"01-01-1980"
                DateTime fechaHasta = Convert.ToDateTime(DateTime.Now);
                try
                {
                    oStatic = oFormEnviarDocumento.Items.Item("16").Specific; // Desde Fecha
                    if (String.IsNullOrEmpty(oStatic.String))
                        oStatic.String = fechaDesde.ToString("dd/MM/yyyy");

                    fechaDesde = DateTime.ParseExact(oStatic.String, "dd/MM/yyyy", null);

                    oStatic = oFormEnviarDocumento.Items.Item("10").Specific; // Hasta Fecha
                    if (String.IsNullOrEmpty(oStatic.String))
                        oStatic.String = fechaHasta.ToString("dd/MM/yyyy");

                    fechaHasta = DateTime.ParseExact(oStatic.String, "dd/MM/yyyy", null);
                }
                catch (Exception ex)
                { }

                SAPbouiCOM.Button oButton; SAPbouiCOM.Button oButton2;
                oButton = oFormEnviarDocumento.Items.Item("100").Specific;

                // Boton de borrar log visible solo para usuario manager
                if (esSuperUsuario == true)
                {
                    oButton.Item.Visible = true;
                }
                else
                    oButton.Item.Visible = false;

                oButton = oFormEnviarDocumento.Items.Item("17").Specific;
                oButton2 = oFormEnviarDocumento.Items.Item("21").Specific; // Boton de enviar documento manualmente

                // Boton de dar baja manual al documento solo para usuario manager o Henry
                if (esSuperUsuario == true || usuarioLogueado.ToString().Equals("manager") || usuarioLogueado.ToString().Contains("Henry") || usuarioLogueado.ToString().Contains("hdistefa") || usuarioLogueado.ToString().Contains("Olivier") || usuarioLogueado.ToString().Contains("Ugarte"))
                {
                    oButton.Item.Visible = true;
                    oButton2.Item.Visible = true; // Boton de enviar documento manualmente
                }
                else
                {
                    oButton.Item.Visible = false;
                    oButton2.Item.Visible = false; // Boton de enviar documento manualmente
                }

                CargarMatrixEnvDoc(num, fechaDesde, fechaHasta, desde, hasta);
            }
            catch (Exception ex)
            { }
        }

        private void CargarDatosFormularioConfig()
        {
            try
            {
                SAPbouiCOM.EditText oStatic;
                oStatic = oFormConfigAddOn.Items.Item("txtUsuario").Specific;
                oStatic.Value = sicfeUser.ToString();
                oStatic = oFormConfigAddOn.Items.Item("txtClave").Specific;
                oStatic.Value = sicfePassword.ToString();
                oStatic = oFormConfigAddOn.Items.Item("txtTenant").Specific;
                oStatic.Value = sicfeTenant.ToString();
                oStatic = oFormConfigAddOn.Items.Item("txtRut").Specific;
                oStatic.Value = rucEmisorSicfe.ToString();
                oStatic = oFormConfigAddOn.Items.Item("txtRutaPDF").Specific;
                oStatic.Value = rutaDefecto.ToString();
                oStatic = oFormConfigAddOn.Items.Item("txtRutaQR").Specific;
                oStatic.Value = rutaDefectoQR.ToString();
                oStatic = oFormConfigAddOn.Items.Item("txtWebServ").Specific;
                oStatic.Value = sicfeRutaWS.ToString();

                SAPbouiCOM.ComboBox oCombo;
                oCombo = oFormConfigAddOn.Items.Item("cmbEmpresa").Specific;
                oCombo.Select(descEmpresa, BoSearchKey.psk_ByValue);

                string valor = "SI";
                oCombo = oFormConfigAddOn.Items.Item("cmbLog").Specific;
                if (guardaLog == false)
                    valor = "NO";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbCFE").Specific;
                if (guardaDatosRespCFE == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbPDF").Specific;
                if (imprimePDFDefecto == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbQR").Specific;
                if (guardaImagenQR == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbCopiasC").Specific;
                if (imprimre2ViasCredito == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbResguar").Specific;
                if (realizarResguardos == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbRemitos").Specific;
                if (realizarRemitos == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oCombo = oFormConfigAddOn.Items.Item("cmbEnvioA").Specific;
                if (enviaAuto == false)
                    valor = "NO";
                else
                    valor = "SI";
                oCombo.Select(valor, BoSearchKey.psk_ByValue);

                oStatic = oFormConfigAddOn.Items.Item("txtFechaIn").Specific;
                string fechaStr = fechaInicioFE.ToString("yyyyMMdd");
                /*fechaStr = fechaStr.Replace("-","");
                fechaStr = fechaStr.Replace("/", "");*/
                oStatic.Value = fechaStr.ToString();
            }
            catch (Exception ex)
            { }
        }

        // Llena el objeto ComboBox con los tipos de documentos
        private void llenarComboTiposDocumentos(SAPbouiCOM.ComboBox pCombo)
        {
            try
            {
                pCombo.ValidValues.Add("65304", "Boleta");
                pCombo.ValidValues.Add("180", "Devolución");
                pCombo.ValidValues.Add("182", "Devolución de Proveedor");
                pCombo.ValidValues.Add("143", "Entrada de Mercancías");
                pCombo.ValidValues.Add("140", "Entrega");
                pCombo.ValidValues.Add("133", "Fact de Deudores");
                pCombo.ValidValues.Add("60090", "Fact de Deudores + Pago");
                pCombo.ValidValues.Add("65307", "Fact de Exportación");
                pCombo.ValidValues.Add("60091", "Fact de Reserva");
                pCombo.ValidValues.Add("179", "Nota de Crédito");
                pCombo.ValidValues.Add("426", "Resguardo");
                pCombo.ValidValues.Add("99999", "Cancelacion de Resguardo");
                pCombo.ValidValues.Add("720", "Salida de Mercancías");

                if (realizarRemitos == true && (descEmpresa.ToString().Equals("DREG") || descEmpresa.ToString().Equals("MEDIT") || descEmpresa.ToString().Equals("POCHA"))) // Si es dreghal y tiene los remitos habilitados
                    pCombo.ValidValues.Add("940", "Transferencia de Stock");
            }
            catch (Exception ex)
            { }
        }

        // Llena el objeto ComboBox con los tipos de documentos
        private void llenarComboEmpresas(SAPbouiCOM.ComboBox pCombo)
        {
            try
            {
                pCombo.ValidValues.Add("ALMEN", "Almena");
                pCombo.ValidValues.Add("ANCAL", "Ancal");
                pCombo.ValidValues.Add("AEG", "Antel Arena");
                pCombo.ValidValues.Add("BOSCH", "Bosch");
                pCombo.ValidValues.Add("BRIGN", "Brignal");
                pCombo.ValidValues.Add("CABIN", "Cabinsur");
                pCombo.ValidValues.Add("CIMSA", "Cimsa");
                pCombo.ValidValues.Add("DEIMI", "Deimille");
                pCombo.ValidValues.Add("DREG", "Dreghal");
                pCombo.ValidValues.Add("ENGRW", "Engraw");
                pCombo.ValidValues.Add("ETARE", "Etarey");
                pCombo.ValidValues.Add("FITCO", "Fitco");
                pCombo.ValidValues.Add("FIOCI", "Fitco OCI");
                pCombo.ValidValues.Add("FRUTI", "Frutifor");
                pCombo.ValidValues.Add("GENIA", "Geniageo");
                pCombo.ValidValues.Add("HENDE", "Henderson");
                pCombo.ValidValues.Add("INVE2", "Invenzis");
                pCombo.ValidValues.Add("INVEN", "Marbus");
                pCombo.ValidValues.Add("MAVIN", "Mavin");
                pCombo.ValidValues.Add("MEDIT", "Meditian");
                pCombo.ValidValues.Add("MILDA", "Mildanur");
                pCombo.ValidValues.Add("MONTE", "Monte Noble");
                pCombo.ValidValues.Add("NAVIP", "Naviport");
                pCombo.ValidValues.Add("OBRIN", "Obrinel");
                pCombo.ValidValues.Add("OLDSO", "Oldson");
                pCombo.ValidValues.Add("OPRUM", "Oprumin");
                pCombo.ValidValues.Add("POCHA", "Granja Pocha");
                pCombo.ValidValues.Add("PORTV", "Portvan");
                pCombo.ValidValues.Add("PROND", "Prondil");
                pCombo.ValidValues.Add("PURAT", "Puratos");
                pCombo.ValidValues.Add("REMIL", "Remiler");
                pCombo.ValidValues.Add("RENOV", "Renovables");
                pCombo.ValidValues.Add("RURAL", "Almacen Rural");
                pCombo.ValidValues.Add("SCHIN", "Schindler");
                pCombo.ValidValues.Add("SOLGE", "Solgeo");
                pCombo.ValidValues.Add("TECHM", "TechMedical");
                pCombo.ValidValues.Add("TENTA", "La Tentacion");
                pCombo.ValidValues.Add("THRIF", "Thrifty");
                pCombo.ValidValues.Add("TORIN", "Torinese");
                pCombo.ValidValues.Add("TRIAL", "Trialand");
                pCombo.ValidValues.Add("TRIGE", "La Trigueña");
                pCombo.ValidValues.Add("UPR", "UPR");
                pCombo.ValidValues.Add("WELLS", "Wellsland");
                pCombo.ValidValues.Add("WYST", "Wystam");
            }
            catch (Exception ex)
            { }
        }

        // Llena el objeto ComboBox con los tipos de documentos
        private void llenarComboConfiguraciones(SAPbouiCOM.ComboBox pCombo)
        {
            try
            {
                pCombo.ValidValues.Add("SI", "Si");
                pCombo.ValidValues.Add("NO", "No");
            }
            catch (Exception ex)
            { }
        }

        private void llenarCombo(SAPbouiCOM.ComboBox pCombo, String pQuery, bool pSinRegistro, bool pBorrarRegistros, bool pTodosNinguno)
        {
            try
            {
                SAPbobsCOM.Recordset oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                oRSMyTable.DoQuery(pQuery);

                if (pBorrarRegistros == true)
                {
                    try
                    {
                        int cant = pCombo.ValidValues.Count;
                        for (int i = cant; i > 0; i--) // Elimino los datos que tenga para cargarlos nuevamente
                            pCombo.ValidValues.Remove(i - 1, SAPbouiCOM.BoSearchKey.psk_Index);
                    }
                    catch (Exception ex)
                    { }
                }

                while (!oRSMyTable.EoF)
                {
                    try
                    {
                        pCombo.ValidValues.Add(oRSMyTable.Fields.Item("Code").Value, oRSMyTable.Fields.Item("Name").Value);
                    }
                    catch (Exception ex)
                    { }
                    oRSMyTable.MoveNext();
                }

                if (pTodosNinguno == true)
                {
                    pCombo.ValidValues.Add("T", "Todos");
                    pCombo.ValidValues.Add("N", "Ning.");
                }

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
            catch (Exception ex)
            { }
        }
        #endregion

        #region General

        public bool ValidarRUC(String ruc)
        {
            bool result = false;
            try
            {
                long rucNro = long.Parse(ruc);
                long ckDigOri = rucNro - (rucNro / 10) * 10;
                int suma = 0;

                // Si cuando se pasa a numero queda de 7 u 8 caracteres quiere decir que es una Cedula y no un RUT
                if (rucNro.ToString().Length == 7 || rucNro.ToString().Length == 8)
                    result = validarCedulaUruguaya(rucNro.ToString()); // Verifica que sea una cedula correcta
                else
                {
                    suma += Int32.Parse(ruc.Substring(0, 1)) * 4;
                    suma += Int32.Parse(ruc.Substring(1, 1)) * 3;
                    suma += Int32.Parse(ruc.Substring(2, 1)) * 2;
                    suma += Int32.Parse(ruc.Substring(3, 1)) * 9;
                    suma += Int32.Parse(ruc.Substring(4, 1)) * 8;
                    suma += Int32.Parse(ruc.Substring(5, 1)) * 7;
                    suma += Int32.Parse(ruc.Substring(6, 1)) * 6;
                    suma += Int32.Parse(ruc.Substring(7, 1)) * 5;
                    suma += Int32.Parse(ruc.Substring(8, 1)) * 4;
                    suma += Int32.Parse(ruc.Substring(9, 1)) * 3;
                    suma += Int32.Parse(ruc.Substring(10, 1)) * 2;

                    int resto = suma - (suma / 11) * 11;
                    int chkDigOk = 11 - resto;

                    if (chkDigOk == 11)
                    {
                        chkDigOk = 0;
                    }
                    else if (chkDigOk == 10)
                    {
                        chkDigOk = -1;
                    }
                    int primerosDigitos = Int32.Parse(ruc.Substring(0, 2));
                    int otrosDigitos = Int32.Parse(ruc.Substring(2, 6));
                    if (chkDigOk == ckDigOri && primerosDigitos >= 1 && primerosDigitos <= 21 && otrosDigitos >= 1 && otrosDigitos <= 999999)
                    {
                        result = true;
                    }
                }
            }
            catch
            {
                return false;
            }


            return result;
        }

        //public bool validarCedulaUruguaya(string cedula)
        //{
        //    bool res = false;
        //    try
        //    {
        //        // Verifica que la c.i ingresada corresponda a una c.i verdadera
        //        char[] arrayCi = cedula.ToCharArray();
        //        int aux;
        //        aux = ((Convert.ToInt32(arrayCi[0].ToString()) * 8) + ((Convert.ToInt32(arrayCi[1].ToString()) * 1) + ((Convert.ToInt32(arrayCi[2].ToString()) * 2) + ((Convert.ToInt32(arrayCi[3].ToString()) * 3) + ((Convert.ToInt32(arrayCi[4].ToString()) * 4) + ((Convert.ToInt32(arrayCi[5].ToString()) * 7) + ((Convert.ToInt32(arrayCi[6].ToString()) * 6))))))));
        //        aux = aux % 10;
        //        if (aux == Convert.ToInt32(arrayCi[7].ToString()))
        //        {
        //            res = true;
        //        }
        //        return res;
        //    }
        //    catch (Exception ex)
        //    { }
        //    return res;
        //}

        private bool validarCedulaUruguaya(string pNumero)
        {
            try
            {
                //Control inicial sobre la cantidad de números ingresados. 
                if (pNumero.ToString().Length == 8 || pNumero.ToString().Length == 7)
                {
                    //return true;
                    int[] _formula = { 2, 9, 8, 7, 6, 3, 4 };
                    int _suma = 0;
                    int _guion = 0;
                    int _aux = 0;
                    int[] _numero = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };

                    if (pNumero.ToString().Length == 8)
                    {
                        _numero[0] = Convert.ToInt32(pNumero.ToString()[0].ToString());
                        _numero[1] = Convert.ToInt32(pNumero.ToString()[1].ToString());
                        _numero[2] = Convert.ToInt32(pNumero.ToString()[2].ToString());
                        _numero[3] = Convert.ToInt32(pNumero.ToString()[3].ToString());
                        _numero[4] = Convert.ToInt32(pNumero.ToString()[4].ToString());
                        _numero[5] = Convert.ToInt32(pNumero.ToString()[5].ToString());
                        _numero[6] = Convert.ToInt32(pNumero.ToString()[6].ToString());
                        _numero[7] = Convert.ToInt32(pNumero.ToString()[7].ToString());
                    }

                    //Para cédulas menores a un millón. 
                    else if (pNumero.ToString().Length == 7)
                    {
                        _numero[0] = 0;
                        _numero[1] = Convert.ToInt32(pNumero.ToString()[0].ToString());
                        _numero[2] = Convert.ToInt32(pNumero.ToString()[1].ToString());
                        _numero[3] = Convert.ToInt32(pNumero.ToString()[2].ToString());
                        _numero[4] = Convert.ToInt32(pNumero.ToString()[3].ToString());
                        _numero[5] = Convert.ToInt32(pNumero.ToString()[4].ToString());
                        _numero[6] = Convert.ToInt32(pNumero.ToString()[5].ToString());
                        _numero[7] = Convert.ToInt32(pNumero.ToString()[6].ToString());
                    }

                    _suma = (_numero[0] * _formula[0]) + (_numero[1] * _formula[1]) + (_numero[2] * _formula[2]) + (_numero[3] * _formula[3]) + (_numero[4] * _formula[4]) + (_numero[5] * _formula[5]) + (_numero[6] * _formula[6]);

                    for (int i = 0; i < 10; i++)
                    {
                        _aux = _suma + i;
                        if (_aux % 10 == 0)
                        {
                            _guion = _aux - _suma;
                            i = 10;
                        }
                    }

                    if (_numero[7] == _guion)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                    //throw new Exception("La Cédula debe tener 7 u 8 caractéres.");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public CodPaisType getCodPais(string pCodPais)
        {
            CodPaisType pais = new CodPaisType();
            try
            {
                if (pCodPais.Equals("UY") || pCodPais.Equals("uy") || pCodPais.Equals("Uruguay") || pCodPais.Equals("URUGUAY"))
                    pais = CodPaisType.UY;
                else if (pCodPais.Equals("BR")) // Brasil
                    pais = CodPaisType.BR;
                else if (pCodPais.Equals("AR")) // Argentina
                    pais = CodPaisType.AR;
                else if (pCodPais.Equals("DK")) // Dinamarca
                    pais = CodPaisType.DK;
                else if (pCodPais.Equals("CL")) // Chile
                    pais = CodPaisType.CL;
                else if (pCodPais.Equals("BE")) // Belgica
                    pais = CodPaisType.BE;
                else if (pCodPais.Equals("US")) // Usa
                    pais = CodPaisType.US;
                else if (pCodPais.Equals("BO")) // Bolivia
                    pais = CodPaisType.BO;
                else if (pCodPais.Equals("CN")) // China
                    pais = CodPaisType.CN;
                else if (pCodPais.Equals("CO")) // Colombia
                    pais = CodPaisType.CO;
                else if (pCodPais.Equals("EC")) // Ecuador
                    pais = CodPaisType.EC;
                else if (pCodPais.Equals("PY")) // Paraguay
                    pais = CodPaisType.PY;
                else if (pCodPais.Equals("MX")) // Mexico
                    pais = CodPaisType.MX;
                else if (pCodPais.Equals("ES")) // España
                    pais = CodPaisType.ES;
                else if (pCodPais.Equals("DE")) // Alemania
                    pais = CodPaisType.DE;
                else if (pCodPais.Equals("AE")) // Emiratos Árabes
                    pais = CodPaisType.AE;
                else if (pCodPais.Equals("CH")) // Suiza
                    pais = CodPaisType.CH;
                else if (pCodPais.Equals("BM")) // Bermudas
                    pais = CodPaisType.BM;
                else if (pCodPais.Equals("BS")) // Bahamas
                    pais = CodPaisType.BS;
                else if (pCodPais.Equals("CY")) // Chipre
                    pais = CodPaisType.CY;
                else if (pCodPais.Equals("DZ")) // Argel
                    pais = CodPaisType.DZ;
                else if (pCodPais.Equals("EG")) // Egipto
                    pais = CodPaisType.EG;
                else if (pCodPais.Equals("FR")) // Francia
                    pais = CodPaisType.FR;
                else if (pCodPais.Equals("GB")) // Reino Unido
                    pais = CodPaisType.GB;
                else if (pCodPais.Equals("HK")) // Hong Kong
                    pais = CodPaisType.HK;
                else if (pCodPais.Equals("IE")) // Irlanda
                    pais = CodPaisType.IE;
                else if (pCodPais.Equals("IN")) // India
                    pais = CodPaisType.IN;
                else if (pCodPais.Equals("JO")) // Jordania
                    pais = CodPaisType.JO;
                else if (pCodPais.Equals("LV")) // Letonia
                    pais = CodPaisType.LV;
                else if (pCodPais.Equals("MT")) // Malta
                    pais = CodPaisType.MT;
                else if (pCodPais.Equals("NL")) // Países Bajos
                    pais = CodPaisType.NL;
                else if (pCodPais.Equals("NO")) // Noruega
                    pais = CodPaisType.NO;
                else if (pCodPais.Equals("OM")) // Omán
                    pais = CodPaisType.OM;
                else if (pCodPais.Equals("PA")) // Panamá
                    pais = CodPaisType.PA;
                else if (pCodPais.Equals("PL")) // Polonia
                    pais = CodPaisType.PL;
                else if (pCodPais.Equals("QA")) // Qatar
                    pais = CodPaisType.QA;
                else if (pCodPais.Equals("RU")) // Rusia
                    pais = CodPaisType.RU;
                else if (pCodPais.Equals("SG")) // Singapur
                    pais = CodPaisType.SG;
                else if (pCodPais.Equals("TN")) // Túnez
                    pais = CodPaisType.TN;
                else if (pCodPais.Equals("VG")) // Islás Vírgenes
                    pais = CodPaisType.VG;
                else
                    pais = CodPaisType.Item99;

                return pais;
            }
            catch (Exception ex)
            { }
            return pais;
        }

        private bool generarImagenQR(string pTextoQR, string pDocEntry, string pDocNum)
        {
            bool res = false;
            try
            {
                QRCodeEncoder generarCodigoQR = new QRCodeEncoder();
                Int32 colorFondoQR = Color.FromArgb(255, 255, 255, 255).ToArgb();
                Int32 colorQR = Color.FromArgb(255, 0, 0, 0).ToArgb();

                generarCodigoQR.QRCodeEncodeMode = ThoughtWorks.QRCode.Codec.QRCodeEncoder.ENCODE_MODE.BYTE;

                generarCodigoQR.QRCodeScale = 4;

                generarCodigoQR.QRCodeErrorCorrect = ThoughtWorks.QRCode.Codec.QRCodeEncoder.ERROR_CORRECTION.M;

                generarCodigoQR.QRCodeVersion = 0;

                generarCodigoQR.QRCodeBackgroundColor = System.Drawing.Color.FromArgb(colorFondoQR);

                generarCodigoQR.QRCodeForegroundColor = System.Drawing.Color.FromArgb(colorQR);

                Image imgrQR = generarCodigoQR.Encode(pTextoQR);

                var rutaQR = rutaDefectoQR.ToString() + "\\\\" + "QR" + pDocEntry + "-" + pDocNum + ".jpg";

                try
                {
                    if (!Directory.Exists(rutaDefectoQR.ToString())) // Si no existe la carpeta donde se guardan los QR la crea
                        Directory.CreateDirectory(rutaDefectoQR.ToString());
                }
                catch (Exception ex)
                {
                    if (guardaLog == true)
                        guardaLogProceso("", codigoFactura, "ERROR al guardar el QR del Documento", ex.Message.ToString()); // Guarda log del Proceso
                    if (!Directory.Exists(rutaDefectoQR.ToString().Replace("\\\\", "\\"))) // Si no existe la carpeta donde se guardan los QR la crea
                        Directory.CreateDirectory(rutaDefectoQR.ToString().Replace("\\\\", "\\"));
                    rutaQR = rutaQR.ToString().Replace("\\\\", "\\");
                    if (guardaLog == true)
                        guardaLogProceso("", codigoFactura, "ERROR al guardar el QR del Documento, catch 1", ex.Message.ToString()); // Guarda log del Proceso
                }

                //imgrQR.Save(Application.StartupPath + "\\\\qr.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);

                if (File.Exists(rutaQR)) // Si ya existe un archivo con el mismo nombre lo borra
                    File.Delete(rutaQR);

                imgrQR.Save(rutaQR, System.Drawing.Imaging.ImageFormat.Jpeg);

                res = true;
                return res;
            }
            catch (Exception ex)
            {
                if (guardaLog == true)
                    guardaLogProceso("", codigoFactura, "ERROR al guardar el QR del Documento, catch 2", ex.Message.ToString()); // Guarda log del Proceso
            }
            return res;
        }

        // Crea un archivo CSV diario con el log de los envios electronicos. 
        public bool guardarOperacionCSV(string pDocEntry, string pObjType, string pOperacion)
        {
            bool res = false;
            try
            {
                if (descEmpresa.ToString().Equals("RURAL") && guardaLog == true)
                {
                    string nombreFile = DateTime.Now.ToString("yyyyMMdd");
                    nombreFile = rutaDefecto + @"\Logs_AddOnFE\" + nombreFile + ".csv";
                    string linea = pObjType.ToString() + ";" + pDocEntry.ToString() + ";" + pOperacion + ";" + DateTime.Now.ToString("HH:mm:ss");
                    if (File.Exists(nombreFile) == false)
                    {
                        StreamWriter stream = new StreamWriter(nombreFile, false, Encoding.Default);
                        stream.WriteLine(linea);
                        stream.Close();
                        stream.Dispose();
                    }
                    else
                    {
                        File.AppendAllText(nombreFile, linea.ToString() + Environment.NewLine);
                    }

                    res = true;
                }
                return res;
            }
            catch (Exception ex)
            { }
            return res;
        }
        #endregion

        // Obtengo el Objeto Documento con sus respectivas líneas
        public clsObjDocumento obtenerObjetoDocumento(int pDocEntry, int pDocNum, string pFormFactura, bool pAgrupado)
        {
            clsObjDocumento objDoc = new clsObjDocumento();
            SAPbobsCOM.Recordset oRSMyTable = null;
            try
            {
                string tabla = "OINV"; string tablaLineas = "INV1"; string filtroAdicional = ""; string camposAdicionales = "";

                //if (descEmpresa.ToString().Equals("RURAL"))
                //    pAgrupado = true; // QUITAR AGRUPACIÓN. ASPL. 2020-03-08, Solicitado por Deyanira G.

                if (descEmpresa.ToString().Equals("TRIAL"))
                    pAgrupado = true;

                #region "Filtros y tabla"

                string caseSwitch = pFormFactura;
                switch (caseSwitch)
                {
                    case "133":
                        filtroAdicional = " and DocSubType <> 'DN'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            filtroAdicional = " and \"DocSubType\" <> \'DN\'";
                        break;
                    case "60090":
                        filtroAdicional = " and DocSubType <> 'DN'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            filtroAdicional = " and \"DocSubType\" <> \'DN\'";
                        break;
                    case "60091":
                        filtroAdicional = " and DocSubType <> 'DN'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            filtroAdicional = " and \"DocSubType\" <> \'DN\'";
                        break;
                    case "65304":
                        filtroAdicional = " and DocSubType = 'IB'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            filtroAdicional = " and \"DocSubType\" = \'IB\'";
                        break;
                    case "65307":
                        filtroAdicional = " and DocSubType = 'IX'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            filtroAdicional = " and \"DocSubType\" = \'IX\'";
                        break;
                    case "65303":
                        filtroAdicional += " and DocSubType = 'DN'";
                        if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            filtroAdicional += " and \"DocSubType\" = \'DN\'";
                        break;
                    case "179":
                        tabla = "ORIN"; tablaLineas = "RIN1";
                        break;
                    case "140":
                        tabla = "ODLN"; tablaLineas = "DLN1";
                        break;
                    case "143":
                        tabla = "OPDN"; tablaLineas = "PDN1";
                        break;
                    case "940":
                        tabla = "OWTR"; tablaLineas = "WTR1";
                        break;
                    case "426":
                        tabla = "OVPM"; tablaLineas = "VPM2";
                        break;
                    case "182":
                        tabla = "ORPD"; tablaLineas = "RPD1";
                        break;
                    case "180":
                        tabla = "ORDN"; tablaLineas = "RDN1";
                        break;
                    case "141":
                        tabla = "OPCH"; tablaLineas = "PCH1";
                        break;
                    case "181":
                        tabla = "ORPC"; tablaLineas = "RPC1";
                        break;
                    case "720":
                        tabla = "OIGE"; tablaLineas = "IGE1";
                        break;
                    case "170":
                        tabla = "ORCT"; tablaLineas = "RCT2";
                        break;
                    default:
                        tabla = "OINV"; tablaLineas = "INV1";
                        break;
                }
                #endregion

                if (descEmpresa.ToString().Equals("TRIGE"))
                    camposAdicionales += ", isnull(U_NroAcuerdo, '') as U_NroAcuerdo ";

                oRSMyTable = oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset);
                string query = "select top 1 o.DocNum, o.DocEntry, o.ObjType, o.CardCode, o.CardName, o.DocDate, o.DocDueDate, o.TaxDate, o.LicTradNum, o.Address, " +
                "o.Address2, o.UserSign, o.UserSign2 , o.DiscPrcnt, isnull(o.U_IDCOMPRA, '') as U_IDCOMPRA, o.DocType, o.Comments, mp.Name as MedioPago " + camposAdicionales +
                "from " + tabla + " as o " +
                "left join [@ADDMEDIOSPAGOS] as mp on mp.Code = o.U_MEDIO_PAGO_DGI " +
                "where o.DocNum = '" + pDocNum + "' " + filtroAdicional + " order by o.DocEntry desc";

                if (caseSwitch.Equals("170"))
                {
                    query = "select top 1 o.DocNum, o.DocEntry, o.ObjType, o.CardCode, o.CardName, o.DocDate, o.DocDueDate, o.TaxDate, o.Address, " +
                "o.UserSign, o.UserSign2, '' as U_IDCOMPRA, o.DocType, o.Comments, " +
                "T1.LicTradNum " +
                "from " + tabla + " as o " +
                "INNER JOIN dbo.OCRD AS T1 ON T1.CardCode = o.CardCode " +
                "where o.DocNum = '" + pDocNum + "' " + filtroAdicional + " order by o.DocEntry desc";
                }

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select top 1 o.\"DocNum\", o.\"DocEntry\", o.\"ObjType\", o.\"CardCode\", o.\"CardName\", o.\"DocDate\", o.\"DocDueDate\", o.\"TaxDate\", o.\"LicTradNum\", o.\"Address\", " +
                    "o.\"Address2\", o.\"UserSign\", o.\"UserSign2\", o.\"DiscPrcnt\", o.\"U_IDCOMPRA\", o.\"DocType\", o.\"Comments\", mp.\"Name\" as MedioPago " + camposAdicionales +
                    "from \"" + tabla + "\" as o " +
                    "left join \"@ADDMEDIOSPAGOS\" as mp on mp.\"Code\" = o.\"U_MEDIO_PAGO_DGI\" " +
                    "Where o.\"DocNum\" = \'" + pDocNum + "\' " + filtroAdicional + " order by o.\"DocEntry\" desc";
                }

                oRSMyTable.DoQuery(query);
                if (oRSMyTable != null)
                {
                    if (oRSMyTable.RecordCount != 0)
                    {
                        while (!oRSMyTable.EoF)
                        {
                            objDoc.DocEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                            objDoc.DocNum = oRSMyTable.Fields.Item("DocNum").Value;
                            objDoc.ObjType = oRSMyTable.Fields.Item("ObjType").Value;
                            objDoc.RutFactura = oRSMyTable.Fields.Item("LicTradNum").Value;
                            objDoc.CardCode = oRSMyTable.Fields.Item("CardCode").Value;
                            objDoc.DireccionFactura = oRSMyTable.Fields.Item("Address").Value; // Dirección fiscal de la factura
                            if (!caseSwitch.Equals("170"))
                                objDoc.DireccionEntrega = oRSMyTable.Fields.Item("Address2").Value; // Dirección de entrega de la factura
                            //objDoc.GLN = oRSMyTable.Fields.Item("GlblLocNum").Value; // Tendria que salir de un Join con Socio de negocios
                            objDoc.UserSign = oRSMyTable.Fields.Item("UserSign").Value;
                            objDoc.UserSign2 = oRSMyTable.Fields.Item("UserSign2").Value;
                            if (!caseSwitch.Equals("170"))
                                objDoc.DescuentoDocPorcentaje = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                            if (!caseSwitch.Equals("170"))
                                objDoc.U_IdCompra = oRSMyTable.Fields.Item("U_IDCOMPRA").Value;
                            objDoc.DocType = oRSMyTable.Fields.Item("DocType").Value;
                            if (!caseSwitch.Equals("170"))
                                objDoc.MedioPago = oRSMyTable.Fields.Item("MedioPago").Value;
                            objDoc.GastoAdiMonto = 0;
                            objDoc.Comments = oRSMyTable.Fields.Item("Comments").Value;

                            if (descEmpresa.ToString().Equals("TRIGE"))
                                objDoc.U_NumeroAcuerdo = oRSMyTable.Fields.Item("U_NroAcuerdo").Value;

                            if (descEmpresa.ToString().Equals("POCHA")) // Valida si Hay Gastos adicionales
                            {
                                try
                                {
                                    objDoc.U_CanalVenta = ObtenerClienteCanalVentaPocha(objDoc.CardCode, "C");
                                    //if (objDoc.U_CanalVenta.Equals("01") || objDoc.U_CanalVenta.Equals("02"))
                                    //    objDoc.U_IdCompra = obtenerComentarioPedido(objDoc.DocEntry); //ASPL - 2019.11.06, Comentado por solicitud de error en largo de caracteres (55).

                                    clsObjDocumento docGasto = obtenerGastosAdicionalesPocha(pDocNum.ToString(), pFormFactura.ToString());
                                    if (docGasto != null && !String.IsNullOrEmpty(docGasto.GastoAdiCodigo))
                                    {
                                        objDoc.GastoAdiCodigo = docGasto.GastoAdiCodigo;
                                        //objDoc.GastoAdiDesc = docGasto.GastoAdiDesc;
                                        objDoc.GastoAdiMonto = docGasto.GastoAdiMonto;
                                    }
                                }
                                catch (Exception ex)
                                { guardaLogProceso(pFormFactura.ToString(), pDocEntry.ToString() + "_" + pDocNum.ToString(), "ERROR al obtener Gasto Adi GPocha", ex.Message.ToString()); } // Guarda log del Proceso
                            }

                            oRSMyTable.MoveNext();
                        }

                        if (pAgrupado == false || objDoc.DocType.Equals("S")) // Si no es Agrupado o si es Servicio
                        {
                            // Buscos las líneas
                            query = "select lin.DocEntry, lin.LineNum, lin.ItemCode, lin.Dscription, lin.unitMsr, lin.FreeTxt , lin.Currency, lin.Rate, lin.TaxCode, lin.DiscPrcnt, " +
                            "lin.Quantity, lin.InvQty, lin.Price, lin.PriceBefDi, lin.LineTotal, lin.TotalFrgn, lin.VatSum, lin.VatSumFrgn, lin.BaseDocNum, lin.VisOrder,  " +
                            "o.ItemName, o.CodeBars , o.InvntItem , o.UserText, imp.Rate as PorcIVA, o.SalPackUn, o.SalUnitMsr, lin.PackQty, o.UgpEntry ";

                            if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            {
                                query = "select lin.\"DocEntry\", lin.\"LineNum\", lin.\"ItemCode\", lin.\"Dscription\", lin.\"unitMsr\", lin.\"FreeTxt\" , lin.\"Currency\", lin.\"Rate\", lin.\"TaxCode\", lin.\"DiscPrcnt\", " +
                                "lin.\"Quantity\", lin.\"InvQty\", lin.\"Price\", lin.\"PriceBefDi\", lin.\"LineTotal\", lin.\"TotalFrgn\", lin.\"VatSum\", lin.\"VatSumFrgn\", lin.\"BaseDocNum\", lin.\"VisOrder\", " +
                                "o.\"ItemName\", o.\"CodeBars\" , o.\"InvntItem\" , o.\"UserText\", imp.\"Rate\" as PorcIVA, o.\"SalPackUn\", o.\"SalUnitMsr\", lin.\"PackQty\", o.\"UgpEntry\" ";
                            }

                            // Acá agrego los campos de usuario de cada empresa
                            if (descEmpresa.ToString().Equals("POCHA"))
                                query += ", \"U_RONDANET\", \"QryGroup3\", \"ItmsGrpCod\" ";
                            else if (descEmpresa.ToString().Equals("TRIGE"))
                                query += ", isnull(o.U_NroDeclaracion, '') as U_NroDeclaracion, SVolume, SWeight1, isnull(o.U_KGSBRUTOS, 0) as U_KGSBRUTOS, isnull(fam.U_CodeNCM, '') as CodeNCM ";
                            else if (descEmpresa.ToString().Equals("PORTV"))
                                query += ", U_Marca ";
                            else if (descEmpresa.ToString().Equals("RURAL"))
                            {
                                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                    query += ", T7.\"IntrSerial\", T5.\"BatchNum\", (CASE WHEN IFNULL(T5.\"BatchNum\",'') = '' THEN 0 ELSE T5.\"Quantity\" END) as CantLote, CASE WHEN o.\"ManBtchNum\" = 'Y' AND T8.\"U_Familia\" <> 'J' THEN T5.\"BatchNum\" WHEN o.\"ManSerNum\" = 'Y' THEN T7.\"IntrSerial\" ELSE lin.\"U_LOTE\" END AS LoteBatchNum ";
                                else
                                    query += ", T7.IntrSerial, T5.BatchNum, (CASE WHEN ISNULL(T5.BatchNum,'') = '' THEN 0 ELSE T5.Quantity END) as CANTLOTE, CASE WHEN o.ManBtchNum = 'Y' AND T8.U_Familia <> 'J' THEN T5.BatchNum WHEN o.ManSerNum = 'Y' THEN T7.IntrSerial ELSE lin.U_LOTE END AS LoteBatchNum ";
                            }
                            else if (descEmpresa.ToString().Equals("CABIN"))
                            {
                                query += ", T5.BatchNum, (CASE WHEN ISNULL(T5.BatchNum,'') = '' THEN 0 ELSE T5.Quantity END) as CANTLOTE, T5.BatchNum AS LoteBatchNum, T6.ExpDate ";
                            }
                            else if (descEmpresa.ToString().Equals("MILDA"))
                                query += ", U_Marca, U_Campana, U_UBICACION, U_Inicio, U_Fin ";
                            else if (descEmpresa.ToString().Equals("TRIAL"))
                                query += ", isnull(U_EXX_ITEMFACTURA, '') as ItemFactura ";
                            else if (descEmpresa.ToString().Equals("ENGRW") && !pFormFactura.ToString().Equals("141") && !pFormFactura.ToString().Equals("181"))
                            {
                                if (!pFormFactura.ToString().Equals("140")) // Si no es Remitos ni Boleta Entrada
                                    query += ", isnull(U_FEDescripcion, '') as U_FEDescripcion, isnull(U_KgsAcond,0) as U_KgsAcond, T5.ItemCode as LoteItemCode, Left (T5.BatchNum,7) as LoteBatchNum ";
                                else
                                    query += ", isnull(U_FEDescripcion, '') as U_FEDescripcion, isnull(U_KgsAcond,0) as U_KgsAcond, T5.ItemCode as LoteItemCode, Left (T5.BatchNum,8) as LoteBatchNum ";
                            }

                            string innerOITM = "inner ";
                            if (objDoc.DocType.Equals("S"))
                                innerOITM = "left ";

                            if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                            {
                                query += "from " + tablaLineas + " as lin  " +
                                innerOITM + " join OITM as o on o.ItemCode = lin.ItemCode " +
                                "LEFT JOIN OSTC as imp on imp.Code = lin.TaxCode ";
                            }
                            else
                            {
                                query += "from \"" + tablaLineas + "\" as lin  " +
                                innerOITM + " join \"OITM\" as o on o.\"ItemCode\" = lin.\"ItemCode\" " +
                                "LEFT JOIN \"OSTC\" as imp on imp.\"Code\" = lin.\"TaxCode\" ";
                            }

                            if (descEmpresa.ToString().Equals("TRIGE"))
                            {
                                query += "LEFT JOIN OITB as grp ON grp.ItmsGrpCod = o.ItmsGrpCod " +
                                    "LEFT JOIN [@FAMILIA] as fam on fam.Code = grp.U_FAMILIA ";
                            }
                            else if (descEmpresa.ToString().Equals("RURAL"))
                            {
                                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                                    query += "LEFT JOIN \"IBT1\" T5 ON T5.\"BaseEntry\" = lin.\"DocEntry\" and T5.\"ItemCode\" = lin.\"ItemCode\" and T5.\"BaseType\" = lin.\"ObjType\" and T5.\"BaseLinNum\" = lin.\"LineNum\" " +
                                             "LEFT JOIN \"SRI1\" T6 ON lin.\"ItemCode\" = T6.\"ItemCode\" AND T6.\"BaseEntry\" = lin.\"DocEntry\" and T6.\"BaseLinNum\" = lin.\"LineNum\" " +
                                             "LEFT JOIN \"OSRI\" T7 ON T7.\"ItemCode\" = T6.\"ItemCode\" and T7.\"SysSerial\" = T6.\"SysSerial\" " +
                                             "LEFT JOIN \"OITB\" T8 ON T8.\"ItmsGrpCod\" = o.\"ItmsGrpCod\" ";
                                else
                                    query += "LEFT JOIN IBT1 T5 ON T5.BaseEntry = lin.Docentry and T5.Itemcode = lin.Itemcode and T5.Basetype = lin.ObjType and T5.BaseLinNum = lin.Linenum " +
                                             "LEFT JOIN SRI1 T6 ON lin.ItemCode = T6.ItemCode AND T6.BaseEntry = lin.DocEntry and T6.BaseLinNum = lin.LineNum " +
                                             "LEFT JOIN OSRI T7 ON T7.ItemCode = T6.ItemCode and T7.SysSerial = T6.SysSerial " +
                                             "LEFT JOIN OITB T8 ON T8.ItmsGrpCod = o.ItmsGrpCod ";
                            }
                            else if (descEmpresa.ToString().Equals("CABIN"))
                            {
                                query += "LEFT JOIN IBT1 T5 ON T5.BaseEntry = lin.Docentry and T5.Itemcode = lin.Itemcode and T5.Basetype = lin.ObjType and T5.BaseLinNum = lin.Linenum " +
                                         "LEFT JOIN OBTN T6 ON T6.DistNumber = T5.BatchNum ";
                            }
                            else if (descEmpresa.ToString().Equals("ENGRW") && !pFormFactura.ToString().Equals("141") && !pFormFactura.ToString().Equals("181"))
                                query += "LEFT JOIN IBT1 T5 ON T5.BaseEntry = lin.Docentry and T5.Itemcode = lin.Itemcode and T5.Basetype = lin.ObjType and T5.BaseLinNum = lin.Linenum and T5.Direction=1 ";

                            if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                                query += "where lin.DocEntry = (select top 1 DocEntry from " + tabla + " where DocNum = '" + pDocNum + "' " + filtroAdicional + " order by DocEntry desc) ";
                            else
                                query += "where lin.\"DocEntry\" = (select top 1 \"DocEntry\" from \"" + tabla + "\" where \"DocNum\" = '" + pDocNum + "' " + filtroAdicional + " order by \"DocEntry\" desc) ";

                            if (descEmpresa.ToString().Equals("MAVIN"))
                                query += " and lin.TreeType <> 'I' ";

                            //query += " order by lin.\"VisOrder\"";

                            //if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                            //{
                            //    query = "select top 1 \"DocNum\", \"DocEntry\", \"ObjType\", \"CardCode\", \"CardName\", \"DocDate\", \"DocDueDate\", \"TaxDate\", \"LicTradNum\", \"Address\" " +
                            //    "\"Address2\", \"U_IDCOMPRA\" " +
                            //    "from \"" + tabla + "\" where \"DocNum\" = \'" + pDocNum + "\' " + filtroAdicional + " order by \"DocEntry\" desc";
                            //}

                            if (pFormFactura.Equals("170"))
                            {
                                query = "select lin.DocEntry, 1 as LineNum, '' as ItemCode, 'Cobro de cliente' as Dscription, 'UN' as unitMsr, '' as FreeTxt , 'UYU' as Currency, " +
                                "0 as Rate, '' as TaxCode, 0 as DiscPrcnt, 1 as Quantity, 1 as InvQty, lin.DocTotal as Price, 0 as PriceBefDi, " +
                                "lin.DocTotal as LineTotal, lin.DocTotalFC as TotalFrgn, 0 as VatSum, 0 as VatSumFrgn, '' as BaseDocNum, 1 as VisOrder, " +
                                "'' as InvntItem, '' as UserText, 0 as UgpEntry " +
                                "from ORCT as lin where DocNum = '" + pDocNum + "' order by lin.DocEntry desc";
                            }
                        }
                        else
                            query = obtenerQueryAgrupado(pDocEntry, pDocNum, pFormFactura, pAgrupado, tabla, tablaLineas, filtroAdicional);

                        oRSMyTable.DoQuery(query);

                        if (oRSMyTable != null)
                        {
                            if (oRSMyTable.RecordCount != 0)
                            {
                                List<clsObjDocumentoLineas> lineasDoc = new List<clsObjDocumentoLineas>();
                                while (!oRSMyTable.EoF)
                                {
                                    clsObjDocumentoLineas lineaDoc = new clsObjDocumentoLineas();

                                    lineaDoc.DocEntry = oRSMyTable.Fields.Item("DocEntry").Value;
                                    lineaDoc.LineNum = oRSMyTable.Fields.Item("LineNum").Value;
                                    lineaDoc.ItemCode = oRSMyTable.Fields.Item("ItemCode").Value;
                                    lineaDoc.VisOrder = oRSMyTable.Fields.Item("VisOrder").Value;
                                    lineaDoc.ObjType = Convert.ToInt32(objDoc.ObjType);
                                    lineaDoc.VisOrder++;
                                    lineaDoc.DescripcionDocumento = oRSMyTable.Fields.Item("Dscription").Value;
                                    lineaDoc.UnidadMedida = oRSMyTable.Fields.Item("unitMsr").Value;
                                    if (!descEmpresa.ToString().Equals("TRIAL"))
                                        lineaDoc.FreeTxt = oRSMyTable.Fields.Item("FreeTxt").Value;
                                    lineaDoc.MonedaLinea = oRSMyTable.Fields.Item("Currency").Value;
                                    lineaDoc.TipoCambioLinea = (decimal)oRSMyTable.Fields.Item("Rate").Value;
                                    lineaDoc.CodigoImpuesto = oRSMyTable.Fields.Item("TaxCode").Value;
                                    lineaDoc.DescuentoPorcentaje = (decimal)oRSMyTable.Fields.Item("DiscPrcnt").Value;
                                    if (descEmpresa.ToString().Equals("RURAL"))
                                    {
                                        if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("BatchNum").Value))
                                            lineaDoc.Cantidad = (decimal)oRSMyTable.Fields.Item("CANTLOTE").Value;
                                        else if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("IntrSerial").Value))
                                            lineaDoc.Cantidad = (decimal)1.00;
                                        else
                                            lineaDoc.Cantidad = (decimal)oRSMyTable.Fields.Item("Quantity").Value;
                                    }
                                    if (descEmpresa.ToString().Equals("CABIN"))
                                    {
                                        if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("BatchNum").Value))
                                            lineaDoc.Cantidad = (decimal)oRSMyTable.Fields.Item("CANTLOTE").Value;
                                        else
                                            lineaDoc.Cantidad = (decimal)oRSMyTable.Fields.Item("Quantity").Value;

                                    }
                                    else
                                        lineaDoc.Cantidad = (decimal)oRSMyTable.Fields.Item("Quantity").Value;
                                    lineaDoc.CantidadInventario = (decimal)oRSMyTable.Fields.Item("InvQty").Value;
                                    lineaDoc.Precio = (decimal)oRSMyTable.Fields.Item("Price").Value;
                                    lineaDoc.PrecioAntesDelDescuento = (decimal)oRSMyTable.Fields.Item("PriceBefDi").Value;
                                    if (descEmpresa.ToString().Equals("RURAL"))
                                    {
                                        if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("BatchNum").Value))
                                        {
                                            lineaDoc.TotalLinea = ((decimal)oRSMyTable.Fields.Item("LineTotal").Value / (decimal)oRSMyTable.Fields.Item("Quantity").Value) * (decimal)oRSMyTable.Fields.Item("CANTLOTE").Value;
                                            lineaDoc.TotalLineaME = ((decimal)oRSMyTable.Fields.Item("TotalFrgn").Value / (decimal)oRSMyTable.Fields.Item("Quantity").Value) * (decimal)oRSMyTable.Fields.Item("CANTLOTE").Value;
                                        }
                                        else if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("IntrSerial").Value))
                                        {
                                            lineaDoc.TotalLinea = ((decimal)oRSMyTable.Fields.Item("LineTotal").Value / (decimal)oRSMyTable.Fields.Item("Quantity").Value);
                                            lineaDoc.TotalLineaME = ((decimal)oRSMyTable.Fields.Item("TotalFrgn").Value / (decimal)oRSMyTable.Fields.Item("Quantity").Value);
                                        }
                                        else
                                        {
                                            lineaDoc.TotalLinea = (decimal)oRSMyTable.Fields.Item("LineTotal").Value;
                                            lineaDoc.TotalLineaME = (decimal)oRSMyTable.Fields.Item("TotalFrgn").Value;
                                        }
                                    }
                                    if (descEmpresa.ToString().Equals("CABIN"))
                                    {
                                        if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("BatchNum").Value))
                                        {
                                            lineaDoc.TotalLinea = ((decimal)oRSMyTable.Fields.Item("LineTotal").Value / (decimal)oRSMyTable.Fields.Item("Quantity").Value) * (decimal)oRSMyTable.Fields.Item("CANTLOTE").Value;
                                            lineaDoc.TotalLineaME = ((decimal)oRSMyTable.Fields.Item("TotalFrgn").Value / (decimal)oRSMyTable.Fields.Item("Quantity").Value) * (decimal)oRSMyTable.Fields.Item("CANTLOTE").Value;
                                        }
                                        else
                                        {
                                            lineaDoc.TotalLinea = (decimal)oRSMyTable.Fields.Item("LineTotal").Value;
                                            lineaDoc.TotalLineaME = (decimal)oRSMyTable.Fields.Item("TotalFrgn").Value;
                                        }
                                    }
                                    else
                                    {
                                        lineaDoc.TotalLinea = (decimal)oRSMyTable.Fields.Item("LineTotal").Value;
                                        lineaDoc.TotalLineaME = (decimal)oRSMyTable.Fields.Item("TotalFrgn").Value;
                                    }
                                    lineaDoc.TotalIVA = (decimal)oRSMyTable.Fields.Item("VatSum").Value;
                                    lineaDoc.TotalIVAME = (decimal)oRSMyTable.Fields.Item("VatSumFrgn").Value;
                                    lineaDoc.BaseDocNum = oRSMyTable.Fields.Item("BaseDocNum").Value.ToString();
                                    if (!descEmpresa.ToString().Equals("TRIAL"))
                                    {
                                        if (!pFormFactura.Equals("170"))
                                        {
                                            lineaDoc.DescripcionMaestroArt = oRSMyTable.Fields.Item("ItemName").Value;
                                            lineaDoc.CodigoBarras = oRSMyTable.Fields.Item("CodeBars").Value;
                                        }
                                    }
                                    lineaDoc.ArticuloInventario = oRSMyTable.Fields.Item("InvntItem").Value;
                                    if (!descEmpresa.ToString().Equals("TRIAL"))
                                        lineaDoc.UserText = oRSMyTable.Fields.Item("UserText").Value;
                                    if (!pFormFactura.Equals("170"))
                                    {
                                        lineaDoc.TasaIVA = (decimal)oRSMyTable.Fields.Item("PorcIVA").Value;
                                        lineaDoc.CantidadPorPaqueteVenta = (decimal)oRSMyTable.Fields.Item("SalPackUn").Value;
                                        lineaDoc.CantidadCajas = (decimal)oRSMyTable.Fields.Item("PackQty").Value;
                                        lineaDoc.NombreUnidadMedidaVenta = oRSMyTable.Fields.Item("SalUnitMsr").Value;
                                    }
                                    if (pAgrupado == false)
                                        lineaDoc.UgpEntry = oRSMyTable.Fields.Item("UgpEntry").Value;

                                    if (descEmpresa.ToString().Equals("POCHA"))
                                    {
                                        lineaDoc.U_CodigoRondanet = oRSMyTable.Fields.Item("U_RONDANET").Value;

                                        try
                                        {
                                            if (!String.IsNullOrEmpty(objDoc.GastoAdiCodigo)) // Si tiene gasto adicional
                                            {
                                                int codeItemGrp = oRSMyTable.Fields.Item("ItmsGrpCod").Value;
                                                string inmunidadDesc = (string)oRSMyTable.Fields.Item("QryGroup3").Value;
                                                if (codeItemGrp == 121 && inmunidadDesc.Equals("Y")) // Si es del grupo Leche y si tiene inmunidad de descuentos
                                                {
                                                    objDoc.GastoTotalCantLineas += lineaDoc.Cantidad; // Suma las líneas asociadas al gasto adicional
                                                    lineaDoc.GastoAdiCodigo = objDoc.GastoAdiCodigo;

                                                    if (oRSMyTable.RecordCount == 1) // Si es un documento con una línea sola entonces le asigno el total del gasto
                                                    {
                                                        //lineaDoc.GastoAdiDesc = objDoc.GastoAdiDesc;
                                                        lineaDoc.GastoAdiMonto = objDoc.GastoAdiMonto;
                                                    }
                                                }
                                                else
                                                {
                                                    if (oRSMyTable.RecordCount == 1) // Si tiene un solo artículo y no es Leche con Inmunidad de desc
                                                    {
                                                        objDoc.GastoAdiMonto = 0; // Sino entonces le resto el valor que corresponde al total de la retención
                                                        objDoc.GastoAdiCodigo = "";
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso(pFormFactura.ToString(), pDocEntry.ToString() + "_" + pDocNum.ToString(), "ERROR al obtener Gasto Adi GPocha", ex.Message.ToString()); } // Guarda log del Proceso
                                    }
                                    else if (descEmpresa.ToString().Equals("TRIGE"))
                                    {
                                        try
                                        {
                                            lineaDoc.U_NroDeclaracion = oRSMyTable.Fields.Item("U_NroDeclaracion").Value;
                                            lineaDoc.U_NumeroNCM = oRSMyTable.Fields.Item("CodeNCM").Value;
                                            lineaDoc.U_KgsBrutos = oRSMyTable.Fields.Item("U_KGSBRUTOS").Value;
                                            lineaDoc.Volumen = oRSMyTable.Fields.Item("SVolume").Value;
                                            lineaDoc.Peso = oRSMyTable.Fields.Item("SWeight1").Value;
                                        }
                                        catch (Exception ex)
                                        { guardaLogProceso(pFormFactura.ToString(), pDocEntry.ToString() + "_" + pDocNum.ToString(), "ERROR al CargarCampos Trigueña", ex.Message.ToString()); } // Guarda log del Proceso
                                    }
                                    else if (descEmpresa.ToString().Equals("PORTV"))
                                        lineaDoc.U_Marca = oRSMyTable.Fields.Item("U_Marca").Value;
                                    else if (descEmpresa.ToString().Equals("RURAL"))
                                        lineaDoc.LoteBatchNum = oRSMyTable.Fields.Item("LOTEBATCHNUM").Value; //obtenerLote(lineaDoc); 
                                    else if (descEmpresa.ToString().Equals("CABIN"))
                                    {
                                        if (!string.IsNullOrEmpty(oRSMyTable.Fields.Item("LoteBatchNum").Value))
                                        {
                                            DateTime fechaVenc = oRSMyTable.Fields.Item("ExpDate").Value;
                                            lineaDoc.LoteBatchNum = "Lote " + oRSMyTable.Fields.Item("LoteBatchNum").Value + " - Venc " + fechaVenc.ToString(formatoFecha);
                                        }
                                        else
                                            lineaDoc.LoteBatchNum = "";
                                    }
                                    else if (descEmpresa.ToString().Equals("MILDA"))
                                    {
                                        lineaDoc.U_Marca = oRSMyTable.Fields.Item("U_Marca").Value;
                                        lineaDoc.U_Campana = oRSMyTable.Fields.Item("U_Campana").Value;
                                        lineaDoc.U_Ubicacion = oRSMyTable.Fields.Item("U_UBICACION").Value;
                                        lineaDoc.U_Inicio = oRSMyTable.Fields.Item("U_Inicio").Value;
                                        lineaDoc.U_Fin = oRSMyTable.Fields.Item("U_Fin").Value;
                                    }
                                    else if (descEmpresa.ToString().Equals("TRIAL"))
                                        lineaDoc.U_ItemFactura = oRSMyTable.Fields.Item("ItemFactura").Value;
                                    else if (descEmpresa.ToString().Equals("ENGRW") && !pFormFactura.ToString().Equals("141") && !pFormFactura.ToString().Equals("181"))
                                    {
                                        lineaDoc.U_FeDescripcion = oRSMyTable.Fields.Item("U_FEDescripcion").Value;
                                        lineaDoc.U_KgsAcond = Convert.ToDecimal(oRSMyTable.Fields.Item("U_KgsAcond").Value);
                                        lineaDoc.LoteItemCode = oRSMyTable.Fields.Item("LoteItemCode").Value;
                                        lineaDoc.LoteBatchNum = oRSMyTable.Fields.Item("LoteBatchNum").Value;
                                    }

                                    lineaDoc.U_CodigoRondanet = "5555"; // PRUEBA CODIGO RONDANET

                                    lineasDoc.Add(lineaDoc);
                                    oRSMyTable.MoveNext();
                                }

                                try
                                {
                                    if (!String.IsNullOrEmpty(objDoc.GastoAdiCodigo) && lineasDoc.Count > 1) // Si tiene gasto adicional
                                    {
                                        foreach (clsObjDocumentoLineas lineGasto in lineasDoc) // Recorre las líneas
                                        {
                                            if (!String.IsNullOrEmpty(lineGasto.GastoAdiCodigo)) // Si es una línea que esta enlazada al gasto adicional
                                            {
                                                lineGasto.GastoAdiMonto = Math.Round(((lineGasto.Cantidad * objDoc.GastoAdiMonto) / objDoc.GastoTotalCantLineas), 2);
                                                //lineGasto.GastoAdiDesc = objDoc.GastoAdiDesc;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                { guardaLogProceso(pFormFactura.ToString(), pDocEntry.ToString() + "_" + pDocNum.ToString(), "ERROR al obtener calcular Adi GPocha", ex.Message.ToString()); } // Guarda log del Proceso

                                objDoc.lineas = lineasDoc; // Agrego la Lista de líneas
                            }
                        }
                    }
                }

                return objDoc;
            }
            catch (Exception ex)
            {
                guardaLogProceso(pFormFactura.ToString(), pDocEntry.ToString() + "_" + pDocNum.ToString(), "ERROR al obtenerObjetoDocumento", ex.Message.ToString()); // Guarda log del Proceso
                return objDoc;
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oRSMyTable);
                oRSMyTable = null;
            }
        }

        public List<clsObjDocumentoLineas> QueryALista(string query)
        {
            // Create Recordset object and execute query
            Recordset rs = (Recordset)oCompany.GetBusinessObject(BoObjectTypes.BoRecordset);
            rs.DoQuery(query);
            List<clsObjDocumentoLineas> lista = new List<clsObjDocumentoLineas>();
            
            while (!rs.EoF)
            {
                clsObjDocumentoLineas doc = new clsObjDocumentoLineas();
                doc.ItemCode = rs.Fields.Item("NomItem").Value.ToString(); 
                doc.Cantidad = Convert.ToDecimal(rs.Fields.Item("Cantidad").Value);
                doc.UnidadMedida = rs.Fields.Item("UniMed").Value.ToString();
                doc.PrecioAntesDelDescuento = Convert.ToDecimal(rs.Fields.Item("PrecioUnitario").Value);
                doc.TotalLinea = Convert.ToDecimal(rs.Fields.Item("MontoItem").Value);
                doc.MonedaLinea = rs.Fields.Item("Moneda").Value.ToString();
                lista.Add(doc);
                rs.MoveNext();
            }

            return lista;
        }

        public string obtenerQueryAgrupado(int pDocEntry, int pDocNum, string pFormFactura, bool pAgrupado, string pTabla, string pTablaLineas, string pFiltroAdicional)
        {
            string query = "";
            try
            {
                // Buscos las líneas
                query = "select lin.DocEntry,ROW_NUMBER() OVER(ORDER BY lin.DocEntry ASC) as LineNum, ROW_NUMBER() OVER(ORDER BY lin.DocEntry ASC) as VisOrder, lin.ItemCode, lin.Dscription, lin.unitMsr, lin.FreeTxt , lin.Currency, lin.Rate, lin.TaxCode, lin.DiscPrcnt, sum(lin.Quantity) as Quantity, sum(lin.InvQty) as InvQty, " +
                "lin.Price, lin.PriceBefDi,sum( lin.LineTotal) as LineTotal, sum(lin.TotalFrgn) as TotalFrgn,sum(lin.VatSum) as VatSum,sum(lin.VatSumFrgn) as VatSumFrgn, " +
                "isnull(lin.BaseDocNum,'') as BaseDocNum, o.ItemName, o.CodeBars, o.InvntItem , '' as UserText, imp.Rate as PorcIVA, o.SalPackUn, o.SalUnitMsr, sum(lin.PackQty) as PackQty ";

                if (descEmpresa.ToString().Equals("TRIAL"))
                {
                    query = "select lin.DocEntry,ROW_NUMBER() OVER(ORDER BY lin.DocEntry ASC) as LineNum, ROW_NUMBER() OVER(ORDER BY lin.DocEntry ASC) as VisOrder, CASE WHEN o.U_EXX_ITEMFACTURA IS NOT NULL THEN o.U_EXX_ITEMFACTURA ELSE lin.ItemCode END AS ItemCode, isnull(o.U_EXX_ITEMFACTURA, '') as ItemFactura, lin.Dscription, " +
                    "lin.unitMsr, lin.Currency, lin.Rate, lin.TaxCode, lin.DiscPrcnt, SUM(lin.Quantity) as Quantity, SUM(lin.InvQty) as InvQty, SUM(lin.LineTotal)/ SUM(lin.Quantity) as Price, (SUM(lin.LineTotal)/ SUM(lin.Quantity)) as PriceBefDi, SUM(lin.LineTotal) as LineTotal, SUM(lin.TotalFrgn) as TotalFrgn, SUM(lin.VatSum) as VatSum, SUM(lin.VatSumFrgn) as VatSumFrgn, " +
                    "isnull(lin.BaseDocNum,'') as BaseDocNum, o.InvntItem, imp.Rate as PorcIVA, AVG(o.SalPackUn) as SalPackUn, o.SalUnitMsr, SUM(lin.PackQty) as PackQty ";
                }

                if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                {
                    query = "select lin.\"DocEntry\",ROW_NUMBER() OVER(ORDER BY lin.\"DocEntry\" ASC) as LineNum, ROW_NUMBER() OVER(ORDER BY lin.\"DocEntry\" ASC) as VisOrder, lin.\"ItemCode\", lin.\"Dscription\", lin.\"unitMsr\", lin.\"FreeTxt\", lin.\"Currency\", lin.\"Rate\", lin.\"TaxCode\", lin.\"DiscPrcnt\", sum(lin.\"Quantity\") as Quantity, sum(lin.\"InvQty\") as InvQty, " +
                    "lin.\"Price\", lin.\"PriceBefDi\", sum(lin.\"LineTotal\") as LineTotal, sum(lin.\"TotalFrgn\") as TotalFrgn, sum(lin.\"VatSum\") as VatSum, sum(lin.\"VatSumFrgn\") as VatSumFrgn, " +
                    "IFNULL(lin.\"BaseDocNum\",NULL) as BaseDocNum, o.\"ItemName\", o.\"CodeBars\", o.\"InvntItem\", '' as UserText, imp.\"Rate\" as PorcIVA, o.\"SalPackUn\", o.\"SalUnitMsr\", sum(lin.\"PackQty\") as PackQty ";
                }

                // Acá agrego los campos de usuario de cada empresa
                if (descEmpresa.ToString().Equals("POCHA"))
                    query += ", \"U_RONDANET\" ";
                else if (descEmpresa.ToString().Equals("PORTV"))
                    query += ", U_Marca ";
                //else if (descEmpresa.ToString().Equals("RURAL"))
                //    query += ", \"U_LOTE\" ";
                else if (descEmpresa.ToString().Equals("ENGRW"))
                {
                    if (!pFormFactura.ToString().Equals("140")) // Si no es Remitos
                        query += ", isnull(U_FEDescripcion, '') as U_FEDescripcion, isnull(U_KgsAcond,0) as U_KgsAcond, T5.ItemCode as LoteItemCode, Left (T5.BatchNum,7) as LoteBatchNum ";
                    else
                        query += ", isnull(U_FEDescripcion, '') as U_FEDescripcion, isnull(U_KgsAcond,0) as U_KgsAcond, T5.ItemCode as LoteItemCode, Left (T5.BatchNum,8) as LoteBatchNum ";
                }

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                {
                    query += "from " + pTablaLineas + " as lin  " +
                    "inner join OITM as o on o.ItemCode = lin.ItemCode " +
                    "LEFT JOIN OSTC as imp on imp.Code = lin.TaxCode ";
                }
                else
                {
                    query += "from \"" + pTablaLineas + "\" as lin  " +
                    "inner join \"OITM\" as o on o.\"ItemCode\" = lin.\"ItemCode\" " +
                    "LEFT JOIN \"OSTC\" as imp on imp.\"Code\" = lin.\"TaxCode\" ";
                }

                //if (descEmpresa.ToString().Equals("RURAL"))
                //    query += "LEFT JOIN IBT1 T5 ON T5.BaseEntry = lin.Docentry and T5.Itemcode = lin.Itemcode and T5.Basetype = lin.ObjType and T5.BaseLinNum = lin.Linenum ";
                if (descEmpresa.ToString().Equals("ENGRW"))
                    query += "LEFT JOIN IBT1 T5 ON T5.BaseEntry = lin.Docentry and T5.Itemcode = lin.Itemcode and T5.Basetype = lin.ObjType and T5.BaseLinNum = lin.Linenum and T5.Direction=1 ";

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += "where lin.DocEntry = (select top 1 DocEntry from " + pTabla + " where DocNum = '" + pDocNum + "' " + pFiltroAdicional + " order by DocEntry desc) ";
                else
                    query += "WHERE lin.\"DocEntry\" = (SELECT TOP 1 \"DocEntry\" FROM \"" + pTabla + "\" WHERE \"DocNum\" = '" + pDocNum + "' " + pFiltroAdicional + " ORDER BY \"DocEntry\" DESC) ";

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                {
                    if (descEmpresa.ToString().Equals("TRIAL"))
                    {
                        query += " GROUP BY lin.DocEntry, CASE WHEN o.U_EXX_ITEMFACTURA IS NOT NULL THEN o.U_EXX_ITEMFACTURA ELSE lin.ItemCode END, o.U_EXX_ITEMFACTURA, lin.Dscription, lin.unitMsr, " +
                        "lin.Currency, lin.Rate, lin.TaxCode, lin.DiscPrcnt, lin.BaseDocNum, o.InvntItem, imp.Rate, o.SalUnitMsr ";
                    }
                    else
                        query += " GROUP BY lin.DocEntry, lin.ItemCode, lin.Dscription, lin.unitMsr, lin.Currency, lin.Rate, lin.TaxCode, " +
                        "lin.DiscPrcnt, lin.Price, lin.PriceBefDi, lin.BaseDocNum, o.ItemName, o.CodeBars, o.InvntItem, imp.Rate, o.SalPackUn, o.SalUnitMsr ";
                }
                else
                    query += " GROUP BY lin.\"DocEntry\", lin.\"ItemCode\", lin.\"Dscription\", lin.\"unitMsr\", lin.\"FreeTxt\", lin.\"Currency\", lin.\"Rate\", lin.\"TaxCode\", " +
                    "lin.\"DiscPrcnt\", lin.\"Price\", lin.\"PriceBefDi\", lin.\"BaseDocNum\", o.\"ItemName\", o.\"CodeBars\", o.\"InvntItem\", imp.\"Rate\", o.\"SalPackUn\", o.\"SalUnitMsr\" ";

                //if (descEmpresa.Equals("RURAL"))
                //    query += ", T5.BatchNum ";

                if (tipoConexionBaseDatos.ToString().Equals("SQL"))
                    query += "order by LineNum";
                else
                    query += "order by \"LINENUM\"";

                //if (tipoConexionBaseDatos.ToString().Equals("HANNA"))
                //{
                //    query = "select top 1 \"DocNum\", \"DocEntry\", \"ObjType\", \"CardCode\", \"CardName\", \"DocDate\", \"DocDueDate\", \"TaxDate\", \"LicTradNum\", \"Address\" " +
                //    "\"Address2\", \"U_IDCOMPRA\" " +
                //    "from \"" + tabla + "\" where \"DocNum\" = \'" + pDocNum + "\' " + filtroAdicional + " order by \"DocEntry\" desc";
                //}

                return query;
            }
            catch (Exception ex)
            { guardaLogProceso(pFormFactura.ToString(), pDocEntry.ToString() + "_" + pDocNum.ToString(), "ERROR al obtenerObjetoDocumento Agrupado", ex.Message.ToString()); } // Guarda log del Proceso
            return query;
        }
    }
}